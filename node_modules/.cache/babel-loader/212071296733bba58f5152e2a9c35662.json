{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { UPDATE_FAIL, UPDATE_SUCCESS, USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS, EXPIRE_EXTEND } from './types'; // check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  }); // get token from localstorage\n\n  const token = getState().auth.token;\n  console.log(\"Token from load User\", token); // Header\n\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // if token , add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n    axios.get(\"/auth/user\", config).then(res => dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    })).catch(err => {\n      console.log(err);\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  }\n};\nexport const isBlockedF = isBlocked => dispatch => {\n  const type = isBlocked ? \"BLOCK\" : \"FREE_BLOCK\";\n  dispatch({\n    type: type,\n    payload: isBlocked\n  });\n};\nexport const TokenExpireExtend = ({\n  rememberMe\n}) => dispatch => {\n  // Headers\n  dispatch({\n    type: EXPIRE_EXTEND,\n    payload: rememberMe\n  });\n};\nexport const loginModalOpen = isOpen => dispatch => {\n  const type = isOpen ? \"LOGIN_MODAL_OPEN\" : \"LOGIN_MODAL_CLOSE\";\n  dispatch({\n    type: type,\n    payload: isOpen\n  });\n}; // Login User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(body);\n  axios.post(\"/auth/login\", body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    console.log(\"catch block error\");\n    dispatch(returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\"));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  fname,\n  lname,\n  email,\n  password,\n  img,\n  city,\n  state,\n  postal,\n  country,\n  ip\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    fname,\n    lname,\n    email,\n    password,\n    img,\n    city,\n    state,\n    postal,\n    country,\n    ip\n  });\n  console.log(body);\n  axios.post(\"/auth/register\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    console.log(\"catch block error\");\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const update = ({\n  id,\n  fname,\n  lname,\n  email,\n  password,\n  img,\n  city,\n  state,\n  postal,\n  country,\n  ip\n}) => (dispatch, getState) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const token = getState().auth.token;\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  } // Request body\n\n\n  const body = JSON.stringify({\n    id,\n    fname,\n    lname,\n    email,\n    password,\n    img,\n    city,\n    state,\n    postal,\n    country,\n    ip\n  });\n  console.log(body);\n  axios.post(\"/auth/update\", body, config).then(res => dispatch({\n    type: UPDATE_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    console.log(\"catch block error-- \");\n    dispatch(returnErrors(err.response.data, err.response.status, \"UPDATE_FAIL\"));\n    dispatch({\n      type: UPDATE_FAIL\n    });\n  });\n}; // Logout uSER\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};","map":{"version":3,"sources":["C:/Users/spicy/Downloads/Inventory-management-17/client/src/action/authActions.js"],"names":["axios","returnErrors","UPDATE_FAIL","UPDATE_SUCCESS","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","EXPIRE_EXTEND","loadUser","dispatch","getState","type","token","auth","console","log","config","headers","get","then","res","payload","data","catch","err","response","status","isBlockedF","isBlocked","TokenExpireExtend","rememberMe","loginModalOpen","isOpen","login","email","password","body","JSON","stringify","post","register","fname","lname","img","city","state","postal","country","ip","update","id","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors} from './errorActions';\n\nimport { UPDATE_FAIL, UPDATE_SUCCESS, USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS, EXPIRE_EXTEND } from './types';\n\n// check token & load user\nexport const loadUser= ()=> (dispatch,getState)=>{\n    // User loading\n    dispatch({type:USER_LOADING});\n    // get token from localstorage\n    const token=getState().auth.token;\n    console.log(\"Token from load User\",token);\n \n    // Header\nconst config={\n    headers:{\n        \"Content-Type\":\"application/json\"\n    }\n}\n// if token , add to headers\nif(token){\n    config.headers['x-auth-token']=token;\n\n    axios.get(\"/auth/user\",config)\n    .then(res=> dispatch({\n        type:USER_LOADED,\n        payload:res.data\n        \n    }))\n    .catch(err=>{\n        console.log(err);\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n            type:AUTH_ERROR\n        });\n    }) }\n}\n\nexport const isBlockedF=(isBlocked)=>dispatch=>{\n    const type=isBlocked?\"BLOCK\":\"FREE_BLOCK\";\n    dispatch({\n        type:type,\n        payload:isBlocked\n    })\n}\n\nexport const TokenExpireExtend=({rememberMe})=>dispatch=>{\n    // Headers\n    dispatch({\n        type:EXPIRE_EXTEND,\n        payload:rememberMe\n    })\n   \n    }\n\n\n\nexport const loginModalOpen=(isOpen)=>dispatch=>{\n    const type=isOpen?\"LOGIN_MODAL_OPEN\":\"LOGIN_MODAL_CLOSE\";\n    dispatch({\n        type:type,\n        payload:isOpen})\n}\n\n\n// Login User\nexport const login=({email,password})=>dispatch=>{\n    // Headers\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    // Request body\n\n    const body=JSON.stringify({email,password});\n    console.log(body);\n\n    axios.post(\"/auth/login\",body,config)\n    .then(res=> dispatch({\n        type:LOGIN_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n        console.log(\"catch block error\")\n        dispatch(returnErrors(err.response.data, err.response.status,\"LOGIN_FAIL\"));\n        dispatch({\n            type:LOGIN_FAIL\n        });\n    })\n\n}\n\n\n// Register User\n\nexport const register=({fname,lname,email,password,img,city,state,postal,country,ip})=>dispatch=>{\n    // Headers\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    // Request body\n\n    const body=JSON.stringify({fname,lname,email,password,img,city,state,postal,country,ip});\n    console.log(body);\n\n    axios.post(\"/auth/register\",body,config)\n    .then(res=> dispatch({\n        type:REGISTER_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n        console.log(\"catch block error\")\n        dispatch(returnErrors(err.response.data, err.response.status,\"REGISTER_FAIL\"));\n        dispatch({\n            type:REGISTER_FAIL\n        });\n    })\n\n}\n\n\nexport const update=({id,fname,lname,email,password,img,city,state,postal,country,ip})=>(dispatch,getState)=>{\n    // Headers\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    const token=getState().auth.token;\n    if(token){\n        config.headers['x-auth-token']=token;\n    }\n    // Request body\n\n    const body=JSON.stringify({id,fname,lname,email,password,img,city,state,postal,country,ip});\n    console.log(body);\n    axios.post(\"/auth/update\",body,config)\n    .then(res=> dispatch({\n        type:UPDATE_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n        console.log(\"catch block error-- \")\n        dispatch(returnErrors(err.response.data, err.response.status,\"UPDATE_FAIL\"));\n        dispatch({\n            type:UPDATE_FAIL\n        });\n    })\n\n}\n\n\n\n// Logout uSER\nexport const logout=()=>{\n    return{\n        type:LOGOUT_SUCCESS\n    };\n};\n"]},"metadata":{},"sourceType":"module"}