{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spicy\\\\Downloads\\\\Inventory-management-17\\\\client\\\\src\\\\components\\\\Order\\\\AddOrderModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Col, Alert, NavLink, Modal, Form } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { clearErrors } from '../../action/errorActions';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\nimport { loadUser } from '../../action/authActions';\nimport { getItems } from '../../action/itemAction';\nimport { addOrder, getOrders } from '../../action/orderAction';\nimport { getCustomers } from '../../action/customerAction';\nimport { getCategories } from '../../action/categoryAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schemaOrder = yup.object({\n  customer_id: yup.number().positive().integer().min(1, \"Choose Any Customer\"),\n  category_id: yup.number().positive().integer().min(1, \"Choose Any Category\"),\n  product_id: yup.string().min(9, \"Choose Any Product\"),\n  payment1: yup.number().positive().integer().min(1, \"Choose Any Payment Status\"),\n  quantity: yup.number().integer().min(1, \"Choose Atleast One Quantity\").max(100, 'Max 100 Allowed/Order') // total:yup.number().integer().min(1,\"Choose Any Product\")\n\n});\n\nclass AddOrderModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      // modal for adding item is false initially\n      msg: null\n    };\n\n    this.toggle = () => {\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n      console.log(\"Toggle:\", this.state.modal);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getCustomers();\n    this.props.getCategories();\n    this.props.getItems();\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(\"Add Order Called\");\n    const {\n      error\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      if (error.id === \"UPDATE_FAIL\") {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if authenticated close Modal\n    // if(this.state.modal){\n    //     if(isAuthenticated){\n    //         this.toggle();\n    //     }\n    // }\n\n  }\n\n  render() {\n    var customers = this.props.customers.length === 0 ? [] : this.props.customers;\n    var products = this.props.products.length === 0 ? [] : this.props.products;\n    var categories = this.props.categories.length === 0 ? [] : this.props.categories;\n\n    const getCategory = id => {\n      return categories.filter(cat => cat.id === parseInt(id))[0].name;\n    }; // console.log(\"Category:\",getCategory(\"1254\"));\n\n\n    const getProducts = (id, products) => {\n      if (id === \"0\") return [];\n      let cat_name = getCategory(id);\n      return products.filter(p => p.category === cat_name);\n    };\n\n    const getPrice = id => {\n      if (id !== '0') {\n        return products.filter(p => p.id === id)[0].price;\n      }\n\n      return 0;\n    };\n\n    console.log(\"User:\", this.props.user);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        href: \"#\",\n        onClick: this.toggle,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            paddingLeft: ' 1.5rem',\n            paddingRight: '1.5rem'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Add Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 79\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.modal,\n        onHide: this.toggle,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          style: {\n            color: 'white',\n            backgroundImage: `url(\"${back}\")`,\n            backgroundSize: '32rem',\n            backgroundRepeat: 'no-repeat'\n          },\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Add Order\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 156\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [this.state.msg ? /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"danger\",\n            children: this.state.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this) : null, /*#__PURE__*/_jsxDEV(Formik, {\n            validationSchema: schemaOrder,\n            initialValues: {\n              customer_id: '0',\n              product_id: '0',\n              quantity: 0,\n              total: 0,\n              category_id: '0',\n              payment1: '0'\n            },\n            onSubmit: values => {\n              const {\n                product_id,\n                customer_id,\n                quantity,\n                payment1\n              } = values;\n              let by_user_id = this.props.user ? this.props.user._id : 9;\n              let payment = parseInt(payment1) === 1 ? \"Completed\" : \"Pending\";\n              let total = quantity * getPrice(product_id);\n              console.log(product_id, customer_id, by_user_id, quantity, total, payment);\n              const newOrder = {\n                product_id,\n                customer_id,\n                by_user_id,\n                quantity,\n                total,\n                payment\n              };\n              this.props.addOrder(newOrder);\n              this.toggle();\n              setTimeout(() => {\n                this.props.getOrders();\n              }, 1500);\n            },\n            children: ({\n              handleSubmit,\n              handleChange,\n              values,\n              errors\n            }) => /*#__PURE__*/_jsxDEV(Form, {\n              noValidate: true,\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"6\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Customer\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\" // type=\"password\"\n                    ,\n                    placeholder: \"\",\n                    name: \"customer_id\",\n                    value: values.customer_id,\n                    onChange: handleChange,\n                    isInvalid: !!errors.customer_id,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0\",\n                      children: \"Choose Customer\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 186,\n                      columnNumber: 19\n                    }, this), this.props.customers.map((customer, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: customer.id,\n                      children: customer.fname + \" \" + customer.lname\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 189,\n                      columnNumber: 23\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.customer_id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 196,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 13\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"6\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Category\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\" // type=\"password\"\n                    ,\n                    placeholder: \"\",\n                    name: \"category_id\",\n                    value: values.category_id,\n                    onChange: handleChange,\n                    isInvalid: !!errors.category_id,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0\",\n                      children: \"Choose Category\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 215,\n                      columnNumber: 19\n                    }, this), categories.map((category, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: category.id,\n                      children: category.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 218,\n                      columnNumber: 23\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.category_id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 225,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"12\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Product Under Choosen Category\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 235,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\",\n                    placeholder: \"\",\n                    name: \"product_id\",\n                    value: values.product_id,\n                    onChange: handleChange,\n                    isInvalid: !!errors.product_id,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0\",\n                      children: \"Choose Product\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 245,\n                      columnNumber: 19\n                    }, this), getProducts(values.category_id, products).map((product, key) => /*#__PURE__*/_jsxDEV(\"option\", {\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      value: product.id,\n                      children: [\" #\", key + 1, \" | \", product.name, \" | Price: \\u20B9\", product.price, \" | Stock: \", product.stock]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 247,\n                      columnNumber: 23\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 237,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.product_id\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 10\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"6\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Quantity\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 261,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"number\",\n                    placeholder: \"Quantity\",\n                    name: \"quantity\",\n                    value: values.quantity,\n                    onChange: handleChange,\n                    isInvalid: !!errors.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.quantity\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 10\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"6\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Total\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    disabled: true,\n                    type: \"number\",\n                    placeholder: \"total\",\n                    name: \"total\",\n                    value: values.quantity === 0 ? values.total : values.quantity * parseInt(getPrice(values.product_id)),\n                    onChange: handleChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 282,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 10\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Form.Row, {\n                children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"12\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Payment\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 300,\n                    columnNumber: 14\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    as: \"select\",\n                    placeholder: \"\",\n                    name: \"payment1\",\n                    value: values.payment1,\n                    onChange: handleChange,\n                    isInvalid: !!errors.payment1,\n                    children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"0\",\n                      children: \"Choose Product\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"1\",\n                      children: \"Completed\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 311,\n                      columnNumber: 19\n                    }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                      value: \"2\",\n                      children: \"Pending\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 312,\n                      columnNumber: 19\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.payment1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 315,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Add Order\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nAddOrderModal.propTypes = {\n  error: PropTypes.object.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    customers: state.customer.customers,\n    products: state.item.items,\n    categories: state.category.categories,\n    user: state.auth.user,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadUser,\n  clearErrors,\n  addOrder,\n  getOrders,\n  getCategories,\n  getCustomers,\n  getItems\n})(AddOrderModal);","map":{"version":3,"sources":["C:/Users/spicy/Downloads/Inventory-management-17/client/src/components/Order/AddOrderModal.js"],"names":["React","Component","Button","Col","Alert","NavLink","Modal","Form","connect","PropTypes","clearErrors","Formik","yup","back","loadUser","getItems","addOrder","getOrders","getCustomers","getCategories","schemaOrder","object","customer_id","number","positive","integer","min","category_id","product_id","string","payment1","quantity","max","AddOrderModal","state","modal","msg","toggle","props","setState","console","log","componentDidMount","componentDidUpdate","prevProps","error","id","render","customers","length","products","categories","getCategory","filter","cat","parseInt","name","getProducts","cat_name","p","category","getPrice","price","user","paddingLeft","paddingRight","color","backgroundImage","backgroundSize","backgroundRepeat","total","values","by_user_id","_id","payment","newOrder","setTimeout","handleSubmit","handleChange","errors","map","customer","key","fname","lname","product","fontWeight","stock","propTypes","isRequired","func","mapStateToProps","item","items","auth"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport { Button,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\n\nimport back from '../../assets/images/back.jpg';\nimport {loadUser} from '../../action/authActions'\nimport {getItems} from '../../action/itemAction';\nimport {addOrder,getOrders} from '../../action/orderAction';\nimport {getCustomers} from '../../action/customerAction';\nimport {getCategories} from '../../action/categoryAction';\n\n\n\nconst schemaOrder = yup.object({\n    customer_id: yup.number().positive().integer().min(1,\"Choose Any Customer\"),\n    category_id: yup.number().positive().integer().min(1,\"Choose Any Category\"),\n    product_id: yup.string().min(9,\"Choose Any Product\"),\n    payment1: yup.number().positive().integer().min(1,\"Choose Any Payment Status\"),\n    quantity:yup.number().integer().min(1,\"Choose Atleast One Quantity\").max(100,'Max 100 Allowed/Order'),   \n    // total:yup.number().integer().min(1,\"Choose Any Product\")\n          \n})\n\n\n\nclass AddOrderModal extends Component{\n    state={\n       \n        modal:false,   // modal for adding item is false initially\n        msg:null,   \n    };\n\n    componentDidMount(){\n      this.props.getCustomers();\n      this.props.getCategories();\n      this.props.getItems();\n\n    }\n\n    componentDidUpdate(prevProps){\n\n        console.log(\"Add Order Called\");\n        const {error}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"UPDATE_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        // if(this.state.modal){\n            \n        //     if(isAuthenticated){\n        //         this.toggle();\n        //     }\n        // }\n    }\n    static propTypes={\n        error:PropTypes.object.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n   toggle=()=>{   \n        this.props.clearErrors();\n        this.setState({\n            modal:!this.state.modal\n        })\n        console.log(\"Toggle:\",this.state.modal);\n        \n    }\n    \n\nrender(){\n\n  \n  \n  var customers=this.props.customers.length===0?[]:this.props.customers;\n  var products=this.props.products.length===0?[]:this.props.products;\n  var categories=this.props.categories.length===0?[]:this.props.categories;\n  \nconst  getCategory=(id)=>{\n      return categories.filter(cat=>cat.id===parseInt(id))[0].name;\n  }\n  // console.log(\"Category:\",getCategory(\"1254\"));\nconst getProducts=(id,products)=>{\n  if(id===\"0\")\n  return [];\n  let cat_name=getCategory(id);\n  return products.filter(p=>p.category===cat_name)\n}\n\nconst getPrice=(id)=>{\n  if(id!=='0'){\n    return products.filter(p=>p.id===id)[0].price;\n  }\n  return 0;\n}\n\nconsole.log(\"User:\",this.props.user);\n    return(\n        <div>\n          {/* <Prompt\n              when={this.state.isBlocking}\n                message={(location, action) => {\n                  // if (action === 'POP') {\n                    console.log(\"Backing up...\",action,location)\n                  // }\n\n                  return location.pathname.startsWith(\"/\")\n                    ? true\n                    : `Are you sure you want to Leave ${location.pathname}?`\n            }}\n          /> */}\n             {/* <Prompt\n                when={this.props.isBlocked}\n                message={(location)=> `Are You Sure Want To Leave ${location}`}\n/>  */}\n            <NavLink href=\"#\" onClick={this.toggle} >\n               <Button  style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b>Add Order</b></Button>\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Add Order</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n   \n    <Formik\n      validationSchema={schemaOrder}\n      initialValues={{\n        customer_id:'0',\n        product_id:'0',\n        quantity:0,\n        total:0,\n        category_id:'0',\n        payment1:'0'\n\n      }}\n      onSubmit={(values)=>{ \n        \n        const {product_id,customer_id,quantity,payment1}=values;\n        let by_user_id=this.props.user?this.props.user._id:9;\n        let payment=parseInt(payment1)===1?\"Completed\":\"Pending\";\n        let total=quantity*getPrice(product_id)\n        console.log(product_id,customer_id,by_user_id,quantity,total,payment);\n        const newOrder={\n          product_id,customer_id,by_user_id,quantity,total,payment\n        }\n        this.props.addOrder(newOrder);\n        this.toggle();\n        setTimeout(()=>{\n          this.props.getOrders();\n        },1500)\n    }\n    }\n    >\n       \n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          <Form.Row>\n            <Form.Group as={Col} md=\"6\">\n           \n              <Form.Label>Customer</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                // type=\"password\"\n                placeholder=\"\"\n                name=\"customer_id\"\n                value={values.customer_id}\n                onChange={handleChange}\n                isInvalid={!!errors.customer_id}\n                \n              >\n                  <option value='0'>Choose Customer</option>\n\n                  {this.props.customers.map((customer,key)=>(\n                      <option value={customer.id}>{customer.fname+\" \"+customer.lname}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.customer_id}\n              </Form.Control.Feedback>\n\n\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\">\n             <Form.Label>Category</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                // type=\"password\"\n                placeholder=\"\"\n                name=\"category_id\"\n                value={values.category_id}\n                onChange={handleChange}\n                isInvalid={!!errors.category_id}\n                \n              >\n                  <option value=\"0\">Choose Category</option>\n\n                  {categories.map((category,key)=>(\n                      <option value={category.id}>{category.name}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.category_id}\n              </Form.Control.Feedback>\n            </Form.Group>\n           \n\n          </Form.Row>\n\n          <Form.Row>\n         <Form.Group as={Col} md=\"12\">\n             <Form.Label>Product Under Choosen Category</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                placeholder=\"\"\n                name=\"product_id\"\n                value={values.product_id}\n                onChange={handleChange}\n                isInvalid={!!errors.product_id}\n              >\n                  <option value=\"0\">Choose Product</option>\n                  {getProducts(values.category_id,products).map((product,key)=>(\n                      <option style={{fontWeight:'bold'}} value={product.id}> #{key+1} | {product.name} | Price: ₹{product.price} | Stock: {product.stock}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.product_id}\n              </Form.Control.Feedback>\n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n         <Form.Group as={Col} md=\"6\">\n             <Form.Label>Quantity</Form.Label>\n              \n              <Form.Control\n                type=\"number\"\n                placeholder=\"Quantity\"\n                name=\"quantity\"\n                value={values.quantity}\n                onChange={handleChange}\n                isInvalid={!!errors.quantity}\n              >\n                  \n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.quantity}\n              </Form.Control.Feedback>\n            </Form.Group>\n         <Form.Group as={Col} md=\"6\">\n             <Form.Label>Total</Form.Label>\n              \n              <Form.Control\n              disabled\n                type=\"number\"\n                placeholder=\"total\"\n                name=\"total\"\n                value={values.quantity===0?values.total:values.quantity*parseInt(getPrice(values.product_id))}\n                onChange={handleChange}\n               \n              >\n            \n        \n              </Form.Control>\n      \n              \n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\">\n             <Form.Label>Payment</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                placeholder=\"\"\n                name=\"payment1\"\n                value={values.payment1}\n                onChange={handleChange}\n                isInvalid={!!errors.payment1}\n              >\n                  <option value=\"0\">Choose Product</option>\n                  <option value=\"1\">Completed</option>\n                  <option value=\"2\">Pending</option>\n\n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.payment1}\n              </Form.Control.Feedback>\n            </Form.Group>\n            </Form.Row>\n          <Button type=\"submit\">Add Order</Button>\n          \n                        </Form>\n                        \n                    )}\n                    </Formik>\n                </Modal.Body>          \n\n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        customers:state.customer.customers,\n        products:state.item.items,\n        categories:state.category.categories,\n        user:state.auth.user,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loadUser,clearErrors,addOrder,getOrders,getCategories,getCustomers,getItems})(AddOrderModal);"]},"metadata":{},"sourceType":"module"}