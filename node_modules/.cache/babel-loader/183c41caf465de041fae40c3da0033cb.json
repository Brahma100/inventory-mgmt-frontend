{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spicy\\\\Downloads\\\\Inventory-management-17\\\\client\\\\src\\\\components\\\\ProductsList\\\\UpdateProductModal.js\";\nimport React, { Component } from 'react';\nimport { Alert, NavLink, Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { loadUser, loginModalOpen } from '../../action/authActions';\nimport back from '../../assets/images/back.jpg';\nimport { clearErrors } from '../../action/errorActions'; // import e from 'express';\n\nimport { getItems, updateItem } from '../../action/itemAction';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UpdateProductModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      // modal for adding item is false initially\n      name: '',\n      description: '',\n      manufacturer: '',\n      stock: 0,\n      price: 0,\n      rating: 0,\n      msg: null,\n      isUpdate: false\n    };\n\n    this.toggle = () => {\n      // clear the error\n      this.props.clearErrors(); // to toggle the modal \n\n      console.log(\"Props\", this.props);\n\n      if (!this.props.isAuthenticated) {\n        console.log(\"Authen\");\n        this.props.history.push('/');\n        this.props.loginModalOpen(true);\n      } // console.log(\"from Toggle-> Modal Open:: \"+this.state.modal)\n      else this.setState({\n          modal: !this.state.modal\n        });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      const {\n        error,\n        isUpdate\n      } = this.props;\n      console.log(\"From Submit-> isUpdate:: \" + this.props.isUpdate);\n      e.preventDefault();\n      const id = this.props.product.id;\n      var user = this.props.user;\n      console.log(\"User Id Given for Update: :\", user);\n      const {\n        name,\n        description,\n        manufacturer,\n        stock,\n        price\n      } = this.state;\n      let {\n        rating\n      } = this.state;\n      if (rating === undefined) rating = 4.5;\n      console.log(\"Data to Update:\", rating);\n      const editProduct = {\n        id,\n        name,\n        description,\n        manufacturer,\n        price,\n        stock,\n        rating,\n        user\n      };\n      this.props.updateItem(editProduct);\n      this.toggle(); // this.props.getItems();\n      // this.props.addItem(newItem);\n    };\n  }\n\n  componentDidMount() {\n    // this.props.loadUser();\n    const {\n      name,\n      description,\n      manufacturer,\n      price,\n      stock,\n      rating\n    } = this.props.product;\n    this.setState({\n      name: name,\n      description: description,\n      manufacturer: manufacturer,\n      price: price,\n      stock: stock,\n      rating: rating\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isUpdate\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      if (error.id === \"UPDATE_FAIL\") {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if Update close Modal\n\n\n    if (this.state.modal) {\n      if (isUpdate) {\n        this.toggle();\n        this.props.loadUser();\n      }\n    }\n  }\n\n  render() {\n    const {\n      name,\n      description,\n      manufacturer,\n      price,\n      stock,\n      rating\n    } = this.props.product;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(OverlayTrigger, {\n        placement: \"bottom\",\n        overlay: /*#__PURE__*/_jsxDEV(Tooltip, {\n          id: \"button-tooltip-2\",\n          children: \"Edit Product\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 30\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.toggle,\n          variant: \"primary\",\n          size: \"sm\",\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faEdit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: this.state.modal,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: this.toggle,\n          style: {\n            color: 'white',\n            backgroundImage: `url(\"${back}\")`,\n            backgroundSize: '32rem',\n            backgroundRepeat: 'no-repeat'\n          },\n          closeButton: true,\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: [this.state.msg ? /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"danger\",\n            children: this.state.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this) : null, /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: this.onSubmit,\n            children: /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                for: \"name\",\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"name\",\n                id: \"name\",\n                placeholder: name,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"description\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"description\",\n                id: \"description\",\n                placeholder: description,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"manufacturer\",\n                children: \"Manufacturer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"manufacturer\",\n                id: \"manufacturer\",\n                placeholder: manufacturer,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"price\",\n                children: \"Price\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"price\",\n                id: \"price\",\n                placeholder: price,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"stock\",\n                children: \"Stock\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"stock\",\n                id: \"stock\",\n                placeholder: stock,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Label, {\n                for: \"rating\",\n                children: \"Rating\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"rating\",\n                id: \"rating\",\n                placeholder: rating,\n                onChange: this.onChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                style: {\n                  marginTop: '2rem'\n                },\n                block: true,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nUpdateProductModal.propTypes = {\n  isUpdate: PropTypes.bool,\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    isUpdate: state.auth.isUpdate,\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  loadUser,\n  loginModalOpen,\n  getItems,\n  updateItem,\n  clearErrors\n})(withRouter(UpdateProductModal));","map":{"version":3,"sources":["C:/Users/spicy/Downloads/Inventory-management-17/client/src/components/ProductsList/UpdateProductModal.js"],"names":["React","Component","Alert","NavLink","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","Collapse","FontAwesomeIcon","faEdit","connect","withRouter","PropTypes","loadUser","loginModalOpen","back","clearErrors","getItems","updateItem","OverlayTrigger","Tooltip","UpdateProductModal","state","modal","name","description","manufacturer","stock","price","rating","msg","isUpdate","toggle","props","console","log","isAuthenticated","history","push","setState","onChange","e","target","value","onSubmit","error","preventDefault","id","product","user","undefined","editProduct","componentDidMount","componentDidUpdate","prevProps","render","color","backgroundImage","backgroundSize","backgroundRepeat","marginTop","propTypes","bool","object","isRequired","register","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport { Alert,NavLink, Button, Modal, ModalHeader, ModalBody,Form,FormGroup,Label, Input, Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport {loadUser,loginModalOpen} from '../../action/authActions';\nimport back from '../../assets/images/back.jpg';\nimport {clearErrors}  from '../../action/errorActions';\n\n// import e from 'express';\nimport { getItems,updateItem } from '../../action/itemAction';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nclass UpdateProductModal extends Component{\n    \n    state={\n        modal:false,   // modal for adding item is false initially\n        name:'',\n        description:'',\n        manufacturer:'',\n        stock:0,\n        price:0,\n        rating:0,\n        msg:null,\n        isUpdate:false\n    };\n    componentDidMount(){\n        // this.props.loadUser();\n        const {name,description,manufacturer,price,stock,rating}=this.props.product;\n        this.setState({name:name,description:description,manufacturer:manufacturer,price:price,stock:stock,rating:rating});\n    }\n    componentDidUpdate(prevProps){\n        const {error,isUpdate}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"UPDATE_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if Update close Modal\n        if(this.state.modal){\n            \n            if(isUpdate){\n                this.toggle();\n                this.props.loadUser();\n            }\n        }\n        \n    }\n    static propTypes={\n        isUpdate:PropTypes.bool,\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        register:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(\"Props\",this.props);\n        if(!this.props.isAuthenticated){\n            console.log(\"Authen\");\n            this.props.history.push('/')\n            this.props.loginModalOpen(true);\n           \n        }\n        // console.log(\"from Toggle-> Modal Open:: \"+this.state.modal)\n        else\n            this.setState({\n                modal:!this.state.modal\n            })\n    }\n\n\n    onChange=(e)=>{\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    // On Submit  method \n    onSubmit=e=>{\n        const {error,isUpdate}=this.props;\n        console.log(\"From Submit-> isUpdate:: \"+this.props.isUpdate)\n        e.preventDefault();\n        const id=this.props.product.id;\n        var user=this.props.user;\n        console.log(\"User Id Given for Update: :\",user)\n        const {name,description,manufacturer,stock,price}=this.state;\n        let {rating}=this.state;\n        if(rating===undefined)\n        rating=4.5\n        console.log(\"Data to Update:\",rating);\n        const editProduct={\n            id,name,description,manufacturer,price,stock,rating,user\n        }\n        this.props.updateItem(editProduct);\n        \n        this.toggle();\n        // this.props.getItems();\n        // this.props.addItem(newItem);\n   \n        \n    }\n\nrender(){\n    const {name,description,manufacturer,price,stock,rating}=this.props.product;\n    return(\n        <>\n            <OverlayTrigger        \n                        placement=\"bottom\"\n                    overlay={<Tooltip id=\"button-tooltip-2\">Edit Product</Tooltip>}>\n           \n            <Button onClick={this.toggle} variant=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon={faEdit}/>\n            </Button>\n            </OverlayTrigger>\n            <Modal isOpen={this.state.modal}  >\n                <ModalHeader toggle={this.toggle} style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton>Update</ModalHeader>\n                <ModalBody>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n                    <Form onSubmit={this.onSubmit}>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                placeholder={name}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"description\">Description</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"description\"\n                                id=\"description\"\n                                placeholder={description}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"manufacturer\">Manufacturer</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"manufacturer\"\n                                id=\"manufacturer\"\n                                placeholder={manufacturer}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"price\">Price</Label>\n                            <Input \n                                 type=\"text\"\n                                name=\"price\"\n                                id=\"price\"\n                                placeholder={price}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"stock\">Stock</Label>\n                            <Input \n                                 type=\"text\"\n                                name=\"stock\"\n                                id=\"stock\"\n                                placeholder={stock}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"rating\">Rating</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"rating\"\n                                id=\"rating\"\n                                placeholder={rating}\n                                onChange={this.onChange}\n                            />\n                            <Button  style={{marginTop:'2rem'}} block>\n\n                            Update</Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n\n            </Modal>\n        </>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isUpdate:state.auth.isUpdate,\n\n        isAuthenticated:state.auth.isAuthenticated,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loadUser,loginModalOpen,getItems,updateItem,clearErrors})(withRouter(UpdateProductModal));"]},"metadata":{},"sourceType":"module"}