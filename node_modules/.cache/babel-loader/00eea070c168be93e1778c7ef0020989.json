{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\spicy\\\\Downloads\\\\Inventory-management-17\\\\client\\\\src\\\\components\\\\auth\\\\LoginModal.js\";\nimport React, { Component } from 'react';\nimport { Col, Alert, NavLink, Button, Modal, Form, FormGroup, Label, Input, InputGroup } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../action/authActions';\nimport { clearErrors } from '../../action/errorActions';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg'; // import e from 'express';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object({\n  email: yup.string().required(),\n  password: yup.string().required()\n});\n\nclass LoginModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      // modal for adding item is false initially\n      msg: null\n    };\n\n    this.toggle = () => {\n      // clear the error\n      this.props.clearErrors(); // to toggle the modal \n\n      console.log(this.state.modal);\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      if (error.id === \"LOGIN_FAIL\") {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if authenticated close Modal\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(NavLink, {\n        onClick: this.toggle,\n        href: \"#\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: this.state.modal,\n        onHide: this.toggle,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          style: {\n            color: 'white',\n            backgroundImage: `url(\"${back}\")`,\n            backgroundSize: '32rem',\n            backgroundRepeat: 'no-repeat'\n          },\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 156\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [this.state.msg ? /*#__PURE__*/_jsxDEV(Alert, {\n            color: \"danger\",\n            children: this.state.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this) : null, /*#__PURE__*/_jsxDEV(Formik, {\n            validationSchema: schema,\n            initialValues: {\n              email: '',\n              password: ''\n            },\n            onSubmit: values => {\n              console.log(\"onSUbmit\");\n              const {\n                email,\n                password\n              } = values;\n              console.log(\"On Submit Called\", email);\n              const user = {\n                email,\n                password\n              };\n              this.props.login(user);\n            },\n            children: ({\n              handleSubmit,\n              handleChange,\n              values,\n              errors\n            }) => /*#__PURE__*/_jsxDEV(Form, {\n              noValidate: true,\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Form.Row, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"12\",\n                  controlId: \"validationFormikemail\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Email ID\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n                    children: [/*#__PURE__*/_jsxDEV(InputGroup.Prepend, {\n                      children: /*#__PURE__*/_jsxDEV(InputGroup.Text, {\n                        id: \"inputGroupPrepend\",\n                        children: \"@\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 106,\n                        columnNumber: 19\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 105,\n                      columnNumber: 17\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                      type: \"text\",\n                      placeholder: \"Email ID\",\n                      \"aria-describedby\": \"inputGroupPrepend\",\n                      name: \"email\",\n                      value: values.email,\n                      onChange: handleChange,\n                      isInvalid: !!errors.email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 108,\n                      columnNumber: 17\n                    }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                      type: \"invalid\",\n                      children: errors.email\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 17\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 11\n                }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n                  as: Col,\n                  md: \"12\",\n                  controlId: \"validationFormikPassword\",\n                  children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                    children: \"Password\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 123,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                    type: \"password\",\n                    placeholder: \"Password\",\n                    name: \"password\",\n                    value: values.password,\n                    onChange: handleChange,\n                    isInvalid: !!errors.password\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 124,\n                    columnNumber: 15\n                  }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                    type: \"invalid\",\n                    children: errors.password\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 132,\n                    columnNumber: 15\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 13\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 11\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 11\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 5\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["C:/Users/spicy/Downloads/Inventory-management-17/client/src/components/auth/LoginModal.js"],"names":["React","Component","Col","Alert","NavLink","Button","Modal","Form","FormGroup","Label","Input","InputGroup","connect","PropTypes","login","clearErrors","Formik","yup","back","schema","object","email","string","required","password","LoginModal","state","modal","msg","toggle","props","console","log","setState","componentDidUpdate","prevProps","error","isAuthenticated","id","render","color","backgroundImage","backgroundSize","backgroundRepeat","values","user","handleSubmit","handleChange","errors","propTypes","bool","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport {Col, Alert,NavLink, Button, Modal,Form,FormGroup,Label, Input, InputGroup} from 'react-bootstrap';\n\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {login} from '../../action/authActions';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\n\n// import e from 'express';\nconst schema = yup.object({\n    email: yup.string().required(),\n    password: yup.string().required(),\n})\n\nclass LoginModal extends Component{\n    state={\n        modal:false,   // modal for adding item is false initially\n        msg:null\n    };\n    componentDidUpdate(prevProps){\n        const {error,isAuthenticated}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"LOGIN_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        if(this.state.modal){\n            \n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n    static propTypes={\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        login:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(this.state.modal)\n        this.setState({\n            modal:!this.state.modal\n        })\n    }\nrender(){\n    return(\n        <div>\n            <NavLink onClick={this.toggle} href=\"#\">\n                Login\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n\n\n\n\n\n    <Formik\n      validationSchema={schema}\n     \n\n      initialValues={{\n        email:'',\n        password:'',\n\n      }}\n      onSubmit={(values)=>{ console.log(\"onSUbmit\");\n      const {email,password}=values;\n      console.log(\"On Submit Called\",email);\n      const user={\n          email,password\n      }\n      this.props.login(user);\n    }\n    }\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          \n          <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormikemail\">\n              <Form.Label>Email ID</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Email ID\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  isInvalid={!!errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                isInvalid={!!errors.password}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n          {/* <Form.Group>\n            <Form.Check\n              required\n              name=\"terms\"\n              label=\"Agree to terms and conditions\"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id=\"validationFormik0\"\n            />\n          </Form.Group> */}\n          <Button type=\"submit\">Login</Button>\n        </Form>\n      )}\n    </Formik>\n                </Modal.Body>\n\n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isAuthenticated:state.auth.isAuthenticated,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{login,clearErrors})(LoginModal);"]},"metadata":{},"sourceType":"module"}