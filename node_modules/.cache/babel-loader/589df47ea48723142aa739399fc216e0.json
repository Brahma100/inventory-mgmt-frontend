{"ast":null,"code":"import { UPDATE_CUSTOMER, GET_CUSTOMER, ADD_CUSTOMER, DELETE_CUSTOMER, CUSTOMERS_LOAD } from '../action/types';\nconst initialState = {\n  customers: [],\n  customersLoading: false,\n  customersLoaded: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_CUSTOMER:\n      return { ...state,\n        customers: action.payload,\n        customersLoading: false,\n        customersLoaded: true\n      };\n\n    case DELETE_CUSTOMER:\n      return { ...state,\n        customers: state.customers.filter(customer => customer.id !== action.payload)\n      };\n    //    case DELETE_SELECTED_ITEM:\n    //        console.log(\"Action Payload:\",action.payload);\n    //     return{\n    //             ...state,\n    //             customers:state.customers.filter(order=> \n    //                 {\n    //                     // console.log(\"Action::\",action.payload);\n    //                     for(var id in action.payload)\n    //                     if(order.id!==id)\n    //                         return false;\n    //                     return true;\n    //                 }\n    //          )\n    //    };\n\n    case ADD_CUSTOMER:\n      return { ...state,\n        customers: [...state.customers, action.payload]\n      };\n\n    case CUSTOMERS_LOAD:\n      return { ...state,\n        customersLoading: true,\n        customersLoaded: false\n      };\n\n    case UPDATE_CUSTOMER:\n      return { ...state,\n        customers: state.customers.map(order => {\n          if (order.id === action.payload.id) {\n            const updatedItem = { ...order,\n              name: action.payload.name,\n              description: action.payload.description,\n              manufacturer: action.payload.manufacturer,\n              price: action.payload.price,\n              stock: action.payload.stock,\n              rating: action.payload.rating,\n              editUser: order.editUser.push(action.payload.user)\n            };\n            return updatedItem;\n          }\n\n          return order;\n        }),\n        customersLoading: false,\n        customersLoaded: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/spicy/Downloads/Inventory-management-17/client/src/reducer/customerReducer.js"],"names":["UPDATE_CUSTOMER","GET_CUSTOMER","ADD_CUSTOMER","DELETE_CUSTOMER","CUSTOMERS_LOAD","initialState","customers","customersLoading","customersLoaded","state","action","type","payload","filter","customer","id","map","order","updatedItem","name","description","manufacturer","price","stock","rating","editUser","push","user"],"mappings":"AACA,SAASA,eAAT,EAAyBC,YAAzB,EAAsCC,YAAtC,EAAmDC,eAAnD,EAAoEC,cAApE,QAAyF,iBAAzF;AAEA,MAAMC,YAAY,GAAC;AACfC,EAAAA,SAAS,EAAC,EADK;AAEfC,EAAAA,gBAAgB,EAAC,KAFF;AAGfC,EAAAA,eAAe,EAAC;AAHD,CAAnB;AAMA,eAAe,UAASC,KAAK,GAACJ,YAAf,EAA4BK,MAA5B,EAAmC;AAE9C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKV,YAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFH,QAAAA,SAAS,EAACI,MAAM,CAACE,OAFf;AAGFL,QAAAA,gBAAgB,EAAC,KAHf;AAIFC,QAAAA,eAAe,EAAC;AAJd,OAAN;;AAMD,SAAKL,eAAL;AACC,aAAM,EACF,GAAGM,KADD;AAEFH,QAAAA,SAAS,EAACG,KAAK,CAACH,SAAN,CAAgBO,MAAhB,CAAuBC,QAAQ,IAAGA,QAAQ,CAACC,EAAT,KAAcL,MAAM,CAACE,OAAvD;AAFR,OAAN;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACG,SAAKV,YAAL;AACC,aAAM,EACF,GAAGO,KADD;AAEFH,QAAAA,SAAS,EAAC,CAAC,GAAGG,KAAK,CAACH,SAAV,EAAoBI,MAAM,CAACE,OAA3B;AAFR,OAAN;;AAKJ,SAAKR,cAAL;AACI,aAAM,EACF,GAAGK,KADD;AAEFF,QAAAA,gBAAgB,EAAC,IAFf;AAGFC,QAAAA,eAAe,EAAC;AAHd,OAAN;;AAKA,SAAKR,eAAL;AACA,aAAM,EACF,GAAGS,KADD;AAEHH,QAAAA,SAAS,EAACG,KAAK,CAACH,SAAN,CAAgBU,GAAhB,CAAqBC,KAAD,IAAS;AACnC,cAAGA,KAAK,CAACF,EAAN,KAAWL,MAAM,CAACE,OAAP,CAAeG,EAA7B,EAAgC;AAC5B,kBAAMG,WAAW,GAAC,EACd,GAAGD,KADW;AAEdE,cAAAA,IAAI,EAACT,MAAM,CAACE,OAAP,CAAeO,IAFN;AAGdC,cAAAA,WAAW,EAACV,MAAM,CAACE,OAAP,CAAeQ,WAHb;AAIdC,cAAAA,YAAY,EAACX,MAAM,CAACE,OAAP,CAAeS,YAJd;AAKdC,cAAAA,KAAK,EAACZ,MAAM,CAACE,OAAP,CAAeU,KALP;AAMdC,cAAAA,KAAK,EAACb,MAAM,CAACE,OAAP,CAAeW,KANP;AAOdC,cAAAA,MAAM,EAACd,MAAM,CAACE,OAAP,CAAeY,MAPR;AAQdC,cAAAA,QAAQ,EAACR,KAAK,CAACQ,QAAN,CAAeC,IAAf,CAAoBhB,MAAM,CAACE,OAAP,CAAee,IAAnC;AARK,aAAlB;AAUA,mBAAOT,WAAP;AACH;;AACD,iBAAOD,KAAP;AACH,SAfS,CAFP;AAkBHV,QAAAA,gBAAgB,EAAC,KAlBd;AAmBFC,QAAAA,eAAe,EAAC;AAnBd,OAAN;;AAuBJ;AACI,aAAOC,KAAP;AAlER;AAoEH","sourcesContent":["\nimport  {UPDATE_CUSTOMER,GET_CUSTOMER,ADD_CUSTOMER,DELETE_CUSTOMER, CUSTOMERS_LOAD} from '../action/types';\n\nconst initialState={\n    customers:[],\n    customersLoading:false,\n    customersLoaded:false\n}\n\nexport default function(state=initialState,action){\n   \n    switch(action.type){\n        case GET_CUSTOMER:\n            return{\n                ...state,\n                customers:action.payload,\n                customersLoading:false,\n                customersLoaded:true\n           };\n           case DELETE_CUSTOMER:\n            return{\n                ...state,\n                customers:state.customers.filter(customer=> customer.id!==action.payload)\n\n           };\n        //    case DELETE_SELECTED_ITEM:\n        //        console.log(\"Action Payload:\",action.payload);\n        //     return{\n        //             ...state,\n        //             customers:state.customers.filter(order=> \n        //                 {\n        //                     // console.log(\"Action::\",action.payload);\n        //                     for(var id in action.payload)\n        //                     if(order.id!==id)\n        //                         return false;\n        //                     return true;\n        //                 }\n        //          )\n\n        //    };\n           case ADD_CUSTOMER:\n            return{\n                ...state,\n                customers:[...state.customers,action.payload]\n\n           };\n        case CUSTOMERS_LOAD:\n            return{\n                ...state,\n                customersLoading:true,\n                customersLoaded:false\n            };\n            case UPDATE_CUSTOMER:\n            return{\n                ...state,\n               customers:state.customers.map((order)=>{\n                   if(order.id===action.payload.id){\n                       const updatedItem={\n                           ...order,\n                           name:action.payload.name,\n                           description:action.payload.description,\n                           manufacturer:action.payload.manufacturer,\n                           price:action.payload.price,\n                           stock:action.payload.stock,\n                           rating:action.payload.rating,\n                           editUser:order.editUser.push(action.payload.user),\n                       }\n                       return updatedItem;\n                   }\n                   return order;\n               }),\n               customersLoading:false,\n                customersLoaded:true\n               \n\n            }; \n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}