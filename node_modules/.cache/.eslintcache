[{"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\index.js":"1","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\MainApp.js":"2","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\App.js":"3","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\store.js":"4","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\authActions.js":"5","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\Home.js":"6","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Products\\Products.js":"7","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterPage.js":"8","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\About\\About.js":"9","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\LazyLoadingPage\\Loading.js":"10","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\routes.js":"11","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\index.js":"12","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\categoryAction.js":"13","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\errorActions.js":"14","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\types.js":"15","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\Home1.js":"16","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\ApexChart.js":"17","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\itemAction.js":"18","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Navbars\\AdminNavbar.js":"19","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AppNavbar\\AppNavbar.js":"20","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\UpdateProductModal.js":"21","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Sidebar\\Sidebar.jsx":"22","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Footer\\Footer.jsx":"23","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\itemReducer.js":"24","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\authReducer.js":"25","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\categoryReducer.js":"26","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\orderReducer.js":"27","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\errorReducer.js":"28","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\customerReducer.js":"29","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\AddProduct.js":"30","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\UpdateProduct.js":"31","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductListPage.js":"32","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\Product.js":"33","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\views\\Dashboard.js":"34","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\views\\UserProfile.js":"35","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Customers\\CustomerList.js":"36","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\OrderList.js":"37","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\TrendingProductList.js":"38","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\LoginModal.js":"39","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\Logout.js":"40","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterModal.js":"41","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterModal1.js":"42","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Navbars\\AdminNavbarLinks.js":"43","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Variables\\Variables.js":"44","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\CustomButton\\CustomButton.jsx":"45","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\UserCard\\UserCard.jsx":"46","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductList.js":"47","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\StatsCard\\StatsCard.js":"48","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Card\\Card.js":"49","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\orderAction.js":"50","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Customers\\AddCustomerModal.js":"51","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\customerAction.js":"52","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\EditOrderModal.js":"53","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\AddOrderModal.js":"54","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AnimatedCard\\AnimatedCard.js":"55","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductListData.js":"56","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AnimatedCard\\AnimatedProgressProvider.js":"57"},{"size":245,"mtime":1612483480000,"results":"58","hashOfConfig":"59"},{"size":2062,"mtime":1612945511857,"results":"60","hashOfConfig":"59"},{"size":3513,"mtime":1637147555053,"results":"61","hashOfConfig":"59"},{"size":399,"mtime":1612483480000,"results":"62","hashOfConfig":"59"},{"size":3709,"mtime":1612483480000,"results":"63","hashOfConfig":"59"},{"size":4541,"mtime":1637147679795,"results":"64","hashOfConfig":"59"},{"size":22487,"mtime":1637147771463,"results":"65","hashOfConfig":"59"},{"size":29675,"mtime":1637147723112,"results":"66","hashOfConfig":"59"},{"size":5742,"mtime":1637147652183,"results":"67","hashOfConfig":"59"},{"size":421,"mtime":1612534688000,"results":"68","hashOfConfig":"59"},{"size":2297,"mtime":1612944920766,"results":"69","hashOfConfig":"59"},{"size":493,"mtime":1612483480000,"results":"70","hashOfConfig":"59"},{"size":661,"mtime":1612483480000,"results":"71","hashOfConfig":"59"},{"size":287,"mtime":1612483480000,"results":"72","hashOfConfig":"59"},{"size":1611,"mtime":1612483480000,"results":"73","hashOfConfig":"59"},{"size":2363,"mtime":1612483480000,"results":"74","hashOfConfig":"59"},{"size":1530,"mtime":1612483480000,"results":"75","hashOfConfig":"59"},{"size":2868,"mtime":1612871279692,"results":"76","hashOfConfig":"59"},{"size":5954,"mtime":1637149236881,"results":"77","hashOfConfig":"59"},{"size":6215,"mtime":1637149160077,"results":"78","hashOfConfig":"59"},{"size":7170,"mtime":1612483480000,"results":"79","hashOfConfig":"59"},{"size":2289,"mtime":1612483480000,"results":"80","hashOfConfig":"59"},{"size":1200,"mtime":1612585573542,"results":"81","hashOfConfig":"59"},{"size":2486,"mtime":1612483480000,"results":"82","hashOfConfig":"59"},{"size":2601,"mtime":1612483480000,"results":"83","hashOfConfig":"59"},{"size":693,"mtime":1612483480000,"results":"84","hashOfConfig":"59"},{"size":2310,"mtime":1612483480000,"results":"85","hashOfConfig":"59"},{"size":576,"mtime":1612483480000,"results":"86","hashOfConfig":"59"},{"size":2602,"mtime":1612483480000,"results":"87","hashOfConfig":"59"},{"size":15938,"mtime":1612966644646,"results":"88","hashOfConfig":"59"},{"size":14474,"mtime":1617188780047,"results":"89","hashOfConfig":"59"},{"size":1508,"mtime":1612483480000,"results":"90","hashOfConfig":"59"},{"size":6379,"mtime":1612581580290,"results":"91","hashOfConfig":"59"},{"size":7444,"mtime":1619529986014,"results":"92","hashOfConfig":"59"},{"size":14321,"mtime":1612880700738,"results":"93","hashOfConfig":"59"},{"size":3883,"mtime":1637148862043,"results":"94","hashOfConfig":"59"},{"size":15612,"mtime":1612483480000,"results":"95","hashOfConfig":"59"},{"size":5783,"mtime":1612878103960,"results":"96","hashOfConfig":"59"},{"size":4783,"mtime":1612483480000,"results":"97","hashOfConfig":"59"},{"size":969,"mtime":1612961574323,"results":"98","hashOfConfig":"59"},{"size":13838,"mtime":1612483480000,"results":"99","hashOfConfig":"59"},{"size":20995,"mtime":1612483480000,"results":"100","hashOfConfig":"59"},{"size":867,"mtime":1612483480000,"results":"101","hashOfConfig":"59"},{"size":10972,"mtime":1612483480000,"results":"102","hashOfConfig":"59"},{"size":1346,"mtime":1612483480000,"results":"103","hashOfConfig":"59"},{"size":2001,"mtime":1612483480000,"results":"104","hashOfConfig":"59"},{"size":2169,"mtime":1637148117159,"results":"105","hashOfConfig":"59"},{"size":932,"mtime":1612483480000,"results":"106","hashOfConfig":"59"},{"size":1276,"mtime":1612483480000,"results":"107","hashOfConfig":"59"},{"size":1923,"mtime":1612483480000,"results":"108","hashOfConfig":"59"},{"size":8317,"mtime":1612483480000,"results":"109","hashOfConfig":"59"},{"size":2468,"mtime":1612483480000,"results":"110","hashOfConfig":"59"},{"size":8774,"mtime":1612483480000,"results":"111","hashOfConfig":"59"},{"size":10606,"mtime":1612483480000,"results":"112","hashOfConfig":"59"},{"size":12772,"mtime":1612483480000,"results":"113","hashOfConfig":"59"},{"size":21546,"mtime":1612865951869,"results":"114","hashOfConfig":"59"},{"size":1161,"mtime":1612483480000,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1amkpwl",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"118"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"118"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"118"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"118"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"118"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"118"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"118"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"118"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"118"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\index.js",[],["264","265"],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\MainApp.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\App.js",["266","267"],"import React, { Component, Suspense } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport store from './store';\nimport { Container } from 'reactstrap';\nimport { loadUser, loginModalOpen } from \"./action/authActions\";\nimport Sidebar from './components/Sidebar/Sidebar';\nimport Footer from './components/Footer/Footer';\nimport AdminNavbar from './components/Navbars/AdminNavbar';\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport routes from \"./routes.js\";\nimport { getCategories } from './action/categoryAction';\nimport { Card } from 'react-bootstrap';\nimport Loading from './components/LazyLoadingPage/Loading'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: \"black\",\n      fixedClasses: \"dropdown show-dropdown open\",\n      isModalOpen: false,\n      startRender: false,\n    };\n  }\n  getRoutes = routes => {\n    return routes.map((prop, key) => {\n      if (prop.layout === \"/admin\") {\n        return (\n          <Route\n            exact\n            path={prop.layout + prop.path}\n            render={props => (\n              <prop.component\n                {...props}\n                handleClick={this.handleNotificationClick}\n              />\n            )}\n            key={key}\n          />\n        );\n      } else {\n        return null;\n      }\n    });\n  };\n  getBrandText = path => {\n    for (let i = 0; i < routes.length; i++) {\n      if (\n        this.props.location.pathname.indexOf(\n          routes[i].layout + routes[i].path\n        ) !== -1\n      ) {\n        return routes[i].name;\n      }\n    }\n    return \"Brand\";\n  };\n\n\n  componentDidMount(e) {\n\n    store.dispatch(loadUser());\n    store.dispatch(getCategories());\n    console.log(\"Action:\", this.props.history);\n    if (this.props.history.action === 'POP') {\n      setTimeout(() => {\n        console.log(\"timeout\");\n        if (!this.props.isAuthenticated) {\n          this.props.history.push('/login')\n          // this.props.loginModalOpen(true);\n        }\n      }, 150)\n    }\n    else\n      if (!this.props.isAuthenticated) {\n        console.log(\"Direct\");\n        this.props.history.push('/login')\n        // this.props.loginModalOpen(true);\n      }\n    setTimeout(() => {\n      this.setState({ startRender: true })\n    }, 160)\n\n  }\n  componentDidUpdate(e) {\n\n    store.dispatch(loadUser());\n    if (!this.props.isAuthenticated) {\n      console.log(\"update Component\");\n      this.props.history.push('/login')\n      // this.props.loginModalOpen(true);\n    }\n  }\n\n  render() {\n    return (\n      <>\n        {!this.state.startRender ? <Loading /> :\n          <div className=\"wrapper\">\n            <Sidebar {...this.props} routes={routes}\n              color={this.state.color}\n            />\n            <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n              <AdminNavbar\n                {...this.props} routes={this.getRoutes(routes)}\n                brandText={this.getBrandText(this.props.location.pathname)}\n              />\n\n\n              {this.getRoutes(routes)}\n\n              <Container>\n\n              </Container>\n              <Card style={{ margin: '0rem', padding: '0rem' }}>\n                <Footer />\n              </Card>\n            </div>\n\n          </div>}</>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return ({\n    isAuthenticated: state.auth.isAuthenticated,\n  })\n}\n\nexport default connect(mapStateToProps, { loginModalOpen })(withRouter(App));\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\store.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\authActions.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\Home.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Products\\Products.js",["268","269","270","271","272","273"],"import React, { Component } from 'react';\nimport { OverlayTrigger,Tooltip,Accordion,DropdownButton, Spinner, Row, Container, Col, Card, Button, Form, Pagination, } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport './Products.css'\nimport default_product from '../../assets/images/default-pro.jpg'\nimport {NavLink, Prompt, withRouter} from 'react-router-dom';\nimport UpdateProductModal from '../ProductsList/UpdateProductModal'\n// import E2 from './auth/E2';\n// import EditModal from './auth/EditModal'\nimport {getCategories} from '../../action/categoryAction';\nimport { getItems,deleteItem } from \"../../action/itemAction\";\nimport {loginModalOpen,loadUser} from '../../action/authActions'\nimport AppNavbar from \"../AppNavbar/AppNavbar\";\nimport back from '../../assets/images/back.jpg'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar, faTrashAlt, faUser ,faShoppingBag,faCalendarAlt,faSearch,faFilter,  faChevronCircleDown, faChevronCircleRight, faArrowAltCircleUp, faArrowAltCircleDown, faEdit} from '@fortawesome/free-solid-svg-icons';\nimport Footer from '../Footer/Footer';\n// import { , faFilter, faSearch, , } from '@fortawesome/free-solid-svg-icons';\n// import Pagination from './Pagination';\n// import { PropTypes } from 'prop-types';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faTimes,faEdit } from '@fortawesome/free-solid-svg-icons';\n// import ProductList from './ProductsList/ProductList';\n\n\nconst styles = {\n  mediaItem: {\n    border: \"1px solid gray\",\n    backgroundColor: \"#f5f5f5\",\n\n  },\n  mediaItemButtons: {\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\"\n  }\n};\n\nclass Products extends Component {\n  state = {\n    products: this.props.products,\n    pageOfItems: [],\n    Index1:0,\n    Index2:8,\n    isManufacturer:true,\n    isRating:true,\n    isPrice:true,\n    isStock:true,\n    open1:false,\n    open2:false,\n    open3:false,\n    open4:false,\n    open10:false,\n    chkBox:false,\n    q:\"\",\n    minRange:0,\n    maxRange:1000000,\n    isAscending:false,\n    isDecending:false,\n    categoryValue:0,\n    currentPage: 1,\n    productsPerPage: 6\n  };\n\n\n  handleClick=(event)=> {\nconsole.log(\"Id:\",event.target.id);\n    this.setState({\n      currentPage: Number(event.target.id)\n    });\n  }\n\n// componentWillUnmount(){\n//   console.log(\"Blocked:\",this.props.isBlocked);\n//     console.log(\"History:\",this.props.history);\n//     if(this.props.isBlocked){\n//           let authenticate = window.confirm(\"Are You Sure Want To Go \",this.props.history.location.pathname)\n//           if(!authenticate){\n//                   this.props.history.push(this.props.history.location.pathname)\n//           }\n//     }\n// }\n  componentDidMount(e){\n\n    var myobj = document.getElementById(\"bodyClick\");\n    if(myobj!==null){\n    document.documentElement.classList.toggle(\"nav-open\");\n    myobj.remove();}\n    \n\n\n this.props.getItems();\n this.props.getCategories();\n    this.setState({products:this.props.products})\n\n  }\n\n  handleView=()=>{\n    if(!this.props.isAuthenticated){\n      \n    }\n  }\n  onChangePage(pageOfItems) {\n    // update state with new page of items\n    this.setState({ pageOfItems: pageOfItems });\n\n}\n\n\n  \n    render(){\n      const { currentPage, productsPerPage } = this.state;\n\n      const paginaton=(products)=>{\n        const indexOfLastTodo = currentPage * productsPerPage;\n        const indexOfFirstTodo = indexOfLastTodo - productsPerPage;\n        return products.slice(indexOfFirstTodo, indexOfLastTodo);\n      }\n      const pageNumbers = [];\n        for (let i = 1; i <= Math.ceil(this.props.products.length / productsPerPage); i++) {\n          pageNumbers.push(i);\n        }\n\n    const renderPageNumbers = pageNumbers.map(number => {\n      return (\n        <Pagination.Item onClick={this.handleClick} id={number} key={number} active={number === currentPage}>\n          {number}          \n        </Pagination.Item>\n        \n      );\n    });\n      \n      const sort=(products)=>{\n        // console.log(\"Sorting Called\",this.state.isAscending,this.state.isDecending);\n        // let newProducts=products;\n            // if(!isAscending && !isDecending)\n            // newProducts=products;\n            if(this.state.categoryValue!==0){\n              // var Category=this.props.categories.filter(\n                //   function (cat) {\n                  //     console.log(this.state.categoryValue);\n                  //     if(cat.id ===this.state.categoryValue)return cat.name \n                  //   }\n                  // )\n                  \n                  // let CategoryName=Category[0].name;\n                  let category_name=this.props.categories.filter(category=>parseInt(category.id)===parseInt(this.state.categoryValue));\n                  console.log(\"category ID:\",this.state.categoryValue,category_name);\n\n              products= category_name.length>0?products.filter(product=>\n                product.category===category_name[0].name):products;\n            }\n         if(this.state.isAscending ){\n          //  this.setState({isDecending:false})\n           return products.sort((a, b) => a.price - b.price)\n          }\n          else if(this.state.isDecending ){\n          // this.setState({isAscending:false})\n            return products.sort((a, b) => b.price - a.price)\n        }\n      return products;\n}\n\n\n      const Search=(products)=>{    \n        return (products.filter(product=>\n                product.name.toLowerCase().indexOf(this.state.q.toLowerCase())!==-1 || //str.includes(PATTERN)\n                // product.price.toLowerCase().indexOf(q.toLowerCase())!==-1 ||\n                product.manufacturer.toLowerCase().indexOf(this.state.q.toLowerCase())!==-1\n                ));\n\n        }\n        const Range=(p)=>{\n          console.log(\"min:\",this.state.minRange,\"  max:\",this.state.maxRange,\" num:\",p.length);\n\n          return p.filter(product=>parseInt(product.price)>=this.state.minRange && parseInt(product.price)<=this.state.maxRange)\n      }\nvar user=this.props.user;\n        return (\n            <>\n\n<div style={{ backgroundImage: `url(\"${back}\")`,backgroundSize:'100%',backgroundRepeat:'no-repeat'}}>\n      \n    <Prompt\n                when={this.props.isBlocked}\n                // message={(location)=> `Are You Sure Want To Leave ${location.pathname}`}\n                message={(location, action) => {\n                  if (action === 'POP') {\n                    console.log(\"Backing up...\",this.props.history)\n                  } \n              \n                  let check= location.pathname.startsWith(\"/app\")\n                    ? true\n                    : `Are you sure you want to go to ${this.props.history.location.pathname}?`\n                    // if(check)this.props.history.push(this.props.history.location.pathname)\n                    return check\n                }}\n/>\n    <AppNavbar/>\n    \n    <Container  style={{marginTop:'2rem',width:'100%'}}>\n\n          <p   className=\"content\" >\n          {this.props.products.length===0?<><Spinner style={{ width: '3rem', height: '3rem', color:'green' }} type=\"grow\" /></>\n               :<>\n\n                <Container  className=\"filter-box\" >\n                  <div>\n                  <Row style={{display:'flex',alignItems:'center',justifyContent:'space-between'}}>\n                  \n                  <div style={{color:'gray',paddingLeft:'.4rem',borderRadius:'20px',border:'1px solid gray'}}>\n                            <FontAwesomeIcon icon={faSearch}/>\n                            <input onChange={(e)=>{this.setState({q:e.target.value})}} style={{width:'80%',border:'none',padding:'.2rem 0 .2rem.5rem',color:'black'}} placeholder=\"Search Products\" type=\"text\"/>\n                        </div>\n\n                  <div className='filter-icon'>\n                          <DropdownButton title={<FontAwesomeIcon icon={faFilter} />} className='filter-button' style={{borderRadius:'50%',background:'transparent',color:'#3c44b1',border:'none',boxShadow:'none'}}> \n                                \n                                <Row >\n         <div >\n                 <Card className=\"filter-card\" >\n\n                \n                    <Card.Body className=\"filter-body\" style={{width:'15rem',padding:'0rem'}}>\n                        <Accordion defaultActiveKey=\"0\">\n                            <Card>\n                                <Accordion.Toggle style={{background:!this.state.open1?\"#fff\":'#f3f3f3'}} eventKey=\"0\" onClick={() => this.setState(prevState => ({open1: !prevState.open1}))}>\n                                    <div className=\"accordion-header\" ><h6>Price</h6><FontAwesomeIcon style={{color:this.state.open1?\"red\":\"#3b44c1\"}} icon={this.state.open1?faChevronCircleRight:faChevronCircleDown} /></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body >\n                                  <div className=\"range-input\" ><span style={{color:'gray'}}><b>Min:</b></span><input  type='number' value={this.state.minRange} onChange={(e)=>this.setState({minRange:e.target.value})}/>\n                                  </div>\n                                  <div className=\"range-input\"><span style={{color:'gray'}} ><b>Max:</b></span><input  type='number' value={this.state.maxRange} onChange={(e)=>this.setState({maxRange:e.target.value})}/>\n                                </div>\n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                           \n                            </Accordion>\n                            <Accordion defaultActiveKey=\"1\">\n\n                            <Card>\n                            <Accordion.Toggle  style={{background:!this.state.open2?\"#fff\":'#f3f3f3'}} eventKey=\"1\" onClick={()=>this.setState(prevState => ({open2: !prevState.open2}))}>\n                                    <div className=\"accordion-header\"><h6>Customize Columns</h6><FontAwesomeIcon style={{color:this.state.open2?\"red\":\"#3b44c1\"}} icon={this.state.open2?faChevronCircleRight:faChevronCircleDown}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={this.state.isManufacturer} onChange={()=>this.setState(prevState => ({isManufacturer: !prevState.isManufacturer}))}/><h6>Added By</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={this.state.isRating} onChange={()=>this.setState(prevState => ({isRating: !prevState.isRating}))}/><h6>Rating</h6></Col></Row>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={this.state.isPrice} onChange={()=>this.setState(prevState => ({isPrice: !prevState.isPrice}))}/><h6>Price</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={this.state.isStock} onChange={()=>this.setState(prevState => ({isStock: !prevState.isStock}))}/><h6>Stock</h6></Col></Row>\n                                   \n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n\n\n                            <Accordion defaultActiveKey=\"10\">\n\n                            <Card>\n                            <Accordion.Toggle  style={{background:!this.state.open2?\"#fff\":'#f3f3f3'}} eventKey=\"10\" onClick={()=>this.setState(prevState => ({open10: !prevState.open10}))}>\n                                    <div className=\"accordion-header\"><h6>Category</h6><FontAwesomeIcon style={{color:this.state.open2?\"red\":\"#3b44c1\"}} icon={this.state.open2?faChevronCircleRight:faChevronCircleDown}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"10\">\n                                <Card.Body>\n\n                                    <Form.Group as={Col}>\n              \n                                            <Form.Control className=\"category-box\"\n                                              as=\"select\"\n                                              // type=\"password\"\n                                              placeholder=\"\"\n                                              name=\"category\"\n                                              value={this.state.categoryValue}\n                                              onChange={(e)=>this.setState({categoryValue:e.target.value})}\n                                              // isInvalid={!!errors.category}\n                                              \n                                            >\n                                                <option value=\"0\">Choose Category</option>\n                                                {this.props.categories.map((category)=>(\n                                                      <option value={category.id}>{category.name}</option>\n\n                                                ))}\n                                                {/* <option value=\"2\">Laptop</option>\n                                                <option value=\"3\">HeadPhone</option> */}\n                                            </Form.Control>\n                                          \n                                          </Form.Group>                                   \n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n\n                            <Accordion defaultActiveKey=\"5\">\n\n                            <Card>\n                            <Accordion.Toggle style={{background:this.state.open4?\"#fff\":'#f3f3f3'}}  eventKey=\"3\" onClick={()=>this.setState(prevState => ({open4: !prevState.open4}))}>\n                                    <div className=\"accordion-header\"><h6>Sort By Price</h6><FontAwesomeIcon style={{color:this.state.open4?\"#3b44c1\":\"red\"}} icon={this.state.open4?faChevronCircleDown:faChevronCircleRight}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"3\">\n                                <Card.Body>\n                                    <div style={{display:'flex',flexDirection:'column',justifyContent:'space-around', alignItems:'center'}}>\n                                        \n                                        <div onClick={()=>{this.setState(prev=>({isAscending:!prev.isAscending}))}} className=\"asending\" style={{border:this.state.isAscending?'1px solid green':'',background:this.state.isAscending?' rgb(194, 255, 194)':'',marginBottom:'.6rem',display:'flex',alignItems:'center',cursor:'pointer'}}><a><FontAwesomeIcon style={{color:!this.state.isDecending?'#3b44c1':'gray'}} icon={faArrowAltCircleUp}/><h7>Ascending</h7></a></div>\n                                        <div onClick={()=>{this.setState(prev=>({isDecending:!prev.isDecending}))}} className=\"desending\" style={{border:this.state.isDecending?'1px solid red':'',background:this.state.isDecending?' rgb(255, 213, 213)':'',display:'flex',alignItems:'center',cursor:'pointer'}}><FontAwesomeIcon style={{color:!this.state.isAscending?'red':'gray'}} icon={faArrowAltCircleDown}/><h7>Decending</h7></div>\n                                    </div>\n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n   \n                </Card.Body>   \n                           \n                         \n                           </Card>\n                           </div>\n         </Row>    \n                                </DropdownButton>\n                          </div>\n      \n                  </Row>\n                  </div>\n                </Container>\n                 \n                  <Row style={{marginTop:'1rem'}} >\n                \n                  {paginaton(sort(Range(Search(this.props.products)))).map(product=>(\n                    <Col m-8 key={product.id}>\n                  <Card className=\"product-card\" style={{ width:'19rem',margin:'1rem'}}>\n                      <NavLink  to={this.props.isAuthenticated?{\n                    pathname:`admin/products/${product.id}`,\n                    state: {item:product}}:'/login'}\n                    ><Card.Img top style={{height:'8rem',marginLeft:'5.3rem',marginTop:'1rem',width:'8rem'}} src={product.img?product.img:default_product} alt=\"Card image cap\" />\n                      <Card.Body style={{display:'flex',flexDirection:'column',paddingLeft:'3rem',maxWidth:'30rem'}}>\n                                                                           \n                        <Card.Title><b>{product.name}</b></Card.Title>\n                        <Card.Subtitle style={{marginLeft:'0rem'}}>\n                        {/* <Row>\n                                <span style={{color:'#3b44c1',fontSize:'.8rem'}}>{product.manufacturer}</span>\n                            </Row> */}\n                            {/* <Row>\n                                <h3 style={{margin:'0rem'}}>{product.name}</h3 >\n                            </Row> */}\n                            <Row style={{display:'flex',alignItems:'center'}}>\n                             \n                                <h4  style={{display:this.state.isPrice?'flex':'none',margin:'0rem 0rem',fontWeight:'bold',fontSize:'16px'}}>₹{product.price}</h4>\n                                <p style={{display:this.state.isRating?'':'none',margin:'0 0 0 .5rem',borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'12px'}}>{product.rating?product.rating:\"0\"} <FontAwesomeIcon  icon={faStar}/></p> \n                             \n                            </Row>\n                            {/* <Row style={{display:'flex',fontSize:'12px'}}>\n                            </Row> */}\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\n                               <div style={{display:this.state.isStock?'flex':'none'}}> <h7 style={{color:'gray',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faShoppingBag}/><b style={{marginRight:'.2rem'}}>Available Stock:</b></h7><span style={{color:product.stock>=10?'#1bc943':'#f83245',borderRadius:'5px',border:product.stock>=10?'1px solid #1bc943':' 1px solid #f83245',background:product.stock>=10?'#e5f9ed':'#fff5f6',padding:'.0rem .3rem'}}><b>{product.stock}</b></span>\n                            </div></Row>\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\n                               <div style={{display:this.state.isManufacturer?'flex':'none'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faUser}/><b style={{marginRight:'.2rem'}}>Added By:</b></h7><span><b>{product.user?product.user.name:null}</b></span>\n                           </div> </Row>\n                            <Row style={{fontSize:\"12px\"}}>\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faCalendarAlt}/><b style={{marginRight:'.2rem'}}>Created Date:</b></h7><span>{product.date}</span>\n                            </Row>\n                        </Card.Subtitle>\n                       \n                      </Card.Body>\n                      </NavLink>\n                      <div className=\"bottom-button\" >\n                        {/* <UpdateProductModal isAuthenticated={this.props.isAuthenticated} product={product}/> */}\n                        <NavLink \n                                to={{\n                                    pathname:'/admin/updateProduct',\n                                    state: {product:product,user:user} \n                                  }}>\n                                      <Button variant=\"primary\" size=\"sm\" style={{marginLeft:'1rem'}} ><FontAwesomeIcon icon={faEdit}/></Button>\n                                  </NavLink>\n\n                      {this.props.isAuthenticated?<Button variant=\"danger\" size=\"sm\" style={{marginLeft:'1rem'}} onClick={()=>{this.props.deleteItem(product.id)}}><FontAwesomeIcon icon={faTrashAlt}/></Button>      \n                        :\n                        <div>\n                        <OverlayTrigger\n                            placement=\"right\"\n                            overlay={<Tooltip id=\"button-tooltip-2\">Delete</Tooltip>}>\n                                \n                        <Button disabled variant=\"danger\" size=\"sm\" style={{marginLeft:'1rem'}} onClick={()=>{this.props.deleteItem(product.id)}}><FontAwesomeIcon icon={faTrashAlt}/></Button>      \n                            \n                        </OverlayTrigger>\n                    </div>\n                        \n                        \n                        \n                        \n                          }\n                        </div>\n                    </Card>\n                    </Col>\n                  ))}\n                  \n                </Row>\n                  </>} \n                \n           \n            \n         </p>\n         <div style={{justifyContent:'space-around',display:'flex',alignItems:'center'}}>\n         <Pagination >\n           {renderPageNumbers}\n         </Pagination>\n         \n      </div>\n      </Container>\n      \n      <Footer/>\n     \n      </div>\n       \n      \n           \n            </>\n          );\n    }\n  \n};\nconst mapStateToProps= state=>{\n    return({\n      categories:state.category.categories,\n        isAuthenticated:state.auth.isAuthenticated,\n        isBlocked:state.auth.isBlocked,\n        isLoading:state.auth.isLoading,\n        user:state.auth.user,\n        products:state.item.items,\n        itemsLoading:state.item.itemsLoading,\n        itemsLoaded:state.item.itemsLoaded\n        // error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loadUser,loginModalOpen,getItems,deleteItem,getCategories})(withRouter(Products));","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterPage.js",["274","275","276","277","278","279","280","281","282","283","284"],"import React, { Component } from 'react';\r\nimport NotificationSystem from 'react-notification-system';\r\nimport { connect } from 'react-redux';\r\nimport './RegisterPage.css'\r\nimport { Prompt, withRouter } from 'react-router-dom';\r\n\r\nimport { loadUser, register, login, TokenExpireExtend, loginModalOpen, isBlockedF } from '../../action/authActions';\r\nimport { getCategories } from '../../action/categoryAction';\r\nimport { getItems, deleteItem } from \"../../action/itemAction\";\r\nimport { clearErrors } from '../../action/errorActions';\r\nimport AppNavbar from '../AppNavbar/AppNavbar';\r\nimport back from '../../assets/images/back.jpg'\r\nimport Footer from '../Footer/Footer';\r\n\r\nimport banner from '../../assets/images/LoginSVG.png'\r\n\r\n\r\nimport { Button, InputGroup, Col, Alert, NavLink, Modal, Form, Container, Row, Card } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport store from '../../store';\r\nimport Loading from '../LazyLoadingPage/Loading';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExclamationTriangle, faInfo } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst schemaLogin = yup.object({\r\n  email: yup.string().email('Invalid email').required(),\r\n  password: yup.string().min(0, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\r\n})\r\n\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n\r\n\r\nconst schemaRegister = yup.object({\r\n  fname: yup.string().min(1, 'At least 1 characters').max(10, 'First Name can be maximum 10 characters').required(),\r\n  lname: yup.string().min(1, 'At least 1 characters').max(10, 'Last Name can be maximum 10 characters').required(),\r\n  city: yup.string().min(3, 'City must be at least 3 characters').max(24, 'City can be maximum 20 characters'),\r\n  state: yup.string().min(3, 'State must be at least 3 characters').max(24, 'State can be maximum 20 characters'),\r\n  country: yup.string().min(3, 'Country must be at least 3 characters').max(24, 'Country can be maximum 20 characters'),\r\n  postal: yup.number().integer(),\r\n  email: yup.string().email('Invalid email').required(),\r\n  password: yup.string().min(6, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required(),\r\n  // mobile_number:yup.number().max(9999999999,'Invalid Number').required()//.matches(phoneRegExp,\"Number is Not Like Mobile number\"),   \r\n})\r\n\r\n\r\nclass RegisterPage extends Component {\r\n\r\n  notificationSystem = React.createRef();\r\n\r\n  state = {\r\n    imageURL: \"\",\r\n    signIn: false,\r\n    remember: false,\r\n    modal: this.props.isModalOpen,   // modal for adding item is false initially\r\n    msg: null,\r\n    city: '',\r\n    State: '',\r\n    country: '',\r\n    postal: '',\r\n    ip: '',\r\n    isBlocking: false,\r\n    startRender: false\r\n  };\r\n\r\n  addNotification = msg => {\r\n    const notification = this.notificationSystem.current;\r\n    notification.addNotification({\r\n      title: <div><FontAwesomeIcon icon={faExclamationTriangle} /> Server Error</div>,\r\n      message: this.state.msg,\r\n      level: 'error',\r\n      position: 'tc',\r\n      autoDismiss: 5\r\n    });\r\n  };\r\n\r\n  async componentDidMount() {\r\n    if (this.props.history.location.state !== 'button') {\r\n      let authenticate = window.confirm(\"You Need To Login To Get Full Access of ShopperZ\")\r\n      if (!authenticate) {\r\n        this.props.history.push('/')\r\n      }\r\n    }\r\n    let response = await fetch(`https://geolocation-db.com/json/`)\r\n    let ipData = await response.json();\r\n\r\n    this.setState({ ip: ipData.IPv4, city: ipData.city, country: ipData.country_name, postal: ipData.postal, State: ipData.state })\r\n    // console.log(\"City:\",this.state.city);  \r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    store.dispatch(loadUser());\r\n    console.log(\"Action Login Page:\", this.props.history);\r\n    if (this.props.history.action === 'POP') {\r\n      setTimeout(() => {\r\n        console.log(\"timeout\");\r\n        if (this.props.isAuthenticated) {\r\n          this.props.history.push('/')\r\n          // this.props.loginModalOpen(true);\r\n        }\r\n      }, 50)\r\n    }\r\n    else\r\n      if (this.props.isAuthenticated) {\r\n        console.log(\"Direct\");\r\n        this.props.history.push('/')\r\n        // this.props.loginModalOpen(true);\r\n      }\r\n    setTimeout(() => {\r\n      this.setState({ startRender: true })\r\n    }, 60)\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      if (error.id === \"REGISTER_FAIL\") {\r\n        this.setState({ msg: error.msg.msg });\r\n        this.setState({ isBlocking: true });\r\n        this.addNotification(this.state.msg);\r\n      }\r\n      else if (error.id === \"LOGIN_FAIL\") {\r\n        this.setState({ msg: error.msg.msg });\r\n        this.setState({ isBlocking: true });\r\n        setTimeout(() => {\r\n\r\n          this.addNotification(this.state.msg ? this.state.msg : \"Something Went Wrong\");\r\n        }, 60);\r\n        // console.log(\"Error R:\",error.msg.msg,this.state.msg);\r\n      }\r\n      else {\r\n        this.setState({ msg: null });\r\n\r\n      }\r\n    }\r\n\r\n\r\n    store.dispatch(loadUser());\r\n    if (this.props.isAuthenticated) {\r\n\r\n      console.log(\"update Component\");\r\n      this.props.history.push('/')\r\n      // this.props.loginModalOpen(true);\r\n    }\r\n  }\r\n\r\n  handleSignIn = () => {\r\n    console.log(\"Sign In Toggle Called\", this.state.signIn);\r\n    this.setState((prevState) => {\r\n      return { signIn: !prevState.signIn }\r\n    })\r\n  }\r\n  encodeImageFileAsURL = () => {\r\n    console.log(\"image uploading func. called\");\r\n    var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n    if (filesSelected.length > 0) {\r\n      var fileToLoad = filesSelected[0];\r\n\r\n      var fileReader = new FileReader();\r\n\r\n      fileReader.onload = (fileLoadedEvent) => {\r\n        var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n\r\n        var newImage = document.createElement('img');\r\n        newImage.src = srcData;\r\n        this.setState({ imageURL: newImage.src });\r\n\r\n\r\n      }\r\n      fileReader.readAsDataURL(fileToLoad);\r\n    }\r\n    // return newImage.src;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <>\r\n        <NotificationSystem ref={this.notificationSystem} />\r\n        {!this.state.startRender ? <Loading /> :\r\n          <div>\r\n            <div className=\"App\" style={{ alignItems: 'center', backgroundImage: `url(\"${back}\")`,backgroundSize:'100%', backgroundRepeat: 'no-repeat' }} >\r\n              <AppNavbar />\r\n\r\n              <Container>\r\n                <div className=\"content\" >\r\n                  <Container fluid>\r\n                    <Prompt\r\n                      when={this.state.isBlocking}\r\n                      message={(location) => `Are You Sure Want To Go To ${location.pathname}`}\r\n                    />\r\n                    <Row>\r\n\r\n                      <Col md={6} >\r\n                        <Card style={{ marginTop: '5rem' }} >\r\n                          {this.state.signIn ?\r\n                            <>\r\n                              <Card.Header >\r\n\r\n                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                  <h7 style={{ fontSize: '22px' }}><b>Create a New Account</b></h7>\r\n                                  <span style={{ fontSize: '14px', color: 'rgba(59,62,102,.5)' }}>Start benefiting from our tools right away</span>\r\n                                </div>\r\n                                {/* {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}    */}\r\n                              </Card.Header>\r\n                              <Card.Body>\r\n                                <Formik\r\n                                  // validator={() => ({})}\r\n                                  validationSchema={schemaRegister}\r\n                                  initialValues={{\r\n                                    fname: '',\r\n                                    lname: '',\r\n                                    email: '',\r\n                                    password: '',\r\n                                    city: this.state.city,\r\n                                    state: this.state.State,\r\n                                    postal: this.state.postal,\r\n                                    country: this.state.country,\r\n                                    // mobile_number:''\r\n\r\n                                  }}\r\n                                  onSubmit={(values) => {\r\n\r\n                                    this.encodeImageFileAsURL();\r\n                                    const imageURL = this.state.imageURL;\r\n                                    console.log(\"Image URL\", imageURL);\r\n                                    const { fname, lname, email, password, city, state, postal, country } = values;\r\n                                    let img = this.state.imageURL;\r\n                                    let ip = this.state.ip;\r\n                                    const newUser = {\r\n                                      fname, lname, email, password, img,city: city || this.state.city , state: state || this.state.State, postal:postal||this.state.postal, country:country||this.state.country, ip\r\n                                    }\r\n                                    console.log(newUser);\r\n                                    this.setState({ isBlocking: false });\r\n                                    // console.log(\"Update:\",this.state.isBlocking);\r\n                                    this.props.register(newUser);\r\n\r\n                                  }\r\n                                  }\r\n                                >\r\n\r\n                                  {({\r\n                                    handleSubmit,\r\n                                    handleChange,\r\n                                    values,\r\n                                    errors,\r\n                                  }) => (\r\n                                    <Form noValidate onSubmit={handleSubmit}>\r\n\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n\r\n                                          <Form.Label>First Name</Form.Label>\r\n\r\n                                          <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"First Name\"\r\n                                            name=\"fname\"\r\n                                            value={values.fname}\r\n                                            // onChangeCapture={(e)=>this.setState({isBlocking:e.target.value>0})}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.fname}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.fname}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\r\n                                          <Form.Label>Last Name</Form.Label>\r\n                                          <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"Last Name\"\r\n                                            name=\"lname\"\r\n                                            value={values.lname}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.lname}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.lname}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n\r\n\r\n                                      </Form.Row>\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n                                          <Form.Label>Email ID</Form.Label>\r\n                                          <InputGroup>\r\n                                            <InputGroup.Prepend>\r\n                                              <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                            </InputGroup.Prepend>\r\n                                            <Form.Control\r\n                                              type=\"text\"\r\n                                              placeholder=\"Email ID\"\r\n                                              aria-describedby=\"inputGroupPrepend\"\r\n                                              name=\"email\"\r\n                                              value={values.email}\r\n                                              onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                              isInvalid={!!errors.email}\r\n                                            />\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                              {errors.email}\r\n                                            </Form.Control.Feedback>\r\n                                          </InputGroup>\r\n                                        </Form.Group>\r\n                                      </Form.Row>\r\n\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>Password</Form.Label>\r\n                                          <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name=\"password\"\r\n                                            value={values.password}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.password}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.password}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n\r\n                                      </Form.Row>\r\n\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>City</Form.Label>\r\n                                          <Form.Control\r\n                                            type=\"text\"\r\n                                            placeholder=\"City\"\r\n                                            name=\"city\"\r\n                                            value={values.city ? values.city : this.state.city}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.city}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.city}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>State</Form.Label>\r\n                                          <Form.Control\r\n                                            disabled\r\n                                            type=\"text\"\r\n                                            placeholder=\"State\"\r\n                                            name=\"state\"\r\n                                            value={values.state ? values.state : this.state.State}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.state}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.state}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                      </Form.Row>\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>Postal</Form.Label>\r\n                                          <Form.Control\r\n\r\n                                            type=\"number\"\r\n                                            placeholder=\"Postal\"\r\n                                            name=\"postal\"\r\n                                            value={values.postal ? values.postal : this.state.postal}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.postal}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.postal}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>Country</Form.Label>\r\n                                          <Form.Control\r\n                                            disabled\r\n                                            type=\"text\"\r\n                                            placeholder=\"Country\"\r\n                                            name=\"country\"\r\n                                            value={values.country ? values.country : this.state.country}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.country}\r\n                                          />\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {errors.country}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n                                        {/* <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n              <Form.Label>Phone/Mobile Number</Form.Label>\r\n              <Form.Control\r\n                type=\"number\"\r\n                placeholder=\"Mobile Number\"\r\n                name=\"mobile\"\r\n                value={values.mobile_number}\r\n                onChange={handleChange}\r\n                isInvalid={!!errors.mobile_number}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.mobile_number}\r\n              </Form.Control.Feedback>\r\n            </Form.Group> */}\r\n\r\n                                      </Form.Row>\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"12\">\r\n                                          <div className=\"mb-3\">\r\n                                            <Form.File id=\"formcheck-api-regular\">\r\n                                              <Form.File.Label>Profile Image </Form.File.Label>\r\n                                              <input id=\"inputFileToLoad\" type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                                            </Form.File>\r\n                                          </div>\r\n                                        </Form.Group>\r\n\r\n                                      </Form.Row>\r\n\r\n                                      {/* <Form.Row>\r\n          <Map\r\n                google={this.props.google}\r\n                center={{lat: 18.5204, lng: 73.8567}}\r\n                height='300px'\r\n                zoom={15}\r\n    />\r\n          </Form.Row>\r\n          <Form.Row>\r\n         \r\n          </Form.Row>\r\n          <Form.Row>\r\n         \r\n          </Form.Row>\r\n          <Form.Row style={{marginBottom:'10rem'}}>\r\n         <p>Hello</p>\r\n          </Form.Row> */}\r\n                                      <Button type=\"submit\">Register</Button>\r\n\r\n                                      <input defaultChecked={this.state.remember} style={{ marginLeft: '1rem', marginTop: '.5rem' }} type=\"checkbox\" onChange={this.handleCheckboxChange} /><span>  Remember me!</span>\r\n                                      <div style={{}} className=\"forgot-password text-right\">\r\n                                        Already registered <span onClick={this.handleSignIn} ><a ><b>Sign in?</b></a></span>\r\n                                      </div>\r\n                                      <div id=\"imgTest\"></div>\r\n                                    </Form>\r\n\r\n                                  )}\r\n                                </Formik>\r\n                              </Card.Body></> :\r\n                            <>\r\n                              <Card.Header>\r\n                                <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                  <h7 style={{ fontSize: '22px' }}><b>Login Now</b></h7>\r\n                                  <span style={{ fontSize: '14px', color: 'rgba(59,62,102,.5)' }}>Login To Continue The Contribution with Our Advanced Tools!!</span>\r\n                                </div>\r\n                              </Card.Header>\r\n                              <Card.Body>\r\n                                <Formik\r\n                                  validationSchema={schemaLogin}\r\n                                  initialValues={{\r\n                                    email: '',\r\n                                    password: '',\r\n\r\n                                  }}\r\n                                  onSubmit={(values) => {\r\n                                    this.setState({ isBlocking: false });\r\n                                    console.log(\"Update:\", this.state.isBlocking);\r\n                                    const { email, password } = values;\r\n\r\n                                    const user = {\r\n                                      email, password\r\n                                    }\r\n                                    this.props.login(user);\r\n                                  }\r\n                                  }\r\n                                >\r\n                                  {({\r\n                                    handleSubmit,\r\n                                    handleChange,\r\n                                    values,\r\n                                    errors,\r\n                                    touched\r\n                                  }) => (\r\n                                    <Form noValidate onSubmit={handleSubmit}>\r\n\r\n\r\n                                      <Form.Row>\r\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n                                          <Form.Label>Email ID</Form.Label>\r\n                                          <InputGroup>\r\n                                            <InputGroup.Prepend>\r\n                                              <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\r\n                                            </InputGroup.Prepend>\r\n                                            <Form.Control\r\n                                              type=\"text\"\r\n                                              placeholder=\"Email ID\"\r\n                                              aria-describedby=\"inputGroupPrepend\"\r\n                                              name=\"email\"\r\n                                              value={values.email}\r\n                                              onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                              isInvalid={!!errors.email}\r\n                                            />\r\n                                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                              {touched.email && errors.email}\r\n                                            </Form.Control.Feedback>\r\n\r\n                                          </InputGroup>\r\n                                        </Form.Group>\r\n                                      </Form.Row>\r\n                                      <Form.Row>\r\n\r\n                                        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n                                          <Form.Label>Password</Form.Label>\r\n                                          <Form.Control\r\n                                            type=\"password\"\r\n                                            placeholder=\"Password\"\r\n                                            name=\"password\"\r\n                                            value={values.password}\r\n                                            onChange={e => { this.setState({ isBlocking: e.target.value.length > 0 }); handleChange(e) }}\r\n                                            isInvalid={!!errors.password}\r\n                                          />\r\n                                          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n                                          <Form.Control.Feedback type=\"invalid\">\r\n                                            {touched.password && errors.password}\r\n                                          </Form.Control.Feedback>\r\n                                        </Form.Group>\r\n\r\n                                      </Form.Row>\r\n                                      {/* <Form.Group>\r\n                                <Form.Check\r\n                                required\r\n                                name=\"terms\"\r\n                                label=\"Agree to terms and conditions\"\r\n                                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\r\n                                isInvalid={!!errors.terms}\r\n                                feedback={errors.terms}\r\n                                id=\"validationFormik0\"\r\n                                />\r\n                            </Form.Group> */}\r\n                                      <Button type=\"submit\">Login</Button>\r\n                                      <input defaultChecked={this.state.remember} style={{ marginLeft: '1rem', marginTop: '.5rem' }} type=\"checkbox\" onChange={this.handleCheckboxChange} /><span>  Remember me!</span>\r\n                                      <div style={{ marginTop: '1rem', }} className=\"forgot-password text-right\">\r\n                                        Don't have an account?  <span onClick={this.handleSignIn} ><a><b>Create an Account</b></a></span>\r\n                                      </div>\r\n                                    </Form>\r\n                                  )}\r\n                                </Formik>\r\n                              </Card.Body>\r\n                            </>}\r\n\r\n\r\n\r\n\r\n                        </Card>\r\n                      </Col>\r\n\r\n                      <Col md={6}>\r\n                        <Card style={{ marginTop: '5rem' }} className='banner-card '>\r\n                          <div className='banner'>\r\n                            <img alt=\"alt\" src={banner} />\r\n                          </div>\r\n                        </Card>\r\n                      </Col>\r\n\r\n                    </Row>\r\n\r\n\r\n                  </Container>\r\n\r\n\r\n                </div>\r\n\r\n              </Container>\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div >\r\n              <Footer />\r\n            </div>\r\n          </div>}\r\n      </>\r\n    );\r\n  }\r\n\r\n};\r\nconst mapStateToProps = state => {\r\n  return ({\r\n    categories: state.category.categories,\r\n    isAuthenticated: state.auth.isAuthenticated,\r\n    isBlocked: state.auth.isBlocked,\r\n    isLoading: state.auth.isLoading,\r\n    user: state.auth.user,\r\n    products: state.item.items,\r\n    itemsLoading: state.item.itemsLoading,\r\n    itemsLoaded: state.item.itemsLoaded,\r\n    error: state.error\r\n  })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { loadUser, loginModalOpen, getItems, deleteItem, getCategories, login, register, clearErrors })(withRouter(RegisterPage));\r\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\About\\About.js",["285"],"import React, { Component } from 'react';\r\n\r\nimport {connect} from 'react-redux';\r\nimport './About.css'\r\nimport { NavLink, withRouter} from 'react-router-dom';\r\n\r\nimport {getCategories} from '../../action/categoryAction';\r\nimport { getItems,deleteItem } from \"../../action/itemAction\";\r\nimport {loginModalOpen,loadUser} from '../../action/authActions'\r\nimport AppNavbar from '../AppNavbar/AppNavbar';\r\nimport back from '../../assets/images/back.jpg'\r\nimport Footer from '../Footer/Footer';\r\nimport { Container,Row,Col,Card } from 'react-bootstrap';\r\nimport banner from '../../assets/images/aboutus.png' \r\nimport journey from '../../assets/images/journey.png' \r\n\r\n\r\n\r\n\r\nclass About extends Component {  \r\n    render(){\r\n        return (\r\n            <>\r\n<div className=\"App\" style={{ backgroundImage: `url(\"${back}\")`,backgroundSize:'100%',backgroundRepeat:'no-repeat'}} >\r\n            <AppNavbar/>\r\n           \r\n            <Container>\r\n          <div className=\"content\" >\r\n            <Container fluid>\r\n              <Row>\r\n              \r\n                <Col md={5} >\r\n                    <Card className=\"intro_card\">\r\n                        <div className=\"text-black mt-3 card-content\">\r\n                            <h1 className=\" mb-3 font-weight-bold\">About Us</h1>\r\n                            <p className=\"font-size-lg text-black-70\"><b>ShopperZ</b> is one of the leading Inventry Management Solution companies known for its state-of-the-art Inventry Management solutions which includes features like Product Page, admin Panel where admin can add and delete the products as well as users, This Project is designed in India and can Provide inventory solutions to the ecommerce businesses.</p>\r\n                            <div className=\"divider border-2 border-dark my-4 border-light opacity-2 rounded-circle w-25\"></div>\r\n                                <div>\r\n                                    <NavLink style={{color:'white',background:'#3b44c1'}} to='/about' className=\"d-block d-sm-inline-block btn btn-primary btn-lg\" >\r\n                                    <span className=\"btn-wrapper--icon\">\r\n                                    </span><span className=\"btn-wrapper--label\" >Read More</span></NavLink>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n                    </Card>\r\n                </Col>\r\n                \r\n                <Col md={7}>\r\n                  <Card style={{marginTop:'5rem'}} className='banner-card'>\r\n                      <div className='banner'>\r\n                          <img  alt=\"alt\" src={banner}/>\r\n                      </div>\r\n                  </Card>\r\n                </Col>\r\n              \r\n              </Row>\r\n              \r\n            \r\n            </Container>\r\n           \r\n            \r\n      </div>\r\n  \r\n      </Container>\r\n            <Container style={{marginTop:'5rem',marginBottom:'5rem'}}>\r\n          <div className=\"content\" >\r\n            <Container fluid>\r\n              <Row>\r\n              \r\n              \r\n                \r\n                <Col md={6}>\r\n                  <Card style={{marginTop:'5rem'}} className='banner-card'>\r\n                      <div className='banner'>\r\n                          <img  alt=\"alt\" src={journey}/>\r\n                      </div>\r\n                  </Card>\r\n                </Col>\r\n                <Col md={5} >\r\n                    <Card className=\"intro_card\">\r\n                        <div className=\"text-black mt-3 card-content\">\r\n                            <h1 className=\" mb-3 font-weight-bold\">Our Journey</h1>\r\n                            <p >We began our journey as a startup in 2021, and it has taken us a lot more than resources and hard work to put ourselves on the map. During this period we learnt a lot about development and marketting.</p>\r\n                            <div className=\"divider border-2 border-dark my-4 border-light opacity-2 rounded-circle w-25\"></div>\r\n                                <div>\r\n                                    \r\n                                    \r\n                                </div>\r\n                            </div>\r\n                    </Card>\r\n                </Col>\r\n              \r\n              </Row>\r\n              \r\n            \r\n            </Container>\r\n           \r\n            \r\n      </div>\r\n  \r\n      </Container>\r\n      \r\n      \r\n      </div>\r\n\r\n    <div>\r\n    \r\n \r\n\r\n<div className=\"about\">\r\n<h1 style={{fontWeight:'bold',color:'black'}}>Our Location</h1>\r\n</div>\r\n\r\n<div className=\"ourteam\">\r\n<p>7/A, Brahma Jaiswal Road, Navy Apartment (Second Floor)\r\nSector-8, Chennai - 600101</p>\r\n\r\n</div>\r\n<div className=\"location\">\r\n\r\n<iframe src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d497511.1146356065!2d79.92880799953032!3d13.04804380118091!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3a5265ea4f7d3361%3A0x6e61a70b6863d433!2sChennai%2C%20Tamil%20Nadu!5e0!3m2!1sen!2sin!4v1582835093586!5m2!1sen!2sin\" width=\"100%\" height=\"500px\" frameBorder=\"0\"  allowFullScreen></iframe>\r\n\r\n<div className=\"location_tag\">\r\n    <div>Location</div>\r\n</div>\r\n</div>\r\n  \r\n<Footer/>\r\n     \r\n </div>  \r\n            </>\r\n          );\r\n    }\r\n  \r\n};\r\nconst mapStateToProps= state=>{\r\n    return({\r\n      categories:state.category.categories,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        isBlocked:state.auth.isBlocked,\r\n        isLoading:state.auth.isLoading,\r\n        user:state.auth.user,\r\n        products:state.item.items,\r\n        itemsLoading:state.item.itemsLoading,\r\n        itemsLoaded:state.item.itemsLoaded\r\n       \r\n    })\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,{loadUser,loginModalOpen,getItems,deleteItem,getCategories})(withRouter(About));\r\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\LazyLoadingPage\\Loading.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\routes.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\index.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\categoryAction.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\errorActions.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\types.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\Home1.js",["286","287"],"import React, { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport './Home1.css'\nimport {Card} from 'react-bootstrap';   \nimport { NavLink } from 'react-router-dom';\nimport TrendingProductList from \"../ProductsList/TrendingProductList\";\n\nclass Home1 extends Component {\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n  render() {\n    return (\n<>\n<div className='App1' >\n\n        <Container>\n          <Row>\n          \n           \n            \n            <Col md={6}>\n            \n             <TrendingProductList/>\n             \n            </Col>\n            <Col md={6} >\n                <Card className=\"intro_card\">\n                    <div className=\"text-black mt-3 card-content\">\n                        <h1 className=\" mb-3 font-weight-bold\">A magical and revolutionary device at an unbelievable price</h1>\n                        <p>Fully coded, perfectly responsive on all screen sizes. Start working on your project today!</p><p className=\"font-size-lg text-black-50\">Use this individual application for a head start in building a product that is related to the commerce niche. This template comes with pre-built pages for orders, customers and various sales releated analytics.</p>\n                        <div className=\"divider border-2 border-dark my-4 border-light opacity-2 rounded-circle w-25\"></div>\n                            <div>\n                                <a className=\"d-block d-sm-inline-block btn btn-primary btn-lg\">\n                                <span className=\"btn-wrapper--icon\">\n                                </span><span className=\"btn-wrapper--label\"><NavLink href=\"#\" style={{color:'white'}} to='/admin/dashboard'>Dashboard</NavLink></span></a>\n                                <a className=\"d-block d-sm-inline-block ml-0 mt-3 mt-sm-0 ml-sm-3 btn btn-outline-primary btn-lg\" href=\"#\"><span>Products Filters</span></a>\n                            </div>\n                        </div>\n                </Card>\n            </Col>\n          </Row>\n          </Container>\n          </div>\n      </>\n    );\n  }\n}\n\nexport default Home1;\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Home\\ApexChart.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\itemAction.js",["288"],"import  {DELETE_SELECTED_ITEM,UPDATE_ITEM,GET_ITEM,ADD_ITEM,DELETE_ITEM, ITEMS_LOAD} from './types';\nimport axios from 'axios';\n\nimport {returnErrors} from './errorActions';\n\n\nexport const getItems=()=> dispatch =>{\n    dispatch(setItemsLoading());\n\n    axios.get('/products').then(res=>\n    dispatch({\n        type:GET_ITEM,\n        payload:res.data\n    }))\n    .catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));   \n};\nexport const addItem=item=> dispatch =>{\n    axios.post('/add_product',item)\n    .then(res=>dispatch({\n        type:ADD_ITEM,\n        payload:res.data\n    })).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\n};\n\nexport const deleteItem=id=>dispatch=>{\n    console.log(\"Id of Item\",id);\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    const body=JSON.stringify({id});\n    console.log(\"Action Product Id\",id);\n    axios.post('/delete_product',body,config).then(\n        res=>dispatch({\n            type:DELETE_ITEM,\n            payload:id\n        })\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\n}\n\n\nexport const deleteSelectedItem=ids=>dispatch=>{\n\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    var body=JSON.stringify({ids});\n    var {ids}=body\n    console.log(\"Action Product Id\",typeof ids);\n    console.log(\"Body\",body,body[0],ids);\n    axios.post('/delete_selected_product',body,config).then(\n        res=>dispatch({\n            type:DELETE_SELECTED_ITEM,\n            payload:ids\n        })\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\n}\n\nexport const rankItem=(id)=>dispatch=>{\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    const body=JSON.stringify({id});\n    console.log(\"Action Product Id\",id);\n    axios.post('/rank_product',body,config).then(\n        res=>dispatch({\n            type:UPDATE_ITEM,\n            payload:res.data\n        })\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\n}\n\nexport const updateItem=({id,name,manufacturer,description,stock,price,rating,user,img})=>dispatch=>{\n    dispatch(setItemsLoading());\n    console.log(\"Id of Item\",id,user);\n    const config={\n        headers:{'Content-Type':'application/json'}\n    }\n    const body=JSON.stringify({id,name,description,manufacturer,price,stock,rating,user,img});\n    console.log(\"Action Product Id\",id);\n    axios.post('/update_product',body,config).then(\n        res=>dispatch({\n            type:UPDATE_ITEM,\n            payload:res.data\n        })\n    ).catch(err=>dispatch(returnErrors(err.response.data,err.response.status)));\n    // Wait for 1/2 Seconds \n    setTimeout(() => {\n        dispatch(getItems());\n    }, 500);\n}\n\n\nexport const setItemsLoading=()=>{\n    return{\n        type:ITEMS_LOAD\n    };\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AppNavbar\\AppNavbar.js",["289"],"import React, {Component, Fragment} from 'react';\nimport {NavLink} from 'react-router-dom'\nimport {Navbar, Nav,Container,Dropdown, Button} from 'react-bootstrap';\nimport Logout from '../auth/Logout';\nimport RegisterModal from '../auth/RegisterModal1';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport avatar from '../../assets/images/avatar.png'\nimport logo from '../../assets/images/logo.jpg'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faCog, faUserEdit } from '@fortawesome/free-solid-svg-icons';\nimport './AppNavBar.css'\nimport store from '../../store';\nimport { loadUser } from '../../action/authActions';\n\nclass AppNavbar extends Component{\n    componentDidMount(){\n        store.dispatch(loadUser());\n    }\n    state={\n        \n        dropdownOpen:false,\n        isOpen:false\n    }\n    static propTypes={\n        auth:PropTypes.object.isRequired\n    }\n    toggle=()=>{\n        this.setState({\n            isOpen:!this.state.isOpen\n        });\n    }\n    toggled=()=>{\n        this.setState({\n            dropdownOpen:!this.state.dropdownOpen\n        });\n    }\n    render(){\n        const {isAuthenticated, user}=this.props.auth;\n       \n        console.log(\"from Nav:\",user?user:'Hello');\n        const authLinks=(\n            <Fragment >\n                {/* <Nav.Item>About</Nav.Item> */}\n                <Nav.Item>\n                    \n                <Dropdown className=\"user-dropdown\" style={{padding:'0rem !important'}} isOpen={this.state.dropdownOpen} toggle={this.toggled}>\n                    \n                    <Dropdown.Toggle id=\"dropdown-basic\" caret>\n                        {user? <div className=\"user-avatar\">\n                        <img alt=\"alt\" className=\"avatar\" style={{width:'2rem',borderRadius:'50%'}} src={user.img?user.img:avatar} />\n                        <div class=\"status-overlay\">\n                            <i class=\"bowtie-icon bowtie-status-success success\"></i>\n                        </div>\n                        </div>:'X'}\n                    <div>\n                        <span style={{color:'red',fontWeight:400,fontSize:'80%'}}>Shop Admin</span>\n                        <div style={{color:'#3b3e66'}}>{user? user.fname+\" \"+user.lname:'Hello Gest'}</div>\n                    </div>\n                   \n                    \n                    </Dropdown.Toggle>\n                    <Dropdown.Menu bottom>\n                            <Dropdown.Item header>\n                            {user? <div className=\"user-avatar\">\n                    <img alt=\"alt\" className=\"avatar\" style={{width:'2rem',borderRadius:'50%'}} src={user.img?user.img:avatar} />\n                    {/* <div class=\"status-overlay\">\n                        <i class=\"bowtie-icon bowtie-status-success success\"></i>\n                    </div> */}\n                    </div>:'X'}\n                    <div>\n                        <span style={{color:'red',fontWeight:400,fontSize:'80%'}}>Shop Admin</span>\n                        <div style={{color:'#3b3e66'}}>{user? user.email:'Hello Guest'}</div>\n                    </div>\n                            </Dropdown.Item><hr/>\n                             <Dropdown.Item className=\"dropdown-list-nav\"> <Nav.Item  >\n                            <div className=\"dropdown-list-item\">\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faCog}/><h7>Settings</h7>    \n                            </div>    \n                    </Nav.Item></Dropdown.Item>\n                             <Dropdown.Item className=\"dropdown-list-nav\" > <Nav.Item >\n                               <NavLink to=\"/admin/user\">\n                            <div className=\"dropdown-list-item\">\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faUserEdit}/><h7>Profile</h7>    \n                            </div>    \n                            </NavLink> \n                    </Nav.Item></Dropdown.Item>\n                    <Dropdown.Item> <Nav.Item ><Logout/></Nav.Item></Dropdown.Item>\n                   \n                    </Dropdown.Menu>\n                   \n                </Dropdown>\n   \n                </Nav.Item>    \n            </Fragment>\n        );\n        const guestLinks=(\n            <Fragment>\n                <Nav.Item>\n                   \n                <NavLink to={{pathname:'/login',state:'button'}}\n                 >\n               <Button style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> Register</b></Button>\n            </NavLink>\n\n                   \n                </Nav.Item>\n                <Nav.Item>\n                        <NavLink onClick={this.toggle} to='/about'>\n                    <       Button style={{background:'#7a7b97',paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> About</b></Button>\n                        </NavLink>\n                </Nav.Item>\n                {/* <Nav.Item>\n                    <LoginModal/>\n                </Nav.Item> */}\n            </Fragment>\n        );\n        return(\n            <>\n            <div  style={{color:'#000',textDecoration:'none'}}>\n            <Navbar expand=\"sm\"> \n                <Container>\n                    <Navbar.Brand ><NavLink to='/'><div className=\"nav-brand\"><img alt=\"alt\" className=\"nav-logo\" src={logo}/><div className=\"brand-text\"><span><b>inventory</b></span><b>ShopperZ</b></div></div></NavLink></Navbar.Brand>\n                    <Navbar.Toggle onClick={this.toggle}/>\n                    <Navbar.Collapse className=\"mainNavCollapse\" isOpen={this.state.isOpen} navbar>\n                        <NavLink className=\"ml-auto\"  to='/'><b>Home</b></NavLink>\n                        {/* <NavLink  href='/admin/dashboard'><b>Dashboard</b></NavLink> */}\n                        <NavLink className=\"ml-3 mr-3\" to='/productsGrid'><b>Products</b></NavLink>\n                        <Nav  navbar>\n                        {isAuthenticated?authLinks:guestLinks}    \n                        </Nav>\n                    </Navbar.Collapse>\n                </Container>\n            </Navbar>\n        </div>\n       </>\n        );\n    }\n}\n\nconst mapStateToProps=state=>({\n    auth:state.auth\n})\nexport default connect(mapStateToProps,null)(AppNavbar);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\UpdateProductModal.js",["290","291","292","293"],"import React,{Component} from 'react';\nimport { Alert,NavLink, Button, Modal, ModalHeader, ModalBody,Form,FormGroup,Label, Input, Collapse } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport {loadUser,loginModalOpen} from '../../action/authActions';\nimport back from '../../assets/images/back.jpg';\nimport {clearErrors}  from '../../action/errorActions';\n\n// import e from 'express';\nimport { getItems,updateItem } from '../../action/itemAction';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nclass UpdateProductModal extends Component{\n    \n    state={\n        modal:false,   // modal for adding item is false initially\n        name:'',\n        description:'',\n        manufacturer:'',\n        stock:0,\n        price:0,\n        rating:0,\n        msg:null,\n        isUpdate:false\n    };\n    componentDidMount(){\n        // this.props.loadUser();\n        const {name,description,manufacturer,price,stock,rating}=this.props.product;\n        this.setState({name:name,description:description,manufacturer:manufacturer,price:price,stock:stock,rating:rating});\n    }\n    componentDidUpdate(prevProps){\n        const {error,isUpdate}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"UPDATE_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if Update close Modal\n        if(this.state.modal){\n            \n            if(isUpdate){\n                this.toggle();\n                this.props.loadUser();\n            }\n        }\n        \n    }\n    static propTypes={\n        isUpdate:PropTypes.bool,\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        register:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(\"Props\",this.props);\n        if(!this.props.isAuthenticated){\n            console.log(\"Authen\");\n            this.props.history.push('/')\n            this.props.loginModalOpen(true);\n           \n        }\n        // console.log(\"from Toggle-> Modal Open:: \"+this.state.modal)\n        else\n            this.setState({\n                modal:!this.state.modal\n            })\n    }\n\n\n    onChange=(e)=>{\n        this.setState({[e.target.name]:e.target.value});\n    }\n\n    // On Submit  method \n    onSubmit=e=>{\n        const {error,isUpdate}=this.props;\n        console.log(\"From Submit-> isUpdate:: \"+this.props.isUpdate)\n        e.preventDefault();\n        const id=this.props.product.id;\n        var user=this.props.user;\n        console.log(\"User Id Given for Update: :\",user)\n        const {name,description,manufacturer,stock,price}=this.state;\n        let {rating}=this.state;\n        if(rating===undefined)\n        rating=4.5\n        console.log(\"Data to Update:\",rating);\n        const editProduct={\n            id,name,description,manufacturer,price,stock,rating,user\n        }\n        this.props.updateItem(editProduct);\n        \n        this.toggle();\n        // this.props.getItems();\n        // this.props.addItem(newItem);\n   \n        \n    }\n\nrender(){\n    const {name,description,manufacturer,price,stock,rating}=this.props.product;\n    return(\n        <>\n            <OverlayTrigger        \n                        placement=\"bottom\"\n                    overlay={<Tooltip id=\"button-tooltip-2\">Edit Product</Tooltip>}>\n           \n            <Button onClick={this.toggle} variant=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon={faEdit}/>\n            </Button>\n            </OverlayTrigger>\n            <Modal isOpen={this.state.modal}  >\n                <ModalHeader toggle={this.toggle} style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton>Update</ModalHeader>\n                <ModalBody>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n                    <Form onSubmit={this.onSubmit}>\n                        <FormGroup>\n                            <Label for=\"name\">Name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                placeholder={name}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"description\">Description</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"description\"\n                                id=\"description\"\n                                placeholder={description}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"manufacturer\">Manufacturer</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"manufacturer\"\n                                id=\"manufacturer\"\n                                placeholder={manufacturer}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"price\">Price</Label>\n                            <Input \n                                 type=\"text\"\n                                name=\"price\"\n                                id=\"price\"\n                                placeholder={price}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"stock\">Stock</Label>\n                            <Input \n                                 type=\"text\"\n                                name=\"stock\"\n                                id=\"stock\"\n                                placeholder={stock}\n                                onChange={this.onChange}\n                            />\n                            <Label for=\"rating\">Rating</Label>\n                            <Input \n                                type=\"text\"\n                                name=\"rating\"\n                                id=\"rating\"\n                                placeholder={rating}\n                                onChange={this.onChange}\n                            />\n                            <Button  style={{marginTop:'2rem'}} block>\n\n                            Update</Button>\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n\n            </Modal>\n        </>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isUpdate:state.auth.isUpdate,\n\n        isAuthenticated:state.auth.isAuthenticated,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loadUser,loginModalOpen,getItems,updateItem,clearErrors})(withRouter(UpdateProductModal));","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Sidebar\\Sidebar.jsx",["294","295"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport AdminNavbarLinks from \"../Navbars/AdminNavbarLinks\";\n\nimport logo from \"../../assets/images/logo.jpg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Navbar } from \"react-bootstrap\";\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth\n    };\n  }\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  updateDimensions() {\n    this.setState({ width: window.innerWidth });\n  }\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n  render() {\n    const sidebarBackground = {\n      backgroundImage: \"url(\" + this.props.image + \")\"\n    };\n    return (\n      <div\n        id=\"sidebar\"\n        className=\"sidebar\"\n        data-color={this.props.color}\n      \n      >\n          \n         <Navbar.Brand href=\"/\"><div className=\"nav-brand1\"><img className=\"nav-logo1\" src={logo}/><div className=\"brand-text1\"><span>inventory</span><b>ShopperZ</b></div></div></Navbar.Brand>\n       \n        <div className=\"sidebar-wrapper\">\n          <ul className=\"nav\">\n            {this.state.width <= 991 ? <AdminNavbarLinks /> : null}\n            \n            {this.props.routes.map((prop, key) => {\n              if (!prop.redirect)\n                return (\n                  <li\n                    className={\n                      prop.upgrade\n                        ? \"active active-pro\"\n                        : this.activeRoute(prop.layout + prop.path)\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      style={{display:prop.display}}\n                      to={prop.layout + prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                    >\n                      <FontAwesomeIcon icon={prop.icon} />\n                      <p>{prop.name}</p>\n                    </NavLink>\n                  </li>\n                );\n              return null;\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Footer\\Footer.jsx",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\itemReducer.js",["296"],"\nimport  {DELETE_SELECTED_ITEM,UPDATE_ITEM,GET_ITEM,ADD_ITEM,DELETE_ITEM,ITEMS_LOAD} from '../action/types';\n\nconst initialState={\n    items:[],\n    itemsLoading:false,\n    itemsLoaded:false\n}\n\nexport default function(state=initialState,action){\n    const {payload}=action; //destructuring action\n    switch(action.type){\n        case GET_ITEM:\n            return{\n                ...state,\n                items:payload,\n                itemsLoading:false,\n                itemsLoaded:true\n           };\n           case DELETE_ITEM:\n            return{\n                ...state,\n                items:state.items.filter(item=> item.id!==action.payload)\n\n           };\n           case DELETE_SELECTED_ITEM:\n               console.log(\"Action Payload:\",action.payload);\n            return{\n                    ...state,\n                    items:state.items.filter(item=> \n                        {\n                            // console.log(\"Action::\",action.payload);\n                            for(var id in action.payload)\n                            if(item.id!==id)\n                                return false;\n                            return true;\n                        }\n                 )\n\n           };\n           case ADD_ITEM:\n            return{\n                ...state,\n                items:[...state.items,payload]\n\n           };\n        case ITEMS_LOAD:\n            return{\n                ...state,\n                itemsLoading:true,\n                itemsLoaded:false\n            };\n            case UPDATE_ITEM:\n            return{\n                ...state,\n               items:state.items.map((item)=>{\n                   if(item.id===action.payload.id){\n                       const updatedItem={\n                           ...item,\n                           name:action.payload.name,\n                           description:action.payload.description,\n                           manufacturer:action.payload.manufacturer,\n                           price:action.payload.price,\n                           stock:action.payload.stock,\n                           rating:action.payload.rating,\n                           editUser:item.editUser.push(action.payload.user),\n                       }\n                       return updatedItem;\n                   }\n                   return item;\n               }),\n               itemsLoading:false,\n                itemsLoaded:true\n               \n\n            }; \n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\authReducer.js",["297"],"import {BLOCK,FREE_BLOCK,LOGIN_MODAL_OPEN,LOGIN_MODAL_CLOSE,USER_LOADED,USER_LOADING,AUTH_ERROR,LOGIN_FAIL,LOGIN_SUCCESS,LOGOUT_SUCCESS,REGISTER_FAIL,REGISTER_SUCCESS,UPDATE_SUCCESS} from '../action/types';\nimport { EXPIRE_EXTEND } from './../action/types';\n\nconst initialState={\n    token:localStorage.getItem('token'),\n    isLoading:false,\n    isLoaded:false,\n    isAuthenticated:null,\n    isUpdate:null,\n    user:null,\n    isModalOpen:false,\n    isBlocked:false,\n};\n\nexport default function(state=initialState,action){\n    switch(action.type){    \n        case LOGIN_MODAL_OPEN:\n            return{\n                ...state,\n                isModalOpen:true\n                \n            };\n        case LOGIN_MODAL_CLOSE:\n            return{\n                ...state,\n                isModalOpen:false\n                \n            };\n        case BLOCK:\n            return{\n                ...state,\n                isBlocked:true\n                \n            };\n        case FREE_BLOCK:\n            return{\n                ...state,\n                isBlocked:false\n                \n            };\n        case USER_LOADING:\n            return{\n                ...state,\n                isUpdate:false,\n                isLoading:true,\n                isLoaded:false\n                \n            };\n        case USER_LOADED:\n            return{\n                ...state,\n                isAuthenticated:true,\n                isLoaded:true,\n                isLoading:false,\n                user:action.payload,\n\n            };\n        case LOGIN_SUCCESS:\n        case REGISTER_SUCCESS:\n            localStorage.setItem('token',action.payload.token);\n            return{\n                ...state,\n                ...action.payload,\n                isAuthenticated:true,\n                isLoading:false,\n\n            };\n        case UPDATE_SUCCESS:\n            return{\n                ...state,\n                ...action.payload,\n                isUpdate:true,\n                isAuthenticated:true,\n                isLoading:false,\n\n            }; \n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS: \n        case REGISTER_FAIL:  \n        // case UPDATE_FAIL:\n            localStorage.removeItem('token');\n            return{\n                ...state,\n                token:null,\n                isAuthenticated:false,\n                isLoading:false,\n                user:null\n            };\n        case EXPIRE_EXTEND:\n            return{\n                ...state,\n                rememberMe:action.payload,\n            }\n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\categoryReducer.js",["298"],"\nimport  {GET_CATEGORY,ADD_CATEGORY} from '../action/types';\n\nconst initialState={\n    categories:[],\n    // itemsLoading:false,\n    // itemsLoaded:false\n}\n\nexport default function(state=initialState,action){\n    const {payload}=action; //destructuring action\n    switch(action.type){\n        case GET_CATEGORY:\n            return{\n                ...state,\n                categories:payload,\n                // itemsLoading:false,\n                // itemsLoaded:true\n           };\n           \n           case ADD_CATEGORY:\n            return{\n                ...state,\n                categories:[...state.categories,payload]\n\n           };\n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\orderReducer.js",["299"],"\nimport  {UPDATE_ORDER,GET_ORDER,ADD_ORDER,DELETE_ORDER,ORDERS_LOAD} from '../action/types';\n\nconst initialState={\n    orders:[],\n    ordersLoading:false,\n    ordersLoaded:false\n}\n\nexport default function(state=initialState,action){\n    const {payload}=action; //destructuring action\n    switch(action.type){\n        case GET_ORDER:\n            return{\n                ...state,\n                orders:payload,\n                ordersLoading:false,\n                ordersLoaded:true\n           };\n           case DELETE_ORDER:\n            return{\n                ...state,\n                orders:state.orders.filter(order=> order.id!==action.payload)\n\n           };\n        //    case DELETE_SELECTED_ITEM:\n        //        console.log(\"Action Payload:\",action.payload);\n        //     return{\n        //             ...state,\n        //             orders:state.orders.filter(order=> \n        //                 {\n        //                     // console.log(\"Action::\",action.payload);\n        //                     for(var id in action.payload)\n        //                     if(order.id!==id)\n        //                         return false;\n        //                     return true;\n        //                 }\n        //          )\n\n        //    };\n           case ADD_ORDER:\n            return{\n                ...state,\n                orders:[...state.orders,payload]\n\n           };\n        case ORDERS_LOAD:\n            return{\n                ...state,\n                ordersLoading:true,\n                ordersLoaded:false\n            };\n            case UPDATE_ORDER:\n            return{\n                ...state,\n               orders:state.orders.map((order)=>{\n                   if(order.id===action.payload.id){\n                       const updatedItem={\n                           ...order,\n                           payment:action.payload.payment,\n                           total:action.payload.total,\n                           quantity:action.payload.quantity,\n                        \n                       }\n                       return updatedItem;\n                   }\n                   return order;\n               }),\n               ordersLoading:false,\n                ordersLoaded:true\n               \n\n            }; \n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\errorReducer.js",["300"],"import  { GET_ERRORS,CLEAR_ERRORS } from '../action/types';\n\nconst initialState={\n    msg:{},\n    status:null,\n    id:null\n}\n\nexport default function(state=initialState,action){\n    switch(action.type){\n        case GET_ERRORS:\n            return {\n                msg:action.payload.msg,\n                status:action.payload.status,\n                id:action.payload.id\n            };\n        case CLEAR_ERRORS:\n            return{\n                msg:{},\n                status:null,\n                id:null\n            };\n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\reducer\\customerReducer.js",["301"],"\nimport  {UPDATE_CUSTOMER,GET_CUSTOMER,ADD_CUSTOMER,DELETE_CUSTOMER, CUSTOMERS_LOAD} from '../action/types';\n\nconst initialState={\n    customers:[],\n    customersLoading:false,\n    customersLoaded:false\n}\n\nexport default function(state=initialState,action){\n   \n    switch(action.type){\n        case GET_CUSTOMER:\n            return{\n                ...state,\n                customers:action.payload,\n                customersLoading:false,\n                customersLoaded:true\n           };\n           case DELETE_CUSTOMER:\n            return{\n                ...state,\n                customers:state.customers.filter(customer=> customer.id!==action.payload)\n\n           };\n        //    case DELETE_SELECTED_ITEM:\n        //        console.log(\"Action Payload:\",action.payload);\n        //     return{\n        //             ...state,\n        //             customers:state.customers.filter(order=> \n        //                 {\n        //                     // console.log(\"Action::\",action.payload);\n        //                     for(var id in action.payload)\n        //                     if(order.id!==id)\n        //                         return false;\n        //                     return true;\n        //                 }\n        //          )\n\n        //    };\n           case ADD_CUSTOMER:\n            return{\n                ...state,\n                customers:[...state.customers,action.payload]\n\n           };\n        case CUSTOMERS_LOAD:\n            return{\n                ...state,\n                customersLoading:true,\n                customersLoaded:false\n            };\n            case UPDATE_CUSTOMER:\n            return{\n                ...state,\n               customers:state.customers.map((order)=>{\n                   if(order.id===action.payload.id){\n                       const updatedItem={\n                           ...order,\n                           name:action.payload.name,\n                           description:action.payload.description,\n                           manufacturer:action.payload.manufacturer,\n                           price:action.payload.price,\n                           stock:action.payload.stock,\n                           rating:action.payload.rating,\n                           editUser:order.editUser.push(action.payload.user),\n                       }\n                       return updatedItem;\n                   }\n                   return order;\n               }),\n               customersLoading:false,\n                customersLoaded:true\n               \n\n            }; \n        default:\n            return state;\n    }\n}","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\AddProduct.js",["302","303","304","305","306"],"import React,{Component} from 'react';\r\nimport {Col, Card, Button, Row,Form,Container, InputGroup,Spinner, Tooltip} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {addItem} from '../../action/itemAction';\r\nimport {getCategories} from '../../action/categoryAction';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport default_product from '../../assets/images/default-pro.jpg'\r\nimport {  Prompt } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {  faIndustry, faShoppingBag, faStar, faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst schemaPro = yup.object({\r\n    name: yup.string().min(3, 'Name must be at least 3 characters').max(24, 'Name can be maximum  of 24 characters').required(),\r\n    description: yup.string().required(),\r\n    manufacturer: yup.string().min(3, 'MunuFacturer must be at least 3 characters').max(15, 'Manufacturer can be maximum of 15 characters').required(),\r\n    price: yup.number().positive().integer().min(1, \"Price Should be More Than 1\").max(500000, \"Price Should be Less Than 500K\"),\r\n    stock: yup.number().integer().min(1, \"Stock Should be More Than 1\").max(1000, \"Stock Should be Less Than 1K\"),\r\n    category: yup.number().positive().integer().min(1,\"Choose Any Category\"),\r\n\r\n})\r\n\r\nclass AddProduct extends Component {\r\n  // constructor\r\n  state={\r\n    modal:false,   // modal for adding item is false initially\r\n    msg:null,\r\n    isBlocking:false,\r\n    imageURL:'',\r\n    name:\"\",\r\n    description:\"\",\r\n    manufacturer:\"\",\r\n    price:'',\r\n    stock:'',\r\n    img:\"\",\r\n    category:0,\r\n    categories:this.props.categories,\r\n    \r\n};\r\n\r\n\r\ncomponentDidMount() {\r\n\r\n  // this.props.history.goForward();\r\n  this.setState({categories:this.props.categories})\r\n  \r\n  window.addEventListener('beforeunload', this.beforeunload.bind(this));\r\n}\r\n\r\n\r\n\r\ncomponentDidUpdate(prevProps){\r\n\r\n  \r\n\r\n    const {error,isAuthenticated}=this.props;\r\n    if(error!==prevProps.error){\r\n        if(error.id===\"LOGIN_FAIL\"){\r\n            this.setState({msg:error.msg.msg});\r\n        }\r\n        else{\r\n            this.setState({msg:null});\r\n        }\r\n    }\r\n\r\n\r\n    if (this.props.isBlocking) {\r\n      window.onbeforeload = () => true\r\n    } else {\r\n      window.onbeforeunload = undefined\r\n    }\r\n    \r\n}\r\n\r\nbeforeunload(e) {\r\n  if (this.props.isBlocking) {\r\n    e.preventDefault();\r\n    e.returnValue = true;\r\n  }\r\n}\r\n\r\ncomponentWillUnmount() {\r\n  window.removeEventListener('beforeunload', this.beforeunload.bind(this));\r\n}\r\n\r\n\r\nstatic propTypes={\r\n    isAuthenticated:PropTypes.bool,\r\n    error:PropTypes.object.isRequired,\r\n    login:PropTypes.func.isRequired,\r\n    clearErrors:PropTypes.func.isRequired\r\n}\r\n\r\ntoggle=()=>{  \r\n    this.props.clearErrors();\r\n    console.log(this.state.modal)\r\n    this.setState({\r\n        modal:!this.state.modal\r\n    })\r\n}\r\n\r\n\r\nencodeImageFileAsURL=()=> {\r\n  console.log(\"image uploading func. called\");\r\n  var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n  if (filesSelected.length > 0) {\r\n    var fileToLoad = filesSelected[0];\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = (fileLoadedEvent)=> {\r\n      var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n\r\n      var newImage = document.createElement('img');\r\n      newImage.src = srcData;\r\n      this.setState({imageURL:newImage.src});\r\n      // console.log(\"ImageURL:\",this.state.imageURL);\r\n     \r\n    }\r\n    fileReader.readAsDataURL(fileToLoad);\r\n  }\r\n\r\n}\r\nonChange=(e)=>{\r\n    this.setState({[e.target.name]:e.target.value})\r\n}\r\n  render() {\r\n    var isLoaded=this.props.isLoaded;\r\n    // console.log(\"user from AddProduct::\",this.props.user.email);\r\n    return (\r\n      <div className=\"content\">\r\n        <Container fluid>\r\n          <Prompt\r\n                when={this.state.isBlocking}\r\n                message={(location)=> `Are You Sure Want To Go To ${location.pathname}`}\r\n/> \r\n          <Row>\r\n            <Col md={6}>\r\n<Card style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\r\n  <Card.Header>\r\n    <p style={{fontSize:'1.5rem',fontWeight:'bold',color:'#3b44c1'}}>Create a Product</p>\r\n  </Card.Header>    \r\n  <Card.Body>\r\n  <Formik\r\n  validationSchema={schemaPro}\r\n \r\n\r\n  initialValues={{\r\n    name:\"\",\r\n    description:\"\",\r\n    manufacturer:\"\",\r\n    price:'',\r\n    stock:'',\r\n    img:\"\",\r\n    category:0,\r\n    // createdBy:'Admin',\r\n    // rank:0,\r\n  }}\r\n  onSubmit={(values)=>{ \r\n    console.log(\"onSUbmit\");\r\n    const {name,description,manufacturer,price,stock,category}=values;\r\n    console.log(\"On Submit Called\",name);\r\n    // this.encodeImageFileAsURL();\r\n    \r\n    const user=this.props.user;\r\n\r\n    var Category=this.props.categories.filter(\r\n      function (cat) {\r\n        if(cat.id ===parseInt(category))return cat.name \r\n      }\r\n    )\r\n    \r\n    let CategoryName=Category[0].name;\r\n    let img=this.state.imageURL;\r\n    console.log(\"Image:\",img);\r\n    const product={\r\n      name,description,manufacturer,price,stock,img,CategoryName,user\r\n    }\r\n  //  console.log(\"Name:\",name,\" Des:\",description,\" Manu:\",manufacturer,\" price:\",price,\" Stock:\",stock,\" Img:\",img,\"  Cat\",CategoryName,\" User:\",user);\r\n    this.props.addItem(product);\r\n    this.setState({isBlocking:false});\r\n    this.toggle();\r\n   }\r\n }\r\n>\r\n  {({\r\n    handleSubmit,\r\n    handleChange,\r\n    values,\r\n    errors,\r\n     }) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      \r\n      \r\n      <Form.Row>\r\n      <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n      \r\n          <Form.Label>Product Name</Form.Label>\r\n          \r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Product Name\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n              isInvalid={!!errors.name}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.name}\r\n            </Form.Control.Feedback>\r\n          \r\n        </Form.Group>\r\n        </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n          <Form.Label>Price</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">₹</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Price\"\r\n            name=\"price\"\r\n            value={values.price}\r\n           onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.price}\r\n          />\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.price}\r\n          </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n          <Form.Label>Stock</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Quantity\"\r\n            name=\"stock\"\r\n            value={values.stock}\r\n           onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.stock}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.stock}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik04\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n          <Form.Label>Manufacturer</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Manufacturer\"\r\n            name=\"manufacturer\"\r\n            value={values.manufacturer}\r\n           onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.manufacturer}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.manufacturer}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik05\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control\r\n          as=\"textarea\"\r\n            type=\"textarea\"\r\n            placeholder=\"Description\"\r\n            name=\"description\"\r\n            value={values.description}\r\n           onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.description}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.description}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"5\" controlId=\"validationFormik06\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n          <Form.Label>Select Category</Form.Label>\r\n          <Form.Control\r\n            as=\"select\"\r\n            // type=\"password\"\r\n            placeholder=\"\"\r\n            name=\"category\"\r\n            value={values.category}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.category}\r\n            \r\n          >\r\n              <option value=\"0\">Choose Category</option>\r\n              {this.props.categories.map((category)=>(\r\n                    <option value={category.id}>{category.name}</option>\r\n\r\n              ))}\r\n             \r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.category}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group as={Col} md=\"7\" controlId=\"validationFormik07\" style={{width:'92%',paddingLeft:'2rem'}}>\r\n            <div className=\"mb-3\">\r\n                <Form.File id=\"formcheck-api-regular\">\r\n                <Form.File.Label>Product Image</Form.File.Label>\r\n                <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                </Form.File>\r\n            </div>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n      <Form.Group style={{width:'92%',paddingLeft:'2rem'}}>\r\n      <Button  type=\"submit\">Submit</Button>\r\n      </Form.Group>\r\n    </Form>\r\n  )}\r\n</Formik>\r\n</Card.Body>\r\n</Card>\r\n\r\n                        </Col>\r\n\r\n\r\n\r\n\r\n            <Col md={4}>\r\n            <Card className=\"product-card\" style={{ width:'19rem'}}>\r\n                   <Card.Header>\r\n                     <div>\r\n                       <h7 style={{fontSize:'20px',color:'gray'}}><b>Demo Of New Product</b></h7>\r\n                     </div>\r\n                   </Card.Header>\r\n                   <Card.Img top style={{height:'8rem',marginLeft:'3.5rem',marginTop:'1rem',width:'12rem'}} src={this.state.imageURL?this.state.imageURL:default_product} alt=\"Card image cap\" />\r\n                      <Card.Body style={{display:'flex',flexDirection:'column',paddingLeft:'3rem',maxWidth:'30rem'}}>\r\n                                                                           \r\n                        <Card.Title><b>{this.state.name}</b></Card.Title>\r\n                        <Card.Subtitle style={{marginLeft:'0rem'}}>\r\n                        {/* <Row>\r\n                                <span style={{color:'#3b44c1',fontSize:'.8rem'}}>{this.state.manufacturer}</span>\r\n                            </Row> */}\r\n                            {/* <Row>\r\n                                <h3 style={{margin:'0rem'}}>{this.state.name}</h3 >\r\n                            </Row> */}\r\n                            <Row style={{display:'flex',alignItems:'center'}}>\r\n                             \r\n                                <h4  style={{display:this.state.price?'flex':'none',margin:'0rem 0rem',fontWeight:'bold',fontSize:'16px'}}>₹{this.state.price}</h4>\r\n                                <p style={{display:this.state.rating?'':'none',margin:'0 0 0 .5rem',borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'12px'}}>{this.state.rating?this.state.rating:\"0\"} <FontAwesomeIcon  icon={faStar}/></p> \r\n                             \r\n                            </Row>\r\n                            {/* <Row style={{display:'flex',fontSize:'12px'}}>\r\n                            </Row> */}\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:this.state.stock?'flex':'none'}}> <h7 style={{color:'gray',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faShoppingBag}/><b style={{marginRight:'.2rem'}}>Available Stock:</b></h7><span style={{color:this.state.stock>=10?'#1bc943':'#f83245',borderRadius:'5px',border:this.state.stock>=10?'1px solid #1bc943':' 1px solid #f83245',background:this.state.stock>=10?'#e5f9ed':'#fff5f6',padding:'.0rem .3rem'}}><b>{this.state.stock}</b></span>\r\n                            </div></Row>\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:this.state.isManufacturer?'flex':'none'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faUser}/><b style={{marginRight:'.2rem'}}>Added By:</b></h7><span><b>{this.state.user?this.state.user.name:null}</b></span>\r\n                           </div> </Row>\r\n                            <Row style={{textOverflow:'none',fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:this.state.manufacturer?'flex':'none'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faIndustry}/><b style={{marginRight:'.2rem'}}>Manufacturer:</b></h7><span><b>{this.state.manufacturer?this.state.manufacturer:null}</b></span>\r\n                           </div> </Row>\r\n                           \r\n                        </Card.Subtitle>\r\n                       \r\n                      </Card.Body>\r\n                     \r\n                      {/* <div className=\"bottom-button\" >\r\n                        <UpdateProductModal isAuthenticated={this.props.isAuthenticated} product={product}/>\r\n                      {this.props.isAuthenticated?<Button variant=\"danger\" size=\"sm\" style={{marginLeft:'1rem'}} onClick={()=>{this.props.deleteItem(this.state.id)}}><FontAwesomeIcon icon={faTrashAlt}/></Button>      \r\n                        :\r\n                        <div>\r\n                        <OverlayTrigger\r\n                            placement=\"right\"\r\n                            overlay={<Tooltip id=\"button-tooltip-2\">Delete</Tooltip>}>\r\n                                \r\n                        <Button disabled variant=\"danger\" size=\"sm\" style={{marginLeft:'1rem'}} onClick={()=>{this.props.deleteItem(this.state.id)}}><FontAwesomeIcon icon={faTrashAlt}/></Button>      \r\n                            \r\n                        </OverlayTrigger>\r\n                    </div>\r\n                                \r\n                          }\r\n                        </div> */}\r\n                    </Card>\r\n\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    categories:state.category.categories,\r\n        user:state.auth.user,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        error:state.error\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,{clearErrors,addItem,getCategories})(AddProduct);\r\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\UpdateProduct.js",["307","308","309","310","311","312"],"import React,{Component} from 'react';\r\nimport {Col, Card, Button, Row,Form,Container, InputGroup,Spinner, Tooltip} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport {updateItem} from '../../action/itemAction';\r\nimport {getCategories} from '../../action/categoryAction';\r\nimport {clearErrors}  from '../../action/errorActions';\r\nimport {Formik} from 'formik';\r\nimport * as yup from 'yup';\r\nimport default_product from '../../assets/images/default-pro.jpg'\r\nimport { NavLink, Prompt, withRouter } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBoxes, faCalendarAlt, faIndustry, faShoppingBag, faStar, faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Product Schema Formik Form Validation Using Yup \r\nconst schemaPro = yup.object({\r\n    name: yup.string().min(3, 'Name must be at least 3 characters').max(24, 'Password can be maximum 20 characters').required(),\r\n    description: yup.string().required(),\r\n    manufacturer: yup.string().required(),\r\n    price: yup.number().positive().integer().min(1, \"Price Should be More Than 1\").max(500000, \"Price Should be Less Than 500K\"),\r\n    stock: yup.number().integer().min(1, \"Stock Should be More Than 1\").max(1000, \"Stock Should be Less Than 1K\"),\r\n    rating: yup.number().min(1, \"Rating Should be More Than 1\").max(5, \"Rating Should be Less Than 5\"),\r\n    \r\n\r\n})\r\n\r\nclass UpdateProduct extends Component {\r\n  // constructor\r\n    product=this.props.history.location.state.product;\r\n  state={\r\n    modal:false,   // modal for adding item is false initially\r\n    msg:null,\r\n    isBlocking:false,\r\n    imageURL:this.product.img,\r\n    id:this.product.id,\r\n    name:this.product.name,\r\n    description:this.product.description,\r\n    manufacturer:this.product.manufacturer,\r\n    price:this.product.price,\r\n    stock:this.product.stock,\r\n    rating:this.product.rating,\r\n    img:\"\",\r\n    category:0,\r\n    pcategory:this.product.category,\r\n    categories:this.props.categories\r\n};\r\ncomponentDidMount(){\r\n  this.setState({categories:this.props.categories})\r\n}\r\n\r\ncomponentDidUpdate(prevProps){\r\n    const {error,isAuthenticated}=this.props;\r\n    if(error!==prevProps.error){\r\n        if(error.id===\"LOGIN_FAIL\"){\r\n            this.setState({msg:error.msg.msg});\r\n        }\r\n        else{\r\n            this.setState({msg:null});\r\n        }\r\n    }\r\n}\r\nstatic propTypes={\r\n    isAuthenticated:PropTypes.bool,\r\n    error:PropTypes.object.isRequired,\r\n    login:PropTypes.func.isRequired,\r\n    clearErrors:PropTypes.func.isRequired\r\n}\r\n\r\ntoggle=()=>{  \r\n    this.props.clearErrors();\r\n    console.log(this.state.modal)\r\n    this.setState({\r\n        modal:!this.state.modal\r\n    })\r\n}\r\n\r\n// Function For Converting Image To Base-64\r\nencodeImageFileAsURL=()=> {\r\n  console.log(\"image uploading func. called\");\r\n  var filesSelected = document.getElementById(\"inputFileToLoad\").files;\r\n  if (filesSelected.length > 0) {\r\n    var fileToLoad = filesSelected[0];\r\n    var fileReader = new FileReader();\r\n    fileReader.onload = (fileLoadedEvent)=> {\r\n      var srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n\r\n      var newImage = document.createElement('img');\r\n      newImage.src = srcData;\r\n      this.setState({imageURL:newImage.src});\r\n      // console.log(\"ImageURL:\",this.state.imageURL);\r\n     \r\n    }\r\n    fileReader.readAsDataURL(fileToLoad);\r\n  }\r\n\r\n}\r\n\r\nonChange=(e)=>{\r\n    this.setState({[e.target.name]:e.target.value})\r\n}\r\n  render() {\r\n    var isLoaded=this.props.isLoaded;\r\n    \r\n    console.log(\"History:\",this.props.history.location.state);\r\n    // console.log(\"user from UpdateProduct::\",this.props.user.email);\r\n    return (\r\n      <div className=\"content\">\r\n        <Container fluid>\r\n\r\n\r\n          <Prompt\r\n                when={this.state.isBlocking}\r\n                message={(location)=> `Are You Sure Want To Go To ${location.pathname}`}\r\n/> \r\n          <Row>\r\n            <Col md={6}>\r\n<Card style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\r\n  <Card.Header>\r\n    <p style={{fontSize:'1.5rem',fontWeight:'bold',color:'#3b44c1'}}>Update Product</p>\r\n  </Card.Header>    \r\n  <Card.Body>\r\n  <Formik\r\n  validationSchema={schemaPro}\r\n \r\n  initialValues={{\r\n    name:this.state.name,\r\n    description:this.state.description,\r\n    manufacturer:this.state.manufacturer,\r\n    price:this.state.price,\r\n    stock:this.state.stock,\r\n    img:this.state.imageURL,\r\n    rating:this.state.rating?this.state.rating:0\r\n    \r\n    // createdBy:'Admin',\r\n    // rank:0,\r\n  }}\r\n  onSubmit={(values)=>{ \r\n    console.log(\"onSUbmit\");\r\n    const {name,description,manufacturer,price,stock,rating}=values;\r\n    console.log(\"On Submit Called\",name);\r\n    // this.encodeImageFileAsURL();\r\n    \r\n    const user=this.props.user;\r\n    let img=this.state.imageURL;\r\n    let id=this.state.id;\r\n    // console.log(\"Image:\",img);\r\n    const product={\r\n        id,name,description,manufacturer,price,stock,rating,user,img\r\n    }\r\n    this.setState({isBlocking:false})\r\n  //  console.log(\"Name:\",name,\" Des:\",description,\" Manu:\",manufacturer,\" price:\",price,\" Stock:\",stock,\" Img:\",img,\"  Cat\",CategoryName,\" User:\",user);\r\n    this.props.updateItem(product);\r\n    this.toggle();\r\n   }\r\n }\r\n>\r\n  {  ({ handleSubmit, handleChange, values, errors}) => (\r\n    <Form noValidate onSubmit={handleSubmit}>\r\n      <Form.Row>\r\n      <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\r\n          <Form.Label>Product Name</Form.Label>\r\n          \r\n            <Form.Control\r\n              type=\"text\"\r\n              placeholder=\"Product Name\"\r\n              aria-describedby=\"inputGroupPrepend\"\r\n              name=\"name\"\r\n              value={values.name}\r\n              onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n              isInvalid={!!errors.name}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n              {errors.name}\r\n            </Form.Control.Feedback>\r\n          \r\n        </Form.Group>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\r\n          <Form.Label>Price</Form.Label>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"inputGroupPrepend\">₹</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Price\"\r\n            name=\"price\"\r\n            value={values.price}\r\n            onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.price}\r\n          />\r\n\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.price}\r\n          </Form.Control.Feedback>\r\n          </InputGroup>\r\n        </Form.Group>\r\n      </Form.Row>\r\n\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\r\n          <Form.Label>Stock</Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"Quantity\"\r\n            name=\"stock\"\r\n            value={values.stock}\r\n            onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.stock}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.stock}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n      </Form.Row>\r\n\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik04\">\r\n          <Form.Label>Manufacturer</Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            placeholder=\"Manufacturer\"\r\n            name=\"manufacturer\"\r\n            value={values.manufacturer}\r\n            onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.manufacturer}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.manufacturer}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n      </Form.Row>\r\n\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"12\" controlId=\"validationFormik05\">\r\n          <Form.Label>Description</Form.Label>\r\n          <Form.Control\r\n          as=\"textarea\"\r\n            type=\"textarea\"\r\n            placeholder=\"Description\"\r\n            name=\"description\"\r\n            value={values.description}\r\n            onChange={(e)=>{this.setState({isBlocking:e.target.value.length>0});handleChange(e);this.onChange(e)}} \r\n            isInvalid={!!errors.description}\r\n          />\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.description}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n        <Form.Row>\r\n        <Form.Group as={Col} md=\"5\" controlId=\"validationFormik06\">\r\n          <Form.Label>Rating</Form.Label>\r\n          <Form.Control\r\n           \r\n            type=\"number\"\r\n            placeholder={values.rating}\r\n            name=\"rating\"\r\n            value={values.rating}\r\n            onChange={handleChange}\r\n            isInvalid={!!errors.rating}\r\n            \r\n          >\r\n              \r\n             \r\n          </Form.Control>\r\n          <Form.Control.Feedback type=\"invalid\">\r\n            {errors.rating}\r\n          </Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group as={Col} md=\"7\" controlId=\"validationFormik07\">\r\n            <div className=\"mb-3\">\r\n                <Form.File id=\"formcheck-api-regular\">\r\n                <Form.File.Label>Product Image</Form.File.Label>\r\n                <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\r\n                </Form.File>\r\n            </div>\r\n        </Form.Group>\r\n\r\n      </Form.Row>\r\n      \r\n      <Button type=\"submit\">Submit</Button>\r\n    </Form>\r\n  )}\r\n</Formik>\r\n</Card.Body>\r\n</Card>\r\n</Col>\r\n\r\n\r\n\r\n\r\n            <Col md={4}>\r\n            <Card className=\"product-card\" style={{ width:'19rem',margin:'1rem'}}>\r\n                   <Card.Header>\r\n                     <div>\r\n                       <h7 style={{fontSize:'20px',color:'gray'}}><b>Selected Product</b></h7>\r\n                     </div>\r\n                   </Card.Header>\r\n                   <Card.Img top style={{height:'8rem',marginLeft:'3.5rem',marginTop:'1rem',width:'12rem'}} src={this.state.imageURL?this.state.imageURL:default_product} alt=\"Card image cap\" />\r\n                      <Card.Body style={{display:'flex',flexDirection:'column',paddingLeft:'3rem',maxWidth:'30rem'}}>\r\n                                                                           \r\n                        <Card.Title><b>{this.state.name}</b></Card.Title>\r\n                        <Card.Subtitle style={{marginLeft:'0rem'}}>\r\n                        {/* <Row>\r\n                                <span style={{color:'#3b44c1',fontSize:'.8rem'}}>{this.state.manufacturer}</span>\r\n                            </Row> */}\r\n                            {/* <Row>\r\n                                <h3 style={{margin:'0rem'}}>{this.state.name}</h3 >\r\n                            </Row> */}\r\n                            <Row style={{display:'flex',alignItems:'center'}}>\r\n                             \r\n                                <h4  style={{display:this.state.price?'flex':'none',margin:'0rem 0rem',fontWeight:'bold',fontSize:'16px'}}>₹{this.state.price}</h4>\r\n                                <p style={{margin:'0 0 0 .5rem',borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'12px'}}>{this.state.rating?this.state.rating:\"0\"} <FontAwesomeIcon  icon={faStar}/></p> \r\n                             \r\n                            </Row>\r\n                            {/* <Row style={{display:'flex',fontSize:'12px'}}>\r\n                            </Row> */}\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:this.state.stock?'flex':'none'}}> <h7 style={{color:'gray',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faShoppingBag}/><b style={{marginRight:'.2rem'}}>Available Stock:</b></h7><span style={{color:this.state.stock>=10?'#1bc943':'#f83245',borderRadius:'5px',border:this.state.stock>=10?'1px solid #1bc943':' 1px solid #f83245',background:this.state.stock>=10?'#e5f9ed':'#fff5f6',padding:'.0rem .3rem'}}><b>{this.state.stock}</b></span>\r\n                            </div></Row>\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:'flex'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faUser}/><b style={{marginRight:'.2rem'}}>Added By:</b></h7><span><b>{this.props.history.location.state.user?this.props.history.location.state.user.fname+\" \"+this.props.history.location.state.user.lname:null}</b></span>\r\n                           </div> </Row>\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:'flex'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faBoxes}/><b style={{marginRight:'.2rem'}}>Category:</b></h7><span><b>{this.state.pcategory}</b></span>\r\n                           </div> </Row>\r\n                            <Row style={{fontSize:\"12px\",paddingBottom:'.2rem'}}>\r\n                               <div style={{display:'flex'}}> <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faIndustry}/><b style={{marginRight:'.2rem'}}>Manufacturer:</b></h7><span><b>{this.state.manufacturer}</b></span>\r\n                           </div> </Row>\r\n                           \r\n                        </Card.Subtitle>\r\n                       \r\n                      </Card.Body>\r\n                    \r\n                    </Card>\r\n\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n  return {\r\n    categories:state.category.categories,\r\n        user:state.auth.user,\r\n        isAuthenticated:state.auth.isAuthenticated,\r\n        error:state.error\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,{clearErrors,updateItem,getCategories})(withRouter(UpdateProduct));\r\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductListPage.js",["313","314","315"],"import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { getItems,deleteItem } from \"../../action/itemAction\";\nimport ProductList from './ProductList';\n\n\nconst styles = {\n  mediaItem: {\n    border: \"1px solid gray\",\n    backgroundColor: \"#f5f5f5\",\n\n  },\n  mediaItemButtons: {\n    paddingTop: \"5px\",\n    paddingBottom: \"5px\"\n  }\n};\n\nclass ProductListPage extends Component {\n  state = {\n    products: this.props.products,\n    pageOfItems: [],\n    Index1:0,\n    Index2:8,\n\n  };\n  \n\n  componentDidMount(){\n this.props.getItems()\n    this.setState({products:this.props.products})\n \n  }\n\n  handleView=()=>{\n    if(!this.props.isAuthenticated){\n      \n    }\n  }\n  onChangePage(pageOfItems) {\n    // update state with new page of items\n    this.setState({ pageOfItems: pageOfItems });\n\n}\n\n  \n    render(){\n      \n      const maxlimit=100;\n      var products=this.props.products;\n      \n      products=products.slice(this.state.Index1,this.state.Index2)\n     \n    \n        return (\n            <div>\n              <ProductList/>  \n            </div>\n          );\n    }\n  \n};\nconst mapStateToProps= state=>{\n    return({\n        isAuthenticated:state.auth.isAuthenticated,\n        isLoading:state.auth.isLoading,\n        user:state.auth.user,\n        products:state.item.items,\n        itemsLoading:state.item.itemsLoading,\n        itemsLoaded:state.item.itemsLoaded\n        // error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{getItems,deleteItem})(ProductListPage);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\Product.js",["316","317","318"],"import { faCalendarAlt, faCartPlus, faChevronDown, faShoppingBag, faShoppingBasket, faStar,  faUser } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Button, Card, Col, Container, Dropdown, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useHistory,useParams } from 'react-router-dom';\nimport './Product.css';\nimport defaultPro from '../../assets/images/default-pro.jpg';\nimport {loginModalOpen,loadUser} from '../../action/authActions';\nimport {rankItem} from '../../action/itemAction';\n\nconst Product=(props)=>{\n    const history=useHistory();\n    var params=useParams();\n    const [product,setItem]=useState({});\n\n\n \n\n    useEffect(()=>{\n        props.loadUser();\n        if(!props.isAuthenticated){\n            console.log(\"From Product to Home\");\n            props.history.push('/')\n            props.loginModalOpen(true);\n           }\n           else{\n        setItem(history.location.state.item);\n        // console.log(\"Items\",history.location.state.item);\n        // console.log(\"User\",history.location.state.user);\n        props.rankItem({id:history.location.state.item.id});\n    }\n    },[history,props.isAuthenticated]);\n    // useEffect(()=>{\n    //     //       if(parseInt(localStorage.getItem(history.location.state.item.id))!==parseInt(history.location.state.user._id)){\n    //             // console.log(\"User1\",history.location.state.user._id,localStorage.getItem(history.location.state.item.id));\n    //     //         localStorage.setItem(history.location.state.item.id,history.location.state.user._id);\n               \n    //     //     }\n            \n    //       },[]);\n    return(\n     <>\n        <div>\n            <Container style={{marginTop:'1rem'}}>\n                {/* <Row>\n                    <Card><h1>{params.name}</h1></Card>\n                </Row> */}\n                <Row>\n                    <Col sm={5}>\n\n                       <Card className=\"p-img-card\">\n                       \n                       <img className=\"p-img\" src={product.img?product.img:defaultPro}/>\n                      \n                        \n                       </Card>\n                       <Row>\n                           <div class=\"Add-to-cart-action-div\">\n                                <Button><FontAwesomeIcon style={{paddingRight:'.3rem'}} icon={faCartPlus}/>Add To Cart</Button>\n                                <Button><FontAwesomeIcon style={{paddingRight:'.3rem'}} icon={faShoppingBasket}/>Buy Now</Button>\n                            </div>\n                        </Row>\n                    </Col>\n                    <Col sm={7}>\n                    <Card>\n                        <Container style={{padding:'1rem 2rem'}}>\n                            <Row>\n                                <span style={{color:'#3b44c1',fontSize:'.8rem'}}>{product.manufacturer}</span>\n                            </Row>\n                            <Row>\n                                <h3 style={{margin:'0rem'}}>{product.name}</h3 >\n                            </Row>\n                            <Row>\n                                <h4  style={{margin:'.5rem 0rem',fontWeight:'bold',fontSize:'400 !important'}}>₹{product.price}</h4>\n                            </Row>\n                            <Row style={{display:'flex'}}>\n                                <p style={{borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'.8rem'}}>{product.rating?product.rating:\"0\"} <FontAwesomeIcon  icon={faStar}/></p> <span style={{paddingLeft:'.2rem',color:'#3b44c1'}}>Ratings Out of 5</span>\n                            </Row>\n                            <Row>\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faShoppingBag}/><b style={{marginRight:'.2rem'}}>Available Stock:</b></h7><span style={{color:'green'}}><b>{product.stock}</b></span>\n                            </Row>\n                            <Row>\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faUser}/><b style={{marginRight:'.2rem'}}>Added By:</b></h7><span><b>{product.user?product.user.fname+\" \"+product.user.lname:null}</b></span>\n                            </Row>\n                            <Row>\n                                <h7 style={{color:'gray',display:'flex',alignItems:'center'}}><FontAwesomeIcon style={{marginRight:'.2rem'}} icon={faCalendarAlt}/><b style={{marginRight:'.2rem'}}>Created Date:</b></h7><span>{product.date}</span>\n                            </Row>\n                           \n                        </Container>\n                        <hr style={{marginBottom:'0rem'}}/>\n                        <Container style={{padding:'1rem 2rem'}}>\n                            <Row>\n                            <Accordion defaultActiveKey=\"1\">\n                                \n                                    <Accordion.Toggle style={{curser:'pointer'}} as={Dropdown} variant=\"link\" eventKey=\"0\">\n                                        Description <FontAwesomeIcon icon={faChevronDown}/>\n                                    </Accordion.Toggle>\n                                   \n                                    <Accordion.Collapse eventKey=\"0\">\n                                        <p> {product.description}</p>\n                                    </Accordion.Collapse>\n                                \n                                \n                            </Accordion>\n                            </Row>\n                        </Container>\n\n                       </Card>\n                    </Col>\n                </Row>\n            </Container>\n            <Container>\n                <Row>\n                    <Col sm={4}>\n                        \n                        {/* <Button>Add To Cart</Button>\n                        <Button>Buy Now</Button> */}\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n     </>   \n    )\n}\nconst mapStateToProps=state=>{\n    return{\n        isAuthenticated:state.auth.isAuthenticated\n    }\n}\nexport default connect(mapStateToProps,{rankItem,loadUser,loginModalOpen})(Product) ;","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\views\\Dashboard.js",["319","320","321"],"import React, { Component } from \"react\";\nimport ChartistGraph from \"react-chartist\";\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\";\nimport  Card  from \"../Card/Card.js\";\nimport  StatsCard  from \"../StatsCard/StatsCard.js\";\nimport {\n  legendPie,\n  responsiveSales,\n\n} from \"../Variables/Variables.js\";\nimport AnimatedCard from \"../AnimatedCard/AnimatedCard\";\nimport { connect } from \"react-redux\";\nimport {getItems} from '../../action/itemAction';\nimport {getOrders} from '../../action/orderAction';\nimport { faCubes, faTruckLoading } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Dashboard extends Component {\n\n  state={\n\n      lowStock:0,\n      highStock:0,\n      trending:0,\n      outOfStock:0,\n      showArea:true\n  }\n\n  componentDidMount(){\n    this.props.getItems();\n\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n  \n  render() {\n    var products=this.props.products;\n\n    var highStock=0;\n    var lowStock=0;\n    var OutOfStock=0;\n    var trending=0;\n\n    var optionsSales = {\n      low: 0,\n      high: this.props.products.length/2*3,\n      showArea: this.state.showArea,\n      height: \"245px\",\n      axisX: {\n        showGrid: false\n      },\n      lineSmooth: true,\n      showLine: true,\n      showPoint: true,\n      fullWidth: true,\n      chartPadding: {\n        right: 50\n      }\n    };\n    var legendSales = {\n      names: [\"Orders\", \"Product Added\"],\n      types: [\"info\", \"danger\"]\n    };\n\n\n    const OrderDate=()=>{\n      let labels=[]\n      let Orders=[]\n      let Products=[]\n      var date = new Date();\n      var dates=[]\n      function pad(n) {\n          return (n < 10) ? (\"0\" + n) : n;\n      }\n      for (let i = 6; i >=0; i--){\n        var tempDate = new Date();\n        tempDate.setDate(date.getDate()-i);\n        console.log(\"Current date:\",tempDate.toLocaleDateString());\n        var str = pad(tempDate.getFullYear()) + \"-\" + pad(tempDate.getMonth()+1)+ \"-\" + pad(tempDate.getDate());\n        var shortdate=tempDate.toLocaleDateString().split(\"/\");\n        dates.push(shortdate[0]+\"/\"+shortdate[1])\n        labels.push(str);  \n      }\n\n    //  console.log(\"Dates:\",labels);\n\n      if(this.props.orders.length!==0){\n          for(let i=0;i<labels.length;i++){\n            let j=0;\n            this.props.orders.map(order=>{\n              if(order.date.split(\" \")[0]===labels[i])\n                   j+=1\n                   return\n            })\n            Orders.push(j);\n          }\n      }\n      if(this.props.products.length!==0){\n          for(let i=0;i<labels.length;i++){\n            let j=0;\n            this.props.products.map(product=>{\n              if(product.date.split(\" \")[0]===labels[i])\n                   j+=1\n                   return\n            })\n            Products.push(j);\n          }\n      }\n     return {labels:dates,series:[Orders,Products]}\n    }\n    // OrderDate();\n    const stock=()=>{\n      // console.log(\"Stock:\",products);\n      products.map(product=>{\n        if(parseInt(product.stock)>100)\n          highStock+=1;\n        else if(parseInt(product.stock)===0) \n        OutOfStock+=1;\n        else if(parseInt(product.stock)<10)\n          lowStock+=1;\n        if(product.rank && parseInt(product.rank)>0)\n        trending+=1;\n      })\n     \n    }\n    stock();\n    var total=highStock+ trending+ OutOfStock+lowStock;\n\n    var dataPie1 = {\n      labels: [parseInt(highStock/total*100)+\"%\", parseInt(trending/total*100)+\"%\",parseInt(OutOfStock/total*100)+\"%\",parseInt(lowStock/total*100)+\"%\"],\n      series: [highStock, trending, OutOfStock,lowStock]\n    };\n    return (\n      <div className=\"content\">\n        <AnimatedCard/>\n        <Container fluid>\n          {products.length===0?<Container><div style={{display:'flex',justifyContent:'center',alignItems:'center'}} ><Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" /></div></Container>:<>\n          <Row>\n            <Col lg={3} sm={6}>\n              <StatsCard\n                color=\"#87CB16\"\n                bigIcon={<i class=\"fa fa-stack-overflow text-success\" ></i>}\n                statsText=\"High Stock\"\n                statsValue={highStock}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n              color=\"#1D62F0\"\n                bigIcon={<i class=\"fa fa-bolt text-primary\"></i>}\n                statsText=\"Trending\"\n                statsValue={trending}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n              color=\"#FF4A55\"\n                bigIcon={<i class=\"fa fa-exclamation-triangle text-danger\"></i>}\n                statsText=\"Out Of Stock\"\n                statsValue={OutOfStock}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col lg={3} sm={6}>\n              <StatsCard\n              color=\"#1DC7EA\"\n                bigIcon={<i class=\"fa fa-info text-info\"></i>}\n                statsText=\"Low Stock(<10)\"\n                statsValue={lowStock}\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n          </Row></>}\n          \n          <Row>\n            <Col md={8}>\n              <Card\n               icon={faTruckLoading}\n                statsIcon=\"fa fa-history\"\n                id=\"chartHours\"\n                title=\"Inventory Statistics\"\n                category=\"Weekly Performance of Order/Products\"\n                stats=\"Updated 3 minutes ago\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={OrderDate()}\n                      type=\"Line\"\n                      options={optionsSales}\n                      responsiveOptions={responsiveSales}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendSales)}</div>\n                }\n              />\n            </Col>\n            <Col md={4}>\n              <Card\n              icon={faCubes}\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Products Stock\"\n                category=\"Last Campaign Performance\"\n                stats=\"Updated Now\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={dataPie1} type=\"Pie\"  />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendPie)}</div>\n                }\n              />\n            </Col>\n          </Row>\n\n         \n        </Container>\n      </div>\n    );\n  }\n}\nconst mapStateToProps=state=>{\n  return{\n    orders:state.order.orders,\n    products:state.item.items\n  }\n}\nexport default connect(mapStateToProps,{getItems,getOrders})(Dashboard);\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\views\\UserProfile.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Customers\\CustomerList.js",["322","323"],"import React,{useState,useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {getCustomers,deleteCustomer} from '../../action/customerAction';\nimport {Row,Container,Col, Spinner, Card, Button} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {  faCalendar, faEnvelope, faHome, faTrash} from '@fortawesome/free-solid-svg-icons';\nimport './CustomerList.css'\nimport AddCustomerModal from './AddCustomerModal';\nimport avatar from '../../assets/images/avatar.png'\n\nconst CustomerList=(props)=>{\n    const [customers,setCustomers]=useState([]);\n    useEffect(()=>{\n        props.getCustomers();\n    },[])\n    useEffect(()=>{\n        if(props.customers.length>0){\n            setCustomers(props.customers);\n            console.log(\"Customers:\",customers);\n        }\n    },[props.customers]);\n    return(\n            <div>\n            <Card style={{margin:'1rem',padding:'1rem'}}>\n        <Row style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n            <Col sm={9}>\n                <Row>\n                    <Col style={{display:'flex',flexDirection:'column'}}><h7><b>Customers</b></h7><span style={{color:'gray'}}>Our Loving Customers</span></Col>\n                    \n                </Row>\n            </Col>\n            <Col sm={2}>\n               <AddCustomerModal/>\n            </Col>\n        </Row>\n    </Card>\n            <Container>\n               <Container>\n                   \n                    {props.customers.length===0?<Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" />:\n                   <Row>{props.customers.map((customer,key)=>(\n                       <>\n                       <div>\n                        <Card style={{width:'18rem',height:'11.5rem',margin:'1rem'}} key={key}>\n                            <Card.Header>\n\n                                <Row style={{width:'100%',display:'flex',alignItems:'center',justifyContent:'space-around'}}>{customer.img?<img alt=\"alt\" src={customer.img?customer.img:{avatar}} style={{marginRight:'1rem',textAlign:'center',color:'white',borderRadius:'50%',width:'3rem',height:'3rem',background:'#ed3f2f'}}/>:<div style={{marginRight:'1rem',textAlign:'center',padding:'.8rem',color:'white',borderRadius:'50%',width:'3rem',height:'3rem',background:'#ed3f2f'}}>{customer.fname[0]+customer.lname[0]}</div>}<h7>{customer.fname+\" \"+customer.lname}</h7><div style={{flex:1}}><Button onClick={()=>props.deleteCustomer(customer.id)} style={{float:'right'}} variant=\"danger\" size=\"sm\"><FontAwesomeIcon icon={faTrash}/></Button></div></Row>\n\n                            </Card.Header>\n                            <Card.Body style={{marginLeft:'1rem'}}>\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faEnvelope}/>{customer.email}</Row>\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faHome}/>{customer.address?customer.address.substring(0,25):''}...</Row>\n                                <Row style={{display:'flex',alignItems:'center',color:'gray'}}><FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faCalendar}/>{customer.date}</Row>\n                            </Card.Body>\n                            \n                        </Card>\n                        </div>\n                         \n                         </>\n                   ))\n\n                    }</Row>\n                    \n                    }\n                    \n                </Container>\n                </Container>\n            </div>\n\n    )\n}\n\n\nconst mapStateToProps=state=>{\n    return{\n        customers:state.customer.customers\n    }\n}\nexport default connect(mapStateToProps,{getCustomers,deleteCustomer})(CustomerList);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\OrderList.js",["324","325","326","327","328","329","330","331","332"],"import React,{useState,useEffect} from 'react';\nimport {connect} from 'react-redux'\nimport {getOrders,deleteOrder} from '../../action/orderAction';\nimport {getItems} from '../../action/itemAction';\nimport {getCustomers} from '../../action/customerAction';\nimport {NavLink} from 'react-router-dom'\nimport {Accordion, Button, Card, Col, Container,  DropdownButton, Row, Spinner, } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronCircleDown, faChevronCircleRight, faTrashAlt,faFilter, faSearch } from '@fortawesome/free-solid-svg-icons';\nimport avatar from '../../assets/images/avatar.png'\nimport EditOrderModal from './EditOrderModal';\nimport AddOrderModal from './AddOrderModal';\nimport './OrderList.css'\nconst OrderList=(props)=>{\n    \nconst [orders,setOrders]=useState([]);\nconst [q,setQ]=useState('');\nconst [isClient,setIsClient]=useState(true);\nconst [isProduct,setIsProduct]=useState(true);\nconst [isPayment,setIsPayment]=useState(true);\nconst [isTotal,setIsTotal]=useState(true);\nconst [open1,setOpen1]=useState(true);\nconst [open2,setOpen2]=useState(true);\n\n\nuseEffect(()=>{\n    props.getCustomers();\n    props.getItems();\n    props.getOrders();\n},[])\nuseEffect(()=>{ \n    if(props.orders.length!==0){\n    setOrders(props.orders)\n        // console.log(\"Order:\",props.orders);\n        // console.log(\"Order:\",props.products);\n}\n},[props.orders,props.products])\n\n\n\nconst getProductName=id=>{\n    if(props.products.length>0)\n    {\n    let product=props.products.filter(product=>product.id===id)\n    // console.log(\"Product from Order:\",product,id);\n    return product[0].name;\n    }\n    else\n    return \"Loading....\"\n}\nconst getCustomerName=id=>{\n    if(props.customers.length>0)\n    {\n    let customer=props.customers.filter(customer=>customer.id===id)\n    // console.log(\"Product from Order:\",customer,id);\n    return customer[0].fname+\" \"+customer[0].lname ;\n    }\n    else\n    return \"Loading....\"\n}\n\n\nconst getCustomerImage=id=>{\n    if(props.customers.length>0)\n    {\n    let customer=props.customers.filter(customer=>customer.id===id)\n    console.log(\"Customer:\",customer,id);\n    if(customer[0].img.length===0)\n    return avatar\n    else return customer[0].img\n    }\n    else\n    return \"Loading....\"\n}\n\n\n// const getCustomerAddress=id=>{\n//     if(props.customers.length>0)\n//     {\n//     let customer=props.customers.filter(customer=>customer.id===id)\n//     console.log(\"Product from Order:\",customer,id);\n//      return customer[0].address\n//     }\n//     else\n//     return \"Loading....\"\n// }\nconst getProductImage=id=>{\n    if(props.products.length>0)\n    {\n    let product=props.products.filter(product=>product.id===id)\n    // console.log(\"Product from Order:\",product,id);\n    return product[0].img;\n    }\n    else\n    return \"Loading....\"\n}\nconst getProductPrice=id=>{\n    if(props.products.length>0)\n    {\n    let product=props.products.filter(product=>product.id===id)\n    // console.log(\"Product from Order:\",product,id);\n    return product[0].price;\n    }\n    else\n    return \"Loading....\"\n}\nconst Search=(products)=>{    \n    \n    return (products.length!==0?products.filter(product=>\n\n           product.payment?product.payment.toLowerCase().indexOf(q.toLowerCase())!==-1 //str.includes(PATTERN)\n            // product.price.toLowerCase().indexOf(q.toLowerCase())!==-1 ||\n           \n            :''):'');\n\n    }\n\nreturn(\n    <>\n    \n    <Card style={{margin:'1rem',padding:'1rem'}}>\n        <Row style={{display:'flex',justifyContent:'space-between',alignItems:'center'}}>\n            <Col sm={8}>\n                <Row>\n                    <Col style={{display:'flex',flexDirection:'column'}}><h7><b>Orders</b></h7><span style={{color:'gray'}}>Pending/Completed Orders</span></Col>\n                    \n                </Row>\n            </Col>\n            <Col sm={2}>\n                <AddOrderModal/>\n            </Col>\n        </Row>\n    </Card>\n    <Card style={{margin:'1rem',padding:'0rem'}}>\n        <Container className=\"order-list\" >\n\n\n            <Card.Header>\n\n\n\n            <div className='header-filter'>\n                       \n                        <div className='search-bar' >\n                          <FontAwesomeIcon icon={faSearch} />\n\n                          <input type=\"text\" value={q} placeholder=\"Search Orders By Payments Only...\" onChange={(e)=>{setQ(e.target.value)}}/>\n                          \n                          \n                          </div>\n                          <div className='filter-icon'>\n                          <DropdownButton title={<FontAwesomeIcon icon={faFilter} />} className='filter-button' style={{borderRadius:'50%',background:'transparent',color:'#3c44b1',border:'none',boxShadow:'none'}}> \n                                \n                                <Row >\n         <div >\n                 <Card className=\"filter-card\" >\n\n                \n                    <Card.Body className=\"filter-body\" style={{width:'15rem',padding:'0rem'}}>\n                        {/* <Accordion defaultActiveKey=\"0\">\n                            <Card>\n                                <Accordion.Toggle style={{background:!open1?\"#fff\":'#f3f3f3'}} eventKey=\"0\" onClick={() => setOpen1(!open1)}>\n                                    <div className=\"accordion-header\" ><h6>Price</h6><FontAwesomeIcon style={{color:open1?\"red\":\"#3b44c1\"}} icon={open1?faChevronCircleRight:faChevronCircleDown} /></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body >\n                                  <div className=\"range-input\" ><span style={{color:'gray'}}><b>Min:</b></span><input  type='number' value={minRange} onChange={(e)=>setMinRange(e.target.value)}/>\n                                  </div>\n                                  <div className=\"range-input\"><span style={{color:'gray'}} ><b>Max:</b></span><input  type='number' value={maxRange} onChange={(e)=>setMaxRange(e.target.value)}/>\n                                </div></Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                           \n                            </Accordion> */}\n                            <Accordion defaultActiveKey=\"1\">\n\n                            <Card>\n                            <Accordion.Toggle  style={{background:!open2?\"#fff\":'#f3f3f3'}} eventKey=\"1\" onClick={()=>setOpen2(!open2)}>\n                                    <div className=\"accordion-header\"><h6>Customize Columns</h6><FontAwesomeIcon style={{color:open2?\"red\":\"#3b44c1\"}} icon={open2?faChevronCircleRight:faChevronCircleDown}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isClient} onChange={()=>setIsClient(!isClient)}/><h6>Client</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isProduct} onChange={()=>setIsProduct(!isProduct)}/><h6>Product</h6></Col></Row>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isTotal} onChange={()=>setIsTotal(!isTotal)}/><h6>Total</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isPayment} onChange={()=>setIsPayment(!isPayment)}/><h6>Payment</h6></Col></Row>\n                                   \n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n                           \n                           \n   \n                </Card.Body>   \n                           \n                         \n                           </Card>\n                           </div>\n         </Row>    \n                                </DropdownButton>\n                          </div>\n                         \n                   </div>\n                   \n                <Row style={{width:'105%',fontWeight:'bold',color:'#3b44c1'}}>\n                    <Col  sm={1}>Order</Col>\n                    <Col style={{display:isClient?'':'none'}} sm={3}>Client</Col>\n                    <Col style={{display:isProduct?'':'none'}} sm={2}>Product</Col>\n                    <Col style={{display:isPayment?'':'none'}} sm={2}>Payment</Col>\n                    <Col style={{display:isTotal?'':'none'}} sm={2}>Total</Col>\n                </Row>\n            </Card.Header>\n        </Container>\n         <Container className=\"order-list\">\n        {orders.length===0?<Container><div style={{display:'flex',justifyContent:'center',alignItems:'center'}} ><Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" /></div></Container>:\n            <>\n                {Search(orders).map((order,key)=>(\n                  \n                    <Card style={{padding:'0'}}>\n                       <Card.Body>\n                            <Row style={{display:'flex',alignItems:'center'}}>\n                                <Col sm={1} ><h7><b>#{key+1}</b></h7></Col>\n                                <Col style={{display:isClient?'':'none'}} sm={3} ><Row style={{display:'flex',alignItems:'center',width:'15rem'}}><img style={{borderRadius:'50%',border:'2px solid #3b44c1',height:'50px',width:'50px'}} src={getCustomerImage(order.customer_id)}/><Col style={{display:'flex',flexDirection:'column'}}><NavLink to='/admin/customers'><h7><b>{getCustomerName(order.customer_id)}</b></h7></NavLink></Col></Row></Col>\n                                <Col style={{display:isProduct?'':'none'}} sm={2} ><Row style={{display:'flex',alignItems:'center',width:'15rem'}}><img style={{height:'80px',width:'80px'}} src={getProductImage(order.product_id)}/><Col style={{display:'flex',flexDirection:'column'}}><NavLink to='/admin/products'><h7><b>{getProductName(order.product_id)}</b></h7></NavLink><span style={{color:'gray',fontSize:'12px'}}>Qty:<b>{order.quantity}</b></span></Col></Row></Col>\n                                <Col style={{display:isPayment?'':'none'}} sm={2} ><h7 style={{border:order.payment===\"Completed\"?'2px solid #1bc943':'2px solid #f83245',padding:'5px 15px',background:order.payment===\"Completed\"?'#e5f9ed':'#fff5f6',fontSize:'12px',fontWeight:'bold',color:order.payment===\"Pending\"?'#f83245':'#1bc943'}}>{order.payment}</h7></Col>\n                                <Col style={{display:isTotal?'':'none'}} sm={2} ><h7 style={{width:'10px'}}><b>₹{order.total}</b></h7></Col>\n                                <Col  sm={2} style={{display:'flex',justifyContent:'space-around'}}><EditOrderModal customer_img={getCustomerImage(order.customer_id)} product_price={getProductPrice(order.product_id)} customer_name={getCustomerName(order.customer_id)} product_img={getProductImage(order.product_id)} product_name={getProductName(order.product_id)} order={order}/><Button onClick={()=>props.deleteOrder(order.id)} style={{height:'31px',fontSize:'10px',padding:'.5rem .5rem',margin:'0rem'}} variant=\"danger\"><FontAwesomeIcon icon={faTrashAlt}/></Button></Col>\n                                \n                            </Row>\n                        </Card.Body>\n                            <Card.Footer style={{padding:'.2rem 2rem'}}>\n                                <Row style={{color:'gray',fontSize:'10px',padding:'0rem'}}><h7>Created On:</h7><span><b>{order.date}</b></span></Row>\n                            </Card.Footer>\n                    </Card>\n                ))}\n            </>\n        }\n    </Container>\n\n        <Container className=\"order-grid\">\n            <Row>\n            {orders.length===0?<Container><div style={{display:'flex',justifyContent:'center',alignItems:'center'}} ><Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" /></div></Container>:\n            <>\n                {Search(orders).map((order,key)=>(\n                  \n                    <Card key={key} style={{width:'100%',padding:'0',margin:'1rem'}}>\n                       <Card.Header>\n                       <Row style={{display:'flex',alignItems:'center',width:'15rem'}}><img style={{borderRadius:'10px',border:'2px Solid #ebebeb',height:'90px',width:'90px'}} src={getProductImage(order.product_id)}/><Col style={{display:'flex',flexDirection:'column'}}><NavLink to='/admin/products'><h7><b>{getProductName(order.product_id)}</b></h7></NavLink><span style={{color:'gray',fontSize:'12px'}}>Qty:<b>{order.quantity}</b></span></Col></Row>\n                       </Card.Header>\n                       <Card.Body style={{color:'gray',fontSize:'12px'}}>\n\n                                {/* <Col sm={1} ><h7>#{key+1}</h7></Col>\n                                <Col sm={3} ><Row style={{display:'flex',alignItems:'center',width:'15rem'}}><img style={{borderRadius:'50%',border:'2px solid #3b44c1',height:'50px',width:'50px'}} src={getCustomerImage(order.customer_id)}/><Col style={{display:'flex',flexDirection:'column'}}><NavLink to='/admin/customers'><h7><b>{getCustomerName(order.customer_id)}</b></h7></NavLink></Col></Row></Col> */}\n                                \n                                <Row ><Col><h7 >Order:</h7><span><b>#{key+1}</b></span></Col></Row>\n                                <Row ><Col><div><h7>Client:</h7><NavLink to='/admin/customers'><span><b>{getCustomerName(order.customer_id)}</b></span></NavLink></div></Col></Row>\n                                <Row ><Col><div><h7>Created On:</h7><span><b>{order.date}</b></span></div></Col></Row>\n                                <Row ><Col><h7>Status:</h7><span style={{border:order.payment===\"Completed\"?'1px solid #1bc943':'1px solid #f83245',padding:'1px 5px',background:order.payment===\"Completed\"?'#e5f9ed':'#fff5f6',fontSize:'10px',fontWeight:'bold',color:order.payment===\"Pending\"?'#f83245':'#1bc943'}}>{order.payment}</span></Col><Col><h7 >Total:</h7><span><b>₹{order.total}</b></span></Col></Row>\n                               \n                                \n                           \n                        </Card.Body>\n                        <Card.Footer className=\"text-muted\">\n                                <Row style={{marginTop:'.5rem',display:'flex',justifyContent:'space-around',width:'50%'}}><EditOrderModal  customer_img={getCustomerImage(order.customer_id)} product_price={getProductPrice(order.product_id)} customer_name={getCustomerName(order.customer_id)} product_img={getProductImage(order.product_id)} product_name={getProductName(order.product_id)} order={order}/><Button  onClick={()=>props.deleteOrder(order.id)} style={{height:'31px',fontSize:'10px',padding:'.5rem .5rem',margin:'0rem'}} variant=\"danger\"><FontAwesomeIcon icon={faTrashAlt}/></Button></Row>\n                                   \n                        </Card.Footer>\n\n                    </Card>\n                ))}\n            </>\n        }\n            </Row>\n        </Container>\n    </Card>\n    </>\n)\n}\nconst mapStateToProps=state=>{\n    return{\n        isAuthenticated:state.auth.isAuthenticated,\n        orders:state.order.orders,\n        products:state.item.items,\n        customers:state.customer.customers\n    }\n}\nexport default connect(mapStateToProps,{getOrders,getItems,getCustomers,deleteOrder})(OrderList);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\TrendingProductList.js",["333","334","335","336","337","338"],"import React, { Component } from \"react\";\nimport { Container, Row, Col,Button,Media,Form,Tooltip } from \"react-bootstrap\";\nimport './TrendingProductList.css'\nimport {Card} from 'react-bootstrap';   \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes,faEdit, faStar } from '@fortawesome/free-solid-svg-icons';\nimport { NavLink } from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {getCategories} from '../../action/categoryAction';\nimport { getItems,deleteItem } from \"../../action/itemAction\";\nimport {loginModalOpen} from '../../action/authActions'\nimport CountUp from \"react-countup\";\nimport default_product from '../../assets/images/default-pro.jpg'\n\nconst styles = {\n    mediaItem: {\n      border: \"1px solid gray\",\n      backgroundColor: \"#f5f5f5\",\n \n    },\n    mediaItemButtons: {\n      paddingTop: \"5px\",\n      paddingBottom: \"5px\"\n    }\n  };\n\nclass TrendingProductList extends Component {\n  // createLegend(json) {\n  //   var legend = [];\n  //   for (var i = 0; i < json[\"names\"].length; i++) {\n  //     var type = \"fa fa-circle text-\" + json[\"types\"][i];\n  //     legend.push(<i className={type} key={i} />);\n  //     legend.push(\" \");\n  //     legend.push(json[\"names\"][i]);\n  //   }\n  //   return legend;\n  // }\n  componentDidMount(){\n    // this.props.loadUser();\n    this.props.getItems();\n  }\n  render() {\n    // console.log(\"Products From  Trending:\",this.props.user);\n    const sort=(products)=>{\n      return products.sort((a, b) => b.rank - a.rank)\n    }\n    return (\n      <div className=\"content\">\n        <Container  fluid>\n        \n          <Row >\n            \n            <div className='products'>\n                 <Card  className='cardp' style={{height:'30rem',marginTop:'5rem'}}>\n                 <Card.Header className='header'><b>Trending Products</b><p>Explore All Top Viewed Products</p></Card.Header>\n                 <Card.Body className='overflow-auto custom-scrollbar-css p-3'>\n                 \n                    {this.props.products.length!==0?sort(this.props.products).map((product)=>\n                      \n                      <NavLink  to={this.props.isAuthenticated?{\n                        pathname:`admin/products/${product.id}`,\n                        state: {item:product}}:'/login'}\n                        >\n                          \n                        <Media key={product.id} style={{padding:'.5rem'}} className={styles.mediaItem}>\n                      <img\n                          width={100}\n                          height={100}\n                          className=\"align-self-center mr-3\"\n                          src={product.img?product.img:default_product}\n                          alt=\"Product Image\"\n                      />\n                      <Media.Body className={styles.mediaBody} >\n                          <p style={{display:'flex',alignItems:'center'}}><b>{product.name}</b><span style={{color:product.stock>=10?'#1bc943':'#f83245',borderRadius:'5px',border:product.stock>=10?'1px solid #1bc943':' 1px solid #f83245',background:product.stock>=10?'#e5f9ed':'#fff5f6',padding:'.0rem .3rem',marginLeft:'.5rem',fontSize:'10px'}}><b><CountUp\n                                        start={0}\n                                        end={product.stock}\n                                        duration={3}\n                                        delay={0}\n                                        separator=\"\"\n                                        decimals={0}\n                                        decimal=\",\"\n                                    /></b></span></p>\n                          <Row>\n                          <Col xs={6}>\n                              <h7 style={{fontSize:'12px',display:'flex'}}><strong>By:</strong> {product.manufacturer}</h7>\n                          </Col>\n                          <Col xs={6}><p style={{width:'2.7rem',margin:'0 0 0 .5rem',borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'12px'}}>{product.rating?product.rating:\"4.5\"} <FontAwesomeIcon  icon={faStar}/></p></Col>\n                          </Row>\n                          <Row>\n                          <Col xs={6}>\n                             <p style={{fontSize:'13px'}}> <strong>₹<CountUp\n                                        start={0}\n                                        end={product.price}\n                                        duration={2}\n                                        delay={0}\n                                        separator=\"\"\n                                        decimals={0}\n                                        decimal=\",\"\n                                    /></strong></p>\n                          </Col>\n                         \n                          </Row>\n\n                    \n                      </Media.Body>\n                      </Media></NavLink>\n                    ):'Please Refresh The Page :('}\n                </Card.Body>   \n                  <NavLink className=\"m-3 p-2 btn btn-primary\" style={{color:'white'}} to='/productsGrid'><span className=\"btn-wrapper--label\">View All</span></NavLink>\n                         \n                    </Card>\n             \n\n            </div>\n            \n          </Row>\n\n         \n        </Container>\n      </div>\n    );\n  }\n}\nconst mapStateToProps= state=>{\n  return({\n    categories:state.category.categories,\n      isAuthenticated:state.auth.isAuthenticated,\n      isLoading:state.auth.isLoading,\n      // user:state.auth.user,\n      products:state.item.items,\n      itemsLoading:state.item.itemsLoading,\n      itemsLoaded:state.item.itemsLoaded\n      // error:state.error\n  })\n}\nexport default connect(mapStateToProps,{loginModalOpen,getItems,deleteItem,getCategories})(TrendingProductList); ;\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\LoginModal.js",["339","340","341"],"import React,{Component} from 'react';\nimport {Col, Alert,NavLink, Button, Modal,Form,FormGroup,Label, Input, InputGroup} from 'react-bootstrap';\n\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {login} from '../../action/authActions';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\n\n// import e from 'express';\nconst schema = yup.object({\n    email: yup.string().required(),\n    password: yup.string().required(),\n})\n\nclass LoginModal extends Component{\n    state={\n        modal:false,   // modal for adding item is false initially\n        msg:null\n    };\n    componentDidUpdate(prevProps){\n        const {error,isAuthenticated}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"LOGIN_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        if(this.state.modal){\n            \n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n    static propTypes={\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        login:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(this.state.modal)\n        this.setState({\n            modal:!this.state.modal\n        })\n    }\nrender(){\n    return(\n        <div>\n            <NavLink onClick={this.toggle} href=\"#\">\n                Login\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n\n\n\n\n\n    <Formik\n      validationSchema={schema}\n     \n\n      initialValues={{\n        email:'',\n        password:'',\n\n      }}\n      onSubmit={(values)=>{ console.log(\"onSUbmit\");\n      const {email,password}=values;\n      console.log(\"On Submit Called\",email);\n      const user={\n          email,password\n      }\n      this.props.login(user);\n    }\n    }\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          \n          <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormikemail\">\n              <Form.Label>Email ID</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Email ID\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  isInvalid={!!errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormikPassword\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                isInvalid={!!errors.password}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n          {/* <Form.Group>\n            <Form.Check\n              required\n              name=\"terms\"\n              label=\"Agree to terms and conditions\"\n              onChange={handleChange}\n              isInvalid={!!errors.terms}\n              feedback={errors.terms}\n              id=\"validationFormik0\"\n            />\n          </Form.Group> */}\n          <Button type=\"submit\">Login</Button>\n        </Form>\n      )}\n    </Formik>\n                </Modal.Body>\n\n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isAuthenticated:state.auth.isAuthenticated,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{login,clearErrors})(LoginModal);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\Logout.js",["342","343"],"import React, { Component,Fragment } from 'react'\nimport {logout} from '../../action/authActions';\nimport {connect} from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSignOutAlt, faUserEdit } from '@fortawesome/free-solid-svg-icons';\n\nclass Logout extends Component {\n    static propTypes={\n        logout:PropTypes.func.isRequired\n    };\n    render() {\n        return (\n            <Fragment>\n                <div className=\"dropdown-list-item-logout\" onClick={this.props.logout}>\n                            <FontAwesomeIcon style={{marginRight:'.5rem'}} icon={faSignOutAlt}/><h7>Logout</h7>    \n                            </div> \n                {/* <NavLink style={{color:'red'}} onClick={this.props.logout} href=\"#\">Logout</NavLink>  */}\n            </Fragment>\n        )\n    }\n}\n\nexport default connect(null,\n    {logout}\n    )(Logout);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterModal.js",["344","345"],"import React,{Component} from 'react';\nimport { Button,InputGroup,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {register,login,TokenExpireExtend,loginModalOpen} from '../../action/authActions';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\n\n\nconst schemaLogin = yup.object({\n    email: yup.string().email('Invalid email').required(),\n    password: yup.string().min(0, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\n})\nconst schemaRegister = yup.object({\n    name:yup.string().min(3, 'Name must be at least 3 characters').max(24, 'Password can be maximum 20 characters').required(),   \n    email: yup.string().email('Invalid email').required(),\n    password: yup.string().min(6, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\n})\n\n\n\nclass RegisterModal extends Component{\n    state={\n        imageURL:\"\",\n        signIn:false,\n        remember:false,\n        modal:this.props.isModalOpen,   // modal for adding item is false initially\n        msg:null\n    };\n\n\n\n\n\n    componentDidUpdate(prevProps){\n        const {error,isAuthenticated}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"REGISTER_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else if(error.id===\"LOGIN_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        if(this.state.modal){\n            \n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n    static propTypes={\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        register:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n\n        this.setState({\n            modal:!this.state.modal\n        })\n        // this.props.loginModalOpen(this.state.modal)\n    }\n\n    handleCheckboxChange=(e)=>{\n        e.preventDefault();\n        this.setState((prevState)=>{\n            return {remember:!prevState.remember}\n        })\n        \n    }\n\n    handleSignIn=()=>{\n        console.log(\"Sign in  Toggle Called\",this.state.signIn);\n        this.props.clearErrors();\n        this.setState((prevState)=>{\n            return {signIn:!prevState.signIn}\n        })\n    }\n     encodeImageFileAsURL=()=> {\n        console.log(\"image uploading func. called\");\n        var filesSelected = document.getElementById(\"inputFileToLoad\").files;\n        if (filesSelected.length > 0) {\n          var fileToLoad = filesSelected[0];\n    \n          var fileReader = new FileReader();\n    \n          fileReader.onload = (fileLoadedEvent)=> {\n            var srcData = fileLoadedEvent.target.result; // <--- data: base64\n    \n            var newImage = document.createElement('img');\n            newImage.src = srcData;\n            this.setState({imageURL:newImage.src});\n            // document.getElementById(\"imgTest\").innerHTML = newImage.outerHTML;\n            // alert(\"Converted Base64 version is \" + document.getElementById(\"imgTest\").innerHTML);\n            // console.log(\"Converted Base64 version is \" + this.state.imageURL);\n           \n          }\n          fileReader.readAsDataURL(fileToLoad);\n        }\n        // return newImage.src;\n      }\n\n\nrender(){\n    return(\n        <div>\n            <NavLink onClick={this.toggle} href=\"#\">\n               <Button style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> Register</b></Button>\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n            {this.state.signIn?           <>\n            {/* <Modal.Header toggle={this.toggle}>Register</Modal.Header> */}\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Register</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n\n    <Formik\n    // validator={() => ({})}\n      validationSchema={schemaRegister}\n      initialValues={{\n        name:'',\n        email:'',\n        password:'',\n\n      }}\n      onSubmit={(values)=>{ \n        this.encodeImageFileAsURL();\n        const imageURL=this.state.imageURL;\n        console.log(\"Image URL\",imageURL);\n        const {name,email,password}=values;\n        let img=this.state.imageURL;\n        const newUser={\n            name,email,password,img\n        }\n        this.props.register(newUser);\n    }\n    }\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          <Form.Row>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name\"\n                name=\"name\"\n                value={values.name}\n                onChange={handleChange}\n                isInvalid={!!errors.name}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.name}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n          <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n              <Form.Label>Email ID</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Email ID\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  isInvalid={!!errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                isInvalid={!!errors.password}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\">\n                <div className=\"mb-3\">\n                    <Form.File id=\"formcheck-api-regular\">\n                    <Form.File.Label>Profile Image</Form.File.Label>\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\n                    </Form.File>\n                </div>\n            </Form.Group>\n\n          </Form.Row>\n          <Button type=\"submit\">Register</Button>\n          <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\n                            <div style={{}} className=\"forgot-password text-right\">\n                                Already registered <span onClick={this.handleSignIn} ><a href=\"#\"><b>Sign in?</b></a></span>\n                            </div>\n                            <div id=\"imgTest\"></div>\n                        </Form>\n                        \n                    )}\n                    </Formik>\n                </Modal.Body>            </>:\n                <>\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\n                    <Modal.Body>\n                      {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n                       \n                       \n                 <Formik\n                        validationSchema={schemaLogin}\n                        initialValues={{\n                            email:'',\n                            password:'',\n\n                        }}\n                        onSubmit={(values)=>{ \n                            console.log(\"onSUbmit\");\n                        const {email,password}=values;\n                        console.log(\"On Submit Called\",email);\n                        const user={\n                            email,password\n                        }\n                        this.props.login(user);\n                        }\n                        }\n                        >\n                        {({\n                            handleSubmit,\n                            handleChange,\n                            values,\n                            errors,\n                            touched\n                            }) => (\n                            <Form noValidate onSubmit={handleSubmit}>\n                            \n                            \n                            <Form.Row>\n                            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n                                <Form.Label>Email ID</Form.Label>\n                                <InputGroup>\n                                    <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                    </InputGroup.Prepend>\n                                    <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Email ID\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    name=\"email\"\n                                    value={values.email}\n                                    onChange={handleChange}\n                                    isInvalid={!!errors.email}\n                                    />\n                                     <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    {touched.email && errors.email}\n                                    </Form.Control.Feedback>\n                                   \n                                </InputGroup>\n                                </Form.Group>\n                                </Form.Row>\n                                <Form.Row>\n                                \n                                <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    value={values.password}\n                                    onChange={handleChange}\n                                    isInvalid={!!errors.password}\n                                />\n                                 <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {touched.password && errors.password}\n                                </Form.Control.Feedback>\n                                </Form.Group>\n\n                            </Form.Row>\n                            {/* <Form.Group>\n                                <Form.Check\n                                required\n                                name=\"terms\"\n                                label=\"Agree to terms and conditions\"\n                                onChange={handleChange}\n                                isInvalid={!!errors.terms}\n                                feedback={errors.terms}\n                                id=\"validationFormik0\"\n                                />\n                            </Form.Group> */}\n                            <Button type=\"submit\">Login</Button>\n                            <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\n                                                    <div style={{marginTop:'1rem',}} className=\"forgot-password text-right\">\n                                                    Don't have an account?  <span onClick={this.handleSignIn} ><a href=\"#\"><b>Create an Account</b></a></span>\n                                    </div> \n                            </Form>\n                        )}\n                        </Formik>\n                </Modal.Body>\n            </>\n            \n }\n            \n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isModalOpen:state.auth.isModalOpen,\n        isAuthenticated:state.auth.isAuthenticated,\n        rememberMe:state.auth.rememberMe,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loginModalOpen,login,register,clearErrors,TokenExpireExtend})(RegisterModal);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\auth\\RegisterModal1.js",["346","347","348"],"import React,{Component} from 'react';\nimport { Button,InputGroup,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {register,login,TokenExpireExtend,loginModalOpen,isBlockedF} from '../../action/authActions';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\n\n\nconst schemaLogin = yup.object({\n    email: yup.string().email('Invalid email').required(),\n    password: yup.string().min(0, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required()\n})\n\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n\n\nconst schemaRegister = yup.object({\n    fname:yup.string().min(1, 'At least 1 characters').max(10, 'First Name can be maximum 10 characters').required(),   \n    lname:yup.string().min(1, 'At least 1 characters').max(10, 'Last Name can be maximum 10 characters').required(),   \n    city:yup.string().min(3, 'City must be at least 3 characters').max(24, 'City can be maximum 20 characters'),   \n    state:yup.string().min(3, 'State must be at least 3 characters').max(24, 'State can be maximum 20 characters'),   \n    country:yup.string().min(3, 'Country must be at least 3 characters').max(24, 'Country can be maximum 20 characters'),   \n    postal:yup.number().integer(),   \n    email: yup.string().email('Invalid email').required(),\n    password: yup.string().min(6, 'Password must be at least 6 characters').max(24, 'Password can be maximum 24 characters').required(),\n    // mobile_number:yup.number().max(9999999999,'Invalid Number').required()//.matches(phoneRegExp,\"Number is Not Like Mobile number\"),   \n})\n\n\n\nclass RegisterModal extends Component{\n    state={\n        imageURL:\"\",\n        signIn:false,\n        remember:false,\n        modal:this.props.isModalOpen,   // modal for adding item is false initially\n        msg:null,\n        city:'',\n        State:'',\n        country:'',\n        postal:'',\n        ip:'',\n        isBlocking:this.props.isBlocked\n    };\n\n\nasync componentDidMount(){\n\n    let response=await fetch(`https://geolocation-db.com/json/`)\n    let ipData=await response.json();\n    \n    this.setState({ip:ipData.IPv4,city:ipData.city,country:ipData.country_name,postal:ipData.postal,State:ipData.state})\n\n    \n}\n\n\n    componentDidUpdate(prevProps){\n\n        console.log(this.state.city);\n\n        const {error,isAuthenticated}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"REGISTER_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else if(error.id===\"LOGIN_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        if(this.state.modal){\n            \n            if(isAuthenticated){\n                this.toggle();\n            }\n        }\n    }\n    static propTypes={\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        register:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n      \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n\n        this.setState({\n            modal:!this.state.modal\n        })\n        // this.props.loginModalOpen(this.state.modal)\n    }\n\n    handleCheckboxChange=(e)=>{\n        e.preventDefault();\n        this.setState((prevState)=>{\n            return {remember:!prevState.remember}\n        })\n        \n    }\n\n    handleSignIn=()=>{\n        console.log(\"Sign in  Toggle Called\",this.state.signIn);\n        this.props.clearErrors();\n        this.setState((prevState)=>{\n            return {signIn:!prevState.signIn}\n        })\n    }\n     encodeImageFileAsURL=()=> {\n        console.log(\"image uploading func. called\");\n        var filesSelected = document.getElementById(\"inputFileToLoad\").files;\n        if (filesSelected.length > 0) {\n          var fileToLoad = filesSelected[0];\n    \n          var fileReader = new FileReader();\n    \n          fileReader.onload = (fileLoadedEvent)=> {\n            var srcData = fileLoadedEvent.target.result; // <--- data: base64\n    \n            var newImage = document.createElement('img');\n            newImage.src = srcData;\n            this.setState({imageURL:newImage.src});\n            // document.getElementById(\"imgTest\").innerHTML = newImage.outerHTML;\n            // alert(\"Converted Base64 version is \" + document.getElementById(\"imgTest\").innerHTML);\n            // console.log(\"Converted Base64 version is \" + this.state.imageURL);\n           \n          }\n          fileReader.readAsDataURL(fileToLoad);\n        }\n        // return newImage.src;\n      }\n\n\nrender(){\n    return(\n        <div>\n          {/* <Prompt\n              when={this.state.isBlocking}\n                message={(location, action) => {\n                  // if (action === 'POP') {\n                    console.log(\"Backing up...\",action,location)\n                  // }\n\n                  return location.pathname.startsWith(\"/\")\n                    ? true\n                    : `Are you sure you want to Leave ${location.pathname}?`\n            }}\n          /> */}\n             {/* <Prompt\n                when={this.props.isBlocked}\n                message={(location)=> `Are You Sure Want To Leave ${location}`}\n/>  */}\n            <NavLink onClick={this.toggle} >\n               <Button style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b> Register</b></Button>\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n            {this.state.signIn?           <>\n            {/* <Modal.Header toggle={this.toggle}>Register</Modal.Header> */}\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Register</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n    <p>isBlocking?{this.state.isBlocking?\"Yes\":\"No\"}</p>\n   \n    <Formik\n    // validator={() => ({})}\n      validationSchema={schemaRegister}\n      initialValues={{\n        fname:'',\n        lname:'',\n        email:'',\n        password:'',\n        city:this.state.city,\n        state:this.state.State,\n        postal:this.state.postal,\n        country:this.state.country,\n        // mobile_number:''\n\n      }}\n      onSubmit={(values)=>{ \n        this.encodeImageFileAsURL();\n        const imageURL=this.state.imageURL;\n        console.log(\"Image URL\",imageURL);\n        const {fname,lname,email,password,city,state,postal,country}=values;\n        let img=this.state.imageURL;\n        let ip=this.state.ip;\n        const newUser={\n            fname,lname,email,password,img,city,state,postal,country,ip\n        }\n        this.props.register(newUser);\n    }\n    }\n    >\n       \n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n           \n              <Form.Label>First Name</Form.Label>\n              \n              <Form.Control\n                type=\"text\"\n                placeholder=\"First Name\"\n                name=\"fname\"\n                value={values.fname}\n                // onChangeCapture={(e)=>this.setState({isBlocking:e.target.value>0})}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\n                isInvalid={!!errors.fname}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.fname}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n              <Form.Label>Last Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Last Name\"\n                name=\"lname\"\n                value={values.lname}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); this.props.isBlockedF(e.target.value.length>0);handleChange(e)}}\n                isInvalid={!!errors.lname}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.lname}\n              </Form.Control.Feedback>\n            </Form.Group>\n           \n\n          </Form.Row>\n          <Form.Row>\n          <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n              <Form.Label>Email ID</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Email ID\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"email\"\n                  value={values.email}\n                  onChange={e=>{this.setState({isBlocking:e.target.value.length>0});this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\n                  isInvalid={!!errors.email}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.email}\n                </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n            </Form.Row>\n\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                type=\"password\"\n                placeholder=\"Password\"\n                name=\"password\"\n                value={values.password}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0});this.props.isBlockedF(e.target.value.length>0); handleChange(e)}}\n                isInvalid={!!errors.password}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.password}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n         \n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n              <Form.Label>City</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"City\"\n                name=\"city\"\n                value={values.city?values.city:this.state.city}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                isInvalid={!!errors.city}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.city}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n              <Form.Label>State</Form.Label>\n              <Form.Control\n               disabled\n                type=\"text\"\n                placeholder=\"State\"\n                name=\"state\"\n                value={values.state?values.state:this.state.State}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                isInvalid={!!errors.state}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.state}\n              </Form.Control.Feedback>\n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n              <Form.Label>Postal</Form.Label>\n              <Form.Control\n             \n                type=\"number\"\n                placeholder=\"Postal\"\n                name=\"postal\"\n                value={values.postal?values.postal:this.state.postal}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                isInvalid={!!errors.postal}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.postal}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik03\">\n              <Form.Label>Country</Form.Label>\n              <Form.Control\n               disabled\n                type=\"text\"\n                placeholder=\"Country\"\n                name=\"country\"\n                value={values.country?values.country:this.state.country}\n                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                isInvalid={!!errors.country}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.country}\n              </Form.Control.Feedback>\n            </Form.Group>\n            {/* <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n              <Form.Label>Phone/Mobile Number</Form.Label>\n              <Form.Control\n                type=\"number\"\n                placeholder=\"Mobile Number\"\n                name=\"mobile\"\n                value={values.mobile_number}\n                onChange={handleChange}\n                isInvalid={!!errors.mobile_number}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.mobile_number}\n              </Form.Control.Feedback>\n            </Form.Group> */}\n\n          </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\">\n                <div className=\"mb-3\">\n                    <Form.File id=\"formcheck-api-regular\">\n                    <Form.File.Label>Profile Image </Form.File.Label>\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\n                    </Form.File>\n                </div>\n            </Form.Group>\n\n          </Form.Row>\n\n          {/* <Form.Row>\n          <Map\n                google={this.props.google}\n                center={{lat: 18.5204, lng: 73.8567}}\n                height='300px'\n                zoom={15}\n    />\n          </Form.Row>\n          <Form.Row>\n         \n          </Form.Row>\n          <Form.Row>\n         \n          </Form.Row>\n          <Form.Row style={{marginBottom:'10rem'}}>\n         <p>Hello</p>\n          </Form.Row> */}\n          <Button type=\"submit\">Register</Button>\n          \n          <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\n                            <div style={{}} className=\"forgot-password text-right\">\n                                Already registered <span onClick={this.handleSignIn} ><a ><b>Sign in?</b></a></span>\n                            </div>\n                            <div id=\"imgTest\"></div>\n                        </Form>\n                        \n                    )}\n                    </Formik>\n                </Modal.Body>            </>:\n                <>\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Login</b></Modal.Header>\n                    <Modal.Body>\n                      {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n                       \n                       \n                 <Formik\n                        validationSchema={schemaLogin}\n                        initialValues={{\n                            email:'',\n                            password:'',\n\n                        }}\n                        onSubmit={(values)=>{ \n                            console.log(\"onSUbmit\");\n                        const {email,password}=values;\n                        console.log(\"On Submit Called\",email);\n                        const user={\n                            email,password\n                        }\n                        this.props.login(user);\n                        }\n                        }\n                        >\n                        {({\n                            handleSubmit,\n                            handleChange,\n                            values,\n                            errors,\n                            touched\n                            }) => (\n                            <Form noValidate onSubmit={handleSubmit}>\n                            \n                            \n                            <Form.Row>\n                            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n                                <Form.Label>Email ID</Form.Label>\n                                <InputGroup>\n                                    <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                                    </InputGroup.Prepend>\n                                    <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Email ID\"\n                                    aria-describedby=\"inputGroupPrepend\"\n                                    name=\"email\"\n                                    value={values.email}\n                                    onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                                    isInvalid={!!errors.email}\n                                    />\n                                     <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                    <Form.Control.Feedback type=\"invalid\">\n                                    {touched.email && errors.email}\n                                    </Form.Control.Feedback>\n                                   \n                                </InputGroup>\n                                </Form.Group>\n                                </Form.Row>\n                                <Form.Row>\n                                \n                                <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    name=\"password\"\n                                    value={values.password}\n                                    onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                                    isInvalid={!!errors.password}\n                                />\n                                 <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {touched.password && errors.password}\n                                </Form.Control.Feedback>\n                                </Form.Group>\n\n                            </Form.Row>\n                            {/* <Form.Group>\n                                <Form.Check\n                                required\n                                name=\"terms\"\n                                label=\"Agree to terms and conditions\"\n                                onChange={e=>{this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                                isInvalid={!!errors.terms}\n                                feedback={errors.terms}\n                                id=\"validationFormik0\"\n                                />\n                            </Form.Group> */}\n                            <Button type=\"submit\">Login</Button>\n                            <input defaultChecked={this.state.remember} style={{marginLeft:'1rem',marginTop:'.5rem'}} type=\"checkbox\" onChange={this.handleCheckboxChange}/><span>  Remember me!</span>\n                                                    <div style={{marginTop:'1rem',}} className=\"forgot-password text-right\">\n                                                    Don't have an account?  <span onClick={this.handleSignIn} ><a ><b>Create an Account</b></a></span>\n                                    </div> \n                            </Form>\n                        )}\n                        </Formik>\n                </Modal.Body>\n            </>\n            \n }\n            \n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        isModalOpen:state.auth.isModalOpen,\n        isBlocked:state.auth.isBlocked,\n        isAuthenticated:state.auth.isAuthenticated,\n        rememberMe:state.auth.rememberMe,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loginModalOpen,isBlockedF,login,register,clearErrors,TokenExpireExtend})(RegisterModal);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Navbars\\AdminNavbarLinks.js",["349"],"\nimport React, { Component } from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe} from '@fortawesome/free-solid-svg-icons';\nimport './AdminNavbarLinks.css'\nimport {NavLink} from 'react-router-dom';\n\nclass AdminNavbarLinks extends Component {\n  render() {\n    const notification = (\n      <div>\n        <FontAwesomeIcon icon={faGlobe} className=\"font-size-lg icon1 \" />\n        <b className=\"caret\" />\n      </div>\n    );\n    return (\n      <>\n\n          <div style={{margin:'5px 15px'}}>\n               <li > <NavLink className=\"nav-link\" to=\"/\" >Home</NavLink></li>\n               <li ><NavLink className=\"nav-link\" to=\"/productsGrid\">Products</NavLink></li>\n             \n               <hr style={{borderColor:'white',width:'14.3rem'}}/>  </div>\n\n             \n\n      </>\n    );\n  }\n}\n\nexport default AdminNavbarLinks;\n","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Variables\\Variables.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\CustomButton\\CustomButton.jsx",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\UserCard\\UserCard.jsx",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductList.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\StatsCard\\StatsCard.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Card\\Card.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\orderAction.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Customers\\AddCustomerModal.js",["350"],"import React,{Component} from 'react';\nimport {Col, Alert,NavLink, Button, Modal,Form, InputGroup} from 'react-bootstrap';\n\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {addItem} from '../../action/itemAction';\nimport {getCategories} from '../../action/categoryAction';\n\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport back from '../../assets/images/back.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport {addCustomer,getCustomers} from '../../action/customerAction';\n\n\n// import e from 'express';\nconst schemaCustomer = yup.object({\n    fname: yup.string().min(3, 'First Name must be at least 3 characters').max(24, 'Last Name can be maximum 20 characters').required(),\n    lname: yup.string().min(3, 'Last Name must be at least 3 characters').max(24, 'Last Name can be maximum 20 characters').required(),\n    address: yup.string().max(100,\"Address length must be less than 100 Chars\").required(),\n    email: yup.string().email('Invalid email').required(),\n})\n\nclass AddCustomerModal extends Component{\n    state={\n        modal:false,   // modal for adding item is false initially\n        msg:null,\n        imageURL:'',\n        categories:this.props.categories\n    };\n    componentDidMount(){\n      // this.props.getCategories();\n      this.setState({categories:this.props.categories})\n    }\n    componentDidUpdate(prevProps){\n        const {error,isAuthenticated}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"LOGIN_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        \n    }\n    static propTypes={\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        login:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(this.state.modal)\n        this.setState({\n            modal:!this.state.modal\n        })\n    }\n\n\n    encodeImageFileAsURL=()=> {\n      console.log(\"image uploading func. called\");\n      var filesSelected = document.getElementById(\"inputFileToLoad\").files;\n      if (filesSelected.length > 0) {\n        var fileToLoad = filesSelected[0];\n  \n        var fileReader = new FileReader();\n  \n        fileReader.onload = (fileLoadedEvent)=> {\n          var srcData = fileLoadedEvent.target.result; // <--- data: base64\n  \n          var newImage = document.createElement('img');\n          newImage.src = srcData;\n          this.setState({imageURL:newImage.src});\n          // console.log(\"ImageURL:\",this.state.imageURL);\n         \n        }\n        fileReader.readAsDataURL(fileToLoad);\n      }\n\n    }\nrender(){\n  console.log(\"Categories:\",this.state.categories);\n    return(\n        <div>\n             <NavLink onClick={this.toggle} href=\"#\">\n            <Button><FontAwesomeIcon  icon={faPlus}/><h7 style={{marginLeft:'.3rem'}} className=\"newproductbuttontext\">Add New</h7></Button>\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Add Customer</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n\n\n\n\n\n    <Formik\n      validationSchema={schemaCustomer}\n     \n\n      initialValues={{\n        fname:\"\",\n        lname:\"\",\n        email:\"\",\n        address:\"\",\n        img:\"\"\n      }}\n      onSubmit={(values)=>{ \n       \n        const {fname,lname,address,email}=values;\n        // this.encodeImageFileAsURL();   \n        let img=this.state.imageURL;\n        console.log(\"Image:\",img);\n        const by_user_id=this.props.user?this.props.user._id:'';\n        const customer={\n          fname,lname,email,address,img,by_user_id\n        }\n        console.log(\"New Customer:\",customer);\n      //  console.log(\"Name:\",name,\" Des:\",description,\" Manu:\",manufacturer,\" price:\",price,\" Stock:\",stock,\" Img:\",img,\"  Cat\",CategoryName,\" User:\",user);\n        this.props.addCustomer(customer);\n        \n        this.toggle();\n        setTimeout(()=>{\n            this.props.getCustomers();\n        },1000);\n       }\n     }\n    >\n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          \n          <Form.Row>\n          <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n              <Form.Label>First Name</Form.Label>\n              \n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"First Name\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"fname\"\n                  value={values.fname}\n                  onChange={handleChange}\n                  isInvalid={!!errors.fname}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.fname}\n                </Form.Control.Feedback>\n              \n            </Form.Group>\n          <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n              <Form.Label>Last Name</Form.Label>\n              \n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Last  Name\"\n                  aria-describedby=\"inputGroupPrepend\"\n                  name=\"lname\"\n                  value={values.lname}\n                  onChange={handleChange}\n                  isInvalid={!!errors.lname}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.lname}\n                </Form.Control.Feedback>\n              \n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n              <Form.Label>Email</Form.Label>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                </InputGroup.Prepend>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                isInvalid={!!errors.email}\n              />\n\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.email}\n              </Form.Control.Feedback>\n              </InputGroup>\n            </Form.Group>\n\n          </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\" controlId=\"validationFormik03\">\n              <Form.Label>Address</Form.Label>\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Address\"\n                name=\"address\"\n                value={values.address}\n                onChange={handleChange}\n                isInvalid={!!errors.address}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.address}\n              </Form.Control.Feedback>\n            </Form.Group>\n\n          </Form.Row>\n\n            <Form.Row>\n\n            <Form.Group as={Col} md=\"7\" controlId=\"validationFormik07\">\n                <div className=\"mb-3\">\n                    <Form.File id=\"formcheck-api-regular\">\n                    <Form.File.Label>Customer Image</Form.File.Label>\n                    <input id=\"inputFileToLoad\"  type=\"file\" onChange={this.encodeImageFileAsURL} />\n                    </Form.File>\n                </div>\n            </Form.Group>\n\n          </Form.Row>\n          \n          <Button type=\"submit\">Submit</Button>\n        </Form>\n      )}\n    </Formik>\n                </Modal.Body>\n\n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        categories:state.category.categories,\n        user:state.auth.user,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{getCustomers,clearErrors,addItem,getCategories,addCustomer})(AddCustomerModal);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\action\\customerAction.js",[],"C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\EditOrderModal.js",["351"],"import React,{Component} from 'react';\nimport { Col,Alert, Button, Modal,Form, Row, Card } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit} from '@fortawesome/free-solid-svg-icons';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom'\nimport PropTypes from 'prop-types';\nimport {updateOrder,getOrders} from '../../action/orderAction';\nimport back from '../../assets/images/back.jpg';\nimport {loginModalOpen} from '../../action/authActions'\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nconst schemaOrder = yup.object({\n    quantity: yup.number().positive().integer().min(1, \"Price Should be More Than 1\").max(1000, \"Price Should be Less Than 500K\"),   \n    payment1: yup.number().positive().integer().min(1,\"Choose Any Payment Status\"),\n\n})\n\n\nclass EditOrderModal extends Component{\n    \n    state={\n        modal:false,   // modal for adding item is false initially\n        product_id:'',\n        customer_id:'',\n        by_user_id:'',\n        quantity:0,\n        total:0,\n        payment:0,\n        msg:null,\n        isUpdate:false\n    };\n    componentDidMount(){\n        // this.props.loadUser();\n        const {id,product_id,customer_id,by_user_id,quantity,total,payment}=this.props.order;\n        this.setState({product_id:product_id,customer_id:customer_id,quantity:quantity,by_user_id:by_user_id,total:total,payment:payment});\n    }\n    componentDidUpdate(prevProps){\n        const {error,isUpdate}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"UPDATE_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if Update close Modal\n        if(this.state.modal){\n            \n            if(isUpdate){\n                this.toggle();\n                this.props.loadUser();\n            }\n        }\n        \n    }\n    static propTypes={\n        isUpdate:PropTypes.bool,\n        isAuthenticated:PropTypes.bool,\n        error:PropTypes.object.isRequired,\n        register:PropTypes.func.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n    toggle=()=>{  \n        // clear the error\n        this.props.clearErrors();\n        // to toggle the modal \n        console.log(\"Props\",this.props);\n        // if(!this.props.isAuthenticated){\n        //     console.log(\"Authen\");\n        //     this.props.history.push('/')\n        //     this.props.loginModalOpen(true);\n           \n        // }\n        // console.log(\"from Toggle-> Modal Open:: \"+this.state.modal)\n        // else\n            this.setState({\n                modal:!this.state.modal\n            })\n    }\n\n\n    onChange=(e)=>{\n        this.setState({[e.target.name]:e.target.value});\n    }\n\nrender(){\n    console.log(\"product Edit Modal:\",this.props.product);\n    return(\n        <>\n            <OverlayTrigger        \n                        placement=\"bottom\"\n                    overlay={<Tooltip id=\"button-tooltip-2\">Edit Order</Tooltip>}>\n           \n            <Button style={{height:'31px',fontSize:'10px',padding:'.5rem .5rem',margin:'0rem'}} onClick={this.toggle} variant=\"primary\" size=\"sm\">\n                    <FontAwesomeIcon icon={faEdit}/>\n            </Button>\n\n            </OverlayTrigger>\n\n\n            <Modal show={this.state.modal} onHide={this.toggle}   >\n                <Modal.Header toggle={this.toggle} style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton>Update</Modal.Header>\n                <Modal.Body>\n                    <Card style={{display:'flex'}}>\n                        <Row style={{display:'flex',alignItems:'center'}}>\n                               <div style={{display:'flex',width:'15rem'}}> \n                                <Col style={{marginLeft:'.5 rem'}} ><img alt=\"alt\" style={{height:'80px',width:'80px'}} src={this.props.product_img}/></Col>\n                                <Col  style={{marginTop:'1rem',display:'flex',flexDirection:'column',alignItems:'center'}}><h7><b>{this.props.product_name}</b></h7><span style={{fontSize:'12px',color:'gray'}}>Qnty:{this.props.order.quantity}</span></Col>\n                                </div>\n                                <div style={{display:'flex',width:'15rem'}}>\n                                {/* <Col sm={2}></Col> */}\n                                <Col style={{marginLeft:'1rem'}}><img  alt=\"alt\" style={{borderRadius:'50%',border:'2px solid #3b44c1',height:'50px',width:'50px'}} src={this.props.customer_img}/></Col>\n                                <Col style={{marginTop:'.8rem',display:'flex',flexDirection:'column',alignItems:'center'}} ><h7><b>{this.props.customer_name}</b></h7></Col>\n                            </div>\n                        </Row>\n                    </Card>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n    <Formik\n    // validator={() => ({})}\n      validationSchema={schemaOrder}\n      initialValues={{\n        quantity:this.state.quantity,\n        total:this.state.quantity*this.props.product_price,\n        payment1:this.state.payment===\"Completed\"?\"1\":\"2\",\n        price:this.props.product_price\n        // mobile_number:''\n\n      }}\n        onSubmit={(values)=>{ \n        \n            const {quantity,payment1}=values;\n            const payment=payment1===\"1\"?\"Completed\":\"Pending\"\n            const id=this.props.order.id;\n            const product_id=this.state.product_id;\n            const customer_id=this.state.customer_id;\n            const by_user_id=this.state.by_user_id;\n            const total=quantity*this.props.product_price;\n\n                const editOrder={\n                    id,product_id,customer_id,by_user_id,quantity,total,payment\n                }\n                console.log(\"Submit:\",editOrder);\n                this.props.updateOrder(editOrder);\n                this.toggle();\n                setTimeout(()=>{\n                    this.props.getOrders();\n                },1500);\n            \n            }\n        }\n    >\n       \n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n           \n              <Form.Label>Quantity</Form.Label>\n              \n              <Form.Control\n                type=\"text\"\n                placeholder=\"\"\n                name=\"quantity\"\n                value={values.quantity}\n                // onChangeCapture={(e)=>this.setState({isBlocking:e.target.value>0})}\n                onChange={handleChange}//this.setState({isBlocking:e.target.value.length>0}); handleChange(e)}}\n                isInvalid={!!errors.quantity}\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.quantity}\n              </Form.Control.Feedback>\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\" controlId=\"validationFormik01\">\n              <Form.Label>Payment</Form.Label>\n              <Form.Control\n                as=\"select\"\n                // type=\"password\"\n                placeholder=\"\"\n                name=\"payment1\"\n                value={values.payment1}\n                onChange={handleChange}\n                isInvalid={!!errors.payment1}\n                \n              >\n                  <option value=\"0\">Choose Payment</option>\n                  \n                <option value=\"1\">Completed</option>\n                <option value=\"2\">Pending</option>\n\n                  \n                 \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.payment1}\n              </Form.Control.Feedback>\n            </Form.Group>\n           \n\n          </Form.Row>\n         \n         <Form.Row style={{fontWeight:'bold',color:'gray',border:'1px solid rgba(0,0,0,.125)',padding:'.5rem',borderRadius:'5px',marginBottom:'.5rem'}}><h7>Total:</h7><span><b>{this.props.product_price}</b></span>X<span><b>{values.quantity}</b>=<b>{values.quantity*values.price}</b></span></Form.Row>\n          <Button type=\"submit\">Update</Button>\n          \n         \n                        </Form>\n                        \n                    )}\n                    </Formik>\n                </Modal.Body>\n\n            </Modal>\n        </>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{updateOrder,clearErrors,loginModalOpen,getOrders})(withRouter(EditOrderModal));","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\Order\\AddOrderModal.js",["352"],"import React,{Component} from 'react';\nimport { Button,Col,Alert,NavLink, Modal,Form } from 'react-bootstrap';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {clearErrors}  from '../../action/errorActions';\nimport {Formik} from 'formik';\nimport * as yup from 'yup';\n\nimport back from '../../assets/images/back.jpg';\nimport {loadUser} from '../../action/authActions'\nimport {getItems} from '../../action/itemAction';\nimport {addOrder,getOrders} from '../../action/orderAction';\nimport {getCustomers} from '../../action/customerAction';\nimport {getCategories} from '../../action/categoryAction';\n\n\n\nconst schemaOrder = yup.object({\n    customer_id: yup.number().positive().integer().min(1,\"Choose Any Customer\"),\n    category_id: yup.number().positive().integer().min(1,\"Choose Any Category\"),\n    product_id: yup.string().min(9,\"Choose Any Product\"),\n    payment1: yup.number().positive().integer().min(1,\"Choose Any Payment Status\"),\n    quantity:yup.number().integer().min(1,\"Choose Atleast One Quantity\").max(100,'Max 100 Allowed/Order'),   \n    // total:yup.number().integer().min(1,\"Choose Any Product\")\n          \n})\n\n\n\nclass AddOrderModal extends Component{\n    state={\n       \n        modal:false,   // modal for adding item is false initially\n        msg:null,   \n    };\n\n    componentDidMount(){\n      this.props.getCustomers();\n      this.props.getCategories();\n      this.props.getItems();\n\n    }\n\n    componentDidUpdate(prevProps){\n\n        console.log(\"Add Order Called\");\n        const {error}=this.props;\n        if(error!==prevProps.error){\n            if(error.id===\"UPDATE_FAIL\"){\n                this.setState({msg:error.msg.msg});\n            }\n            else{\n                this.setState({msg:null});\n            }\n        }\n        // if authenticated close Modal\n        // if(this.state.modal){\n            \n        //     if(isAuthenticated){\n        //         this.toggle();\n        //     }\n        // }\n    }\n    static propTypes={\n        error:PropTypes.object.isRequired,\n        clearErrors:PropTypes.func.isRequired\n    }\n\n   toggle=()=>{   \n        this.props.clearErrors();\n        this.setState({\n            modal:!this.state.modal\n        })\n        console.log(\"Toggle:\",this.state.modal);\n        \n    }\n    \n\nrender(){\n\n  \n  \n  var customers=this.props.customers.length===0?[]:this.props.customers;\n  var products=this.props.products.length===0?[]:this.props.products;\n  var categories=this.props.categories.length===0?[]:this.props.categories;\n  \nconst  getCategory=(id)=>{\n      return categories.filter(cat=>cat.id===parseInt(id))[0].name;\n  }\n  // console.log(\"Category:\",getCategory(\"1254\"));\nconst getProducts=(id,products)=>{\n  if(id===\"0\")\n  return [];\n  let cat_name=getCategory(id);\n  return products.filter(p=>p.category===cat_name)\n}\n\nconst getPrice=(id)=>{\n  if(id!=='0'){\n    return products.filter(p=>p.id===id)[0].price;\n  }\n  return 0;\n}\n\nconsole.log(\"User:\",this.props.user);\n    return(\n        <div>\n          {/* <Prompt\n              when={this.state.isBlocking}\n                message={(location, action) => {\n                  // if (action === 'POP') {\n                    console.log(\"Backing up...\",action,location)\n                  // }\n\n                  return location.pathname.startsWith(\"/\")\n                    ? true\n                    : `Are you sure you want to Leave ${location.pathname}?`\n            }}\n          /> */}\n             {/* <Prompt\n                when={this.props.isBlocked}\n                message={(location)=> `Are You Sure Want To Leave ${location}`}\n/>  */}\n            <NavLink href=\"#\" onClick={this.toggle} >\n               <Button  style={{paddingLeft:' 1.5rem',paddingRight:'1.5rem'}}><b>Add Order</b></Button>\n            </NavLink>\n\n            <Modal show={this.state.modal} onHide={this.toggle} >\n                <Modal.Header  style={{color:'white', backgroundImage: `url(\"${back}\")`,backgroundSize:'32rem',backgroundRepeat:'no-repeat'}} closeButton ><b>Add Order</b></Modal.Header>\n                <Modal.Body>\n    {this.state.msg?<Alert color=\"danger\">{this.state.msg}</Alert>:null}\n   \n    <Formik\n      validationSchema={schemaOrder}\n      initialValues={{\n        customer_id:'0',\n        product_id:'0',\n        quantity:0,\n        total:0,\n        category_id:'0',\n        payment1:'0'\n\n      }}\n      onSubmit={(values)=>{ \n        \n        const {product_id,customer_id,quantity,payment1}=values;\n        let by_user_id=this.props.user?this.props.user._id:9;\n        let payment=parseInt(payment1)===1?\"Completed\":\"Pending\";\n        let total=quantity*getPrice(product_id)\n        console.log(product_id,customer_id,by_user_id,quantity,total,payment);\n        const newOrder={\n          product_id,customer_id,by_user_id,quantity,total,payment\n        }\n        this.props.addOrder(newOrder);\n        this.toggle();\n        setTimeout(()=>{\n          this.props.getOrders();\n        },1500)\n    }\n    }\n    >\n       \n      {({\n        handleSubmit,\n        handleChange,\n        values,\n        errors,\n         }) => (\n        <Form noValidate onSubmit={handleSubmit}>\n          \n          <Form.Row>\n            <Form.Group as={Col} md=\"6\">\n           \n              <Form.Label>Customer</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                // type=\"password\"\n                placeholder=\"\"\n                name=\"customer_id\"\n                value={values.customer_id}\n                onChange={handleChange}\n                isInvalid={!!errors.customer_id}\n                \n              >\n                  <option value='0'>Choose Customer</option>\n\n                  {this.props.customers.map((customer,key)=>(\n                      <option value={customer.id}>{customer.fname+\" \"+customer.lname}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.customer_id}\n              </Form.Control.Feedback>\n\n\n            </Form.Group>\n            <Form.Group as={Col} md=\"6\">\n             <Form.Label>Category</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                // type=\"password\"\n                placeholder=\"\"\n                name=\"category_id\"\n                value={values.category_id}\n                onChange={handleChange}\n                isInvalid={!!errors.category_id}\n                \n              >\n                  <option value=\"0\">Choose Category</option>\n\n                  {categories.map((category,key)=>(\n                      <option value={category.id}>{category.name}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.category_id}\n              </Form.Control.Feedback>\n            </Form.Group>\n           \n\n          </Form.Row>\n\n          <Form.Row>\n         <Form.Group as={Col} md=\"12\">\n             <Form.Label>Product Under Choosen Category</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                placeholder=\"\"\n                name=\"product_id\"\n                value={values.product_id}\n                onChange={handleChange}\n                isInvalid={!!errors.product_id}\n              >\n                  <option value=\"0\">Choose Product</option>\n                  {getProducts(values.category_id,products).map((product,key)=>(\n                      <option style={{fontWeight:'bold'}} value={product.id}> #{key+1} | {product.name} | Price: ₹{product.price} | Stock: {product.stock}</option>\n                  ))\n                        \n                  }\n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.product_id}\n              </Form.Control.Feedback>\n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n         <Form.Group as={Col} md=\"6\">\n             <Form.Label>Quantity</Form.Label>\n              \n              <Form.Control\n                type=\"number\"\n                placeholder=\"Quantity\"\n                name=\"quantity\"\n                value={values.quantity}\n                onChange={handleChange}\n                isInvalid={!!errors.quantity}\n              >\n                  \n                \n        \n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.quantity}\n              </Form.Control.Feedback>\n            </Form.Group>\n         <Form.Group as={Col} md=\"6\">\n             <Form.Label>Total</Form.Label>\n              \n              <Form.Control\n              disabled\n                type=\"number\"\n                placeholder=\"total\"\n                name=\"total\"\n                value={values.quantity===0?values.total:values.quantity*parseInt(getPrice(values.product_id))}\n                onChange={handleChange}\n               \n              >\n            \n        \n              </Form.Control>\n      \n              \n            </Form.Group>\n            </Form.Row>\n            <Form.Row>\n            <Form.Group as={Col} md=\"12\">\n             <Form.Label>Payment</Form.Label>\n              \n              <Form.Control\n                as=\"select\"\n                placeholder=\"\"\n                name=\"payment1\"\n                value={values.payment1}\n                onChange={handleChange}\n                isInvalid={!!errors.payment1}\n              >\n                  <option value=\"0\">Choose Product</option>\n                  <option value=\"1\">Completed</option>\n                  <option value=\"2\">Pending</option>\n\n              </Form.Control>\n              <Form.Control.Feedback type=\"invalid\">\n                {errors.payment1}\n              </Form.Control.Feedback>\n            </Form.Group>\n            </Form.Row>\n          <Button type=\"submit\">Add Order</Button>\n          \n                        </Form>\n                        \n                    )}\n                    </Formik>\n                </Modal.Body>          \n\n            </Modal>\n        </div>\n    );\n}\n}\nconst mapStateToProps= state=>{\n    return({\n        customers:state.customer.customers,\n        products:state.item.items,\n        categories:state.category.categories,\n        user:state.auth.user,\n        error:state.error\n    })\n}\n\n\nexport default connect(mapStateToProps,{loadUser,clearErrors,addOrder,getOrders,getCategories,getCustomers,getItems})(AddOrderModal);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AnimatedCard\\AnimatedCard.js",["353","354","355","356"],"import { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar';\nimport CountUp from 'react-countup';\nimport React, { useState } from 'react';\nimport './AnimatedCard.css';\nimport 'react-circular-progressbar/dist/styles.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {  faQuestionCircle,faUserCircle,faCommentDollar, faShoppingBag } from '@fortawesome/free-solid-svg-icons';\nimport AnimatedProgressProvider from \"./AnimatedProgressProvider\";\nimport { easeQuadInOut } from \"d3-ease\";\nimport {Col,Row, Spinner} from 'react-bootstrap'\nimport {Card} from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { useEffect } from 'react';\nimport {getItems} from '../../action/itemAction';\nimport {getOrders} from '../../action/orderAction'\nfunction AnimatedCard(props) {\n\n    // const [products,setProducts]=useState([]);\n    const [Expenses,setExpenses]=useState(0);\n\n\n    const countExpenses=()=>{\n        let total=0;\n        props.products.map(product=>{\n            total+=product.price*product.stock\n            return\n        })\n        // console.log(\"Expenses:\",total);\n        setExpenses(total)\n    }\n    useEffect(()=>{\n        props.getItems();\n        props.getOrders();  \n    },[])\n    useEffect(()=>{\n        if(props.products){\n            countExpenses();\n            // setProducts(props.products)\n\n            // console.log(\"Products From Animated Card:\",products);\n        }\n    },[props.products]);\n    \n\n        return (\n            <>\n            {props.products.length===0?<Spinner style={{width:'5rem',height:'5rem'}} animation=\"border\" variant=\"primary\" />:\n\n            <div style={{margin:'0px 17px'}}>\n                <Row  className=\"cardlist\">\n                    <Col lg={3} sm={6}>\n                        <Card className=\"card-box card1 bg-midnight-bloom p-3 mb-5\">\n                        \n                            <div className=\"d-flex align-items-center\">\n\n                            <AnimatedProgressProvider\n                                    valueStart={0}\n                                    \n                                    valueEnd={props.orders.length+5}\n                                    duration={3}\n                                    easingFunction={easeQuadInOut}\n                                    \n                                >\n                                    {value => {\n                                   \n                                    return (\n                                        <CircularProgressbarWithChildren\n                                        value={value}\n                                        \n                                        /* This is important to include, because if you're fully managing the\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\nelf, you'll want to disable the CSS animation. */\n                                        styles={buildStyles({pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\"})}\n                                        > \n\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\n                                        <FontAwesomeIcon icon={faQuestionCircle} className=\"font-size-lg icon1 \" />\n                                    </div>\n                                    </CircularProgressbarWithChildren>\n                                    );\n                                    }}\n                                </AnimatedProgressProvider>\n                                \n                                <div className=\"pl-3\">\n                                    <div className=\" text-white  font-weight-bold\">Orders</div>\n                                    <div className=\"value font-weight-bold pt-2 text-white \">\n                                        <CountUp\n                                            start={0}\n                                            end={props.orders.length}\n                                            duration={6}\n                                            delay={0}\n                                            separator=\"\"\n                                            decimals={0}\n                                            decimal=\",\"\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            \n                        </Card>\n                    </Col>\n                    <Col lg={3} sm={6}>\n                        <Card className=\"card-box card2 bg-royal p-3 mb-5\">\n                            <div className=\"d-flex align-items-center\">\n                            \n                            <AnimatedProgressProvider\n                                    valueStart={0}\n                                    \n                                    valueEnd={54}\n                                    duration={6}\n                                    easingFunction={easeQuadInOut}\n                                    \n                                >\n                                    {value => {\n                                   \n                                    return (\n                                        <CircularProgressbarWithChildren\n                                        value={value}\n                                        \n                                        /* This is important to include, because if you're fully managing the\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\nelf, you'll want to disable the CSS animation. */\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\n                                        >\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\n                                        <FontAwesomeIcon icon={faUserCircle} className=\"font-size-lg icon1 \" />\n                                    </div>\n                                    </CircularProgressbarWithChildren>\n                                    );\n                                    }}\n                                </AnimatedProgressProvider>\n                                <div className=\"pl-3\">\n                                    <div className=\" text-white font-weight-bold\">Visitors</div>\n                                    <div className=\"value font-weight-bold text-white pt-2  \">\n                                        <CountUp\n                                            start={0}\n                                            end={54}\n                                            duration={6}\n                                            delay={2}\n                                            separator=\"\"\n                                            decimals={0}\n                                            decimal=\",\"\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col lg={3} sm={6}>\n                        <Card className=\"card-box card3 bg-deep-sky p-3 mb-5\">\n                            <div className=\"d-flex align-items-center\">\n                            <AnimatedProgressProvider\n                                    valueStart={0}\n                                    \n                                    valueEnd={54}\n                                    duration={6}\n                                    easingFunction={easeQuadInOut}\n                                    \n                                >\n                                    {value => {\n                                   \n                                    return (\n                                        <CircularProgressbarWithChildren\n                                        value={value}\n                                        \n                                        /* This is important to include, because if you're fully managing the\n                                    animation yoursimport AnimatedProgressProvider from './AnimatedProgressProvider';\nelf, you'll want to disable the CSS animation. */\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\n                                        >\n                                    <div className=\"text-white d-40 rounded-circle btn-icon\">\n                                        <FontAwesomeIcon icon={faShoppingBag} className=\"font-size-lg icon1 \" />\n                                    </div>\n                                    </CircularProgressbarWithChildren>\n                                    );\n                                    }}\n                                </AnimatedProgressProvider>\n                                <div className=\"pl-3\">\n                                    <div className=\" text-white font-weight-bold\">Products</div>\n                                    <div className=\"value font-weight-bold pt-2 text-white \">\n                                        <CountUp\n                                            start={0}\n                                            end={props.products.length}\n                                            duration={6}\n                                            delay={0}\n                                            separator=\"\"\n                                            decimals={0}\n                                            decimal=\",\"\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </Card>\n                    </Col>\n                    <Col lg={3} sm={6}>\n                        <Card className=\"card-box card4 bg-plum-plate p-3 mb-5\">\n                            <div className=\"d-flex align-items-center\">\n                            <AnimatedProgressProvider\n                                    valueStart={0}\n                                    \n                                    valueEnd={75}\n                                    duration={6}\n                                    easingFunction={easeQuadInOut}\n                                    \n                                >\n                                    {value => {\n                                    const roundedValue = Math.round(value);\n                                    return (\n                                        <CircularProgressbarWithChildren\n                                        value={value}\n\n\n                                        styles={buildStyles({ pathTransition: \"none\",pathColor: \"rgba(255,255,255,.95)\", trailColor: \"rgba(255,255,255,.1)\" })}\n                                        >\n                                             <div className=\"text-white d-40 rounded-circle btn-icon\">\n                                        <FontAwesomeIcon icon={faCommentDollar} className=\"font-size-lg icon1 \" />\n                                    </div>\n                                    </CircularProgressbarWithChildren>\n                                    );\n                                    }}\n                                </AnimatedProgressProvider>\n                                <div className=\"pl-3\">\n                                    <div className=\"text-white  font-weight-bold\">Expenses</div>\n                                    <div className=\"value font-weight-bold pt-2  text-white\">\n                                        ₹<CountUp\n                                        start={0}\n                                        end={Expenses}\n                                        duration={6}\n                                        delay={1}\n                                        separator=\"\"\n                                        decimals={0}\n                                        decimal=\",\"\n                                    />\n                                    </div>\n                                </div>\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n        </div>}\n            </>\n        );\n    }\nconst mapStateToProps=state=>{\n    return {\n        itemsLoaded:state.item.itemsLoaded,\n        products:state.item.items,\n        orders:state.order.orders\n    }\n}\n    export default connect(mapStateToProps,{getItems,getOrders})(AnimatedCard);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\ProductsList\\ProductListData.js",["357","358","359","360","361","362","363","364","365","366","367","368"],"import React, { useEffect, useState } from 'react'\nimport { Card, Row, Col,Button,Media,Tooltip, Accordion, DropdownButton, OverlayTrigger, Spinner } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch,faFilter, faTimes,faTrash, faChevronCircleDown, faChevronCircleRight, faArrowAltCircleUp, faArrowAltCircleDown, faStar, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport './ProductListData.css'\nimport {deleteItem, deleteSelectedItem} from '../../action/itemAction'\nimport { connect } from 'react-redux';\nimport UpdateProductModal from './UpdateProductModal';\nimport default_product from '../../assets/images/default-pro.jpg'\nimport {NavLink} from 'react-router-dom'\nimport CountUp from 'react-countup';\n\n\n\nconst styles = {\n    mediaItem: {\n    //   margin:'1rem',\n    //   border: \"1px solid gray\",\n      backgroundColor: \"#f5f5f5\",\n \n    },\n    mediaItemButtons: {\n      paddingTop: \"5px\",\n      paddingBottom: \"5px\"\n    }\n  };\n\n  \nfunction ProductList({products,deleteSelectedItem,deleteItem,user,isAuthenticated}) {\n\n//     var notificationSystem = React.createRef();\n//    const addNotification = (name) => {\n//   // event.preventDefault();\n//   let notification = notificationSystem.current;\n//     notification.addNotification({\n//     message:' has Been Deleted',\n//     level: 'Danger',\n//     autoDismiss:5\n//   });\n// };\n    var f=0;\n    let deleteAllClass=\"not-checked\"\n    const [state,setState]=useState({\n        checkedBoxes:[],\n        \n    })\n    // Column checkbox\n    const [isManfacturer,setIsManufacturer]=useState(true);\n    const [isRating,setIsRating]=useState(true);\n    const [isPrice,setIsPrice]=useState(true);\n    const [isStock,setIsStock]=useState(true);\n\n    const [open1,setOpen1]=useState(false);\n    const [open2,setOpen2]=useState(false);\n    const [open3,setOpen3]=useState(false);\n    const [open4,setOpen4]=useState(false);\n    const [chkBox,setChkBox]=useState(false)\n    const [q,setQ]=useState(\"\")\n\n    const [isNewest,setIsNewest]=useState(false);\n    const [isAscending,setIsAscending]=useState(false);\n    const [isDecending,setIsDecending]=useState(false);\n    const [minRange,setMinRange]=useState(0);\n    const [maxRange,setMaxRange]=useState(1000000);\n    \n    let newProducts=products;\n    const Range=(p)=>{\n        console.log(\"min:\",minRange,\"  max:\",maxRange,\" num:\",p.length);\n        return p.filter(product=>parseInt(product.price)>=minRange && parseInt(product.price)<=maxRange)\n    }\n    const sort=()=>{\n            console.log(\"Sorting Called\",isAscending,isDecending);\n            // let newProducts=products;\n                // if(!isAscending && !isDecending)\n                // newProducts=products;\n             if(isAscending){\n                setIsAscending(false);\n                newProducts= products.sort((a, b) => b.price - a.price)\n            }\n            else if(isDecending){\n                setIsDecending(false);\n                newProducts=products.sort((a, b) => a.price - b.price)\n            }\n          else newProducts=products;\n    }\n    useEffect(()=>{\n            // Range();\n            sort();\n    },[isDecending,isAscending,isNewest,newProducts]);\n\n    const Search=(products)=>{    \n    \n        return (products.length>0?products.filter(product=>\n\n               product?product.name.toLowerCase().indexOf(q.toLowerCase())!==-1 || //str.includes(PATTERN)\n                // product.price.toLowerCase().indexOf(q.toLowerCase())!==-1 ||\n                product.manufacturer.toLowerCase().indexOf(q.toLowerCase())!==-1\n                :''):'');\n\n        }\n\nconst deleteAll=(e)=>{\n    deleteSelectedItem(state.checkedBoxes)\n    // for(let i=0;i<state.checkedBoxes.length;i++){\n    //     setTimeout(()=>\n        \n    //     {\n            \n    //         console.log(\"del Called\")}\n    //     ,3000);\n    //     deleteItem(state.checkedBoxes[i]);\n    // }\n    setChkBox(false);\n    setState(prevState=>{\n            let {checkedBoxes}=prevState;\n        checkedBoxes.splice(0, checkedBoxes.length)\n        return {...prevState.checkedBoxes, checkedBoxes: checkedBoxes };\n    });\n\n}\nconst deleteProduct=()=>{\n        \n}\nconst handleCheck= async (e,product)=> {\n        let itemName=e.target.name;\n        let checked=e.target.checked;\n      \n        if(itemName==='checkAll'){\n                    let searchedProduct=Search(products)\n                    if(checked){\n                        f=1\n                        deleteAllClass+=\"checked\"\n                        console.log(deleteAllClass);\n                        setChkBox(true)\n                        setState(prevState=>{\n                        let  {checkedBoxes}=prevState;\n\n                            let categories = new Set(checkedBoxes)\n                            for(var i=0;i<searchedProduct.length;i++)\n                            categories.add(searchedProduct[i].id)\n                            checkedBoxes=Array.from(categories)\n                            return {...prevState.checkedBoxes,  checkedBoxes: checkedBoxes }\n\n                        })\n                console.log(state.checkedBoxes);\n                    }\n                    else{\n                        f=0\n                        deleteAllClass=\"\"\n                        setChkBox(false);\n                        setState(prevState=>{\n                                let {checkedBoxes}=prevState;\n                            checkedBoxes.splice(0, checkedBoxes.length)\n                            return {...prevState.checkedBoxes, checkedBoxes: checkedBoxes };\n                        });\n                        console.log(state.checkedBoxes);\n                    }\n        }\n\n        else if(checked) {\n            \n            let arr = state.checkedBoxes;\n            arr.push(product.id);\n            console.log(\"Checked:\",product.id,arr);\n            \n            setState(state=>({...state.checkedBoxes,checkedBoxes:arr}));\n        } else {\n            // if(f===1)\n            setChkBox(false);\n            let products=state.checkedBoxes.filter(id=>id!==product.id)\n            // let products = state.checkedBoxes.splice(state.checkedBoxes.indexOf(product.id), 1);\n            console.log(\"UnChecked:\",product.id,products);\n            setState(state=>({...state.checkedBoxes,checkedBoxes:products}));\n        }\t\n    }\n    \n   \n\n    return (\n    \n        <>\n {/* <NotificationSystem ref={notificationSystem} /> */}\n        <Col>\n          <div className='products'>\n                 <Card  className='cardpl'>\n                 <Card.Header className='header'>\n                \n                     <div className='header-filter'>\n                        <div style={{marginTop:'1rem'}}>\n                                <input id=\"_checkbox\"\n                                    //   id={111111}\n                                    name='checkAll'\n                                    type=\"checkbox\"\n                                    checked={chkBox}\n                                    onChange={(e)=>handleCheck(e)}\n                                    \n                                />\n                                <label for=\"_checkbox\">\n                                <div id=\"tick_mark\"></div>\n                                </label>\n                               \n                        </div>\n                        <OverlayTrigger\n                                        placement=\"bottom\"\n                                        overlay={<Tooltip id=\"button-tooltip-2\">Delete Selected (Not Working :( Some Issue with Function)</Tooltip>}\n                                            >\n                                                {/* onClick={(e)=>deleteAll(e)} */}\n                        <Button  style={{display: state.checkedBoxes.length>0 ? 'block' : 'none' }} variant=\"danger\" size=\"sm\"><FontAwesomeIcon icon={faTrash}/></Button></OverlayTrigger>\n                        <div className='search-bar' >\n                          <FontAwesomeIcon icon={faSearch} />\n\n                          <input type=\"text\" value={q} placeholder=\"Search Products\" onChange={(e)=>{setQ(e.target.value)}}/>\n                          \n                          \n                          </div>\n                          <div className='filter-icon'>\n                          <DropdownButton title={<FontAwesomeIcon icon={faFilter} />} className='filter-button' style={{borderRadius:'50%',background:'transparent',color:'#3c44b1',border:'none',boxShadow:'none'}}> \n                                \n                                <Row >\n         <div >\n                 <Card className=\"filter-card\" >\n\n                \n                    <Card.Body className=\"filter-body\" style={{width:'15rem',padding:'0rem'}}>\n                        <Accordion defaultActiveKey=\"0\">\n                            <Card>\n                                <Accordion.Toggle style={{background:!open1?\"#fff\":'#f3f3f3'}} eventKey=\"0\" onClick={() => setOpen1(!open1)}>\n                                    <div className=\"accordion-header\" ><h6>Price</h6><FontAwesomeIcon style={{color:open1?\"red\":\"#3b44c1\"}} icon={open1?faChevronCircleRight:faChevronCircleDown} /></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body >\n                                  <div className=\"range-input\" ><span style={{color:'gray'}}><b>Min:</b></span><input  type='number' value={minRange} onChange={(e)=>setMinRange(e.target.value)}/>\n                                  </div>\n                                  <div className=\"range-input\"><span style={{color:'gray'}} ><b>Max:</b></span><input  type='number' value={maxRange} onChange={(e)=>setMaxRange(e.target.value)}/>\n                                </div></Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                           \n                            </Accordion>\n                            <Accordion defaultActiveKey=\"1\">\n\n                            <Card>\n                            <Accordion.Toggle  style={{background:!open2?\"#fff\":'#f3f3f3'}} eventKey=\"1\" onClick={()=>setOpen2(!open2)}>\n                                    <div className=\"accordion-header\"><h6>Customize Columns</h6><FontAwesomeIcon style={{color:open2?\"red\":\"#3b44c1\"}} icon={open2?faChevronCircleRight:faChevronCircleDown}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"1\">\n                                <Card.Body>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isManfacturer} onChange={()=>setIsManufacturer(!isManfacturer)}/><h6>Manfacturer</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isRating} onChange={()=>setIsRating(!isRating)}/><h6>Rating</h6></Col></Row>\n                                    <Row><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isPrice} onChange={()=>setIsPrice(!isPrice)}/><h6>Price</h6></Col><Col style={{display:'flex',paddingBottom:'.3rem'}} sm={6} sm={6}><input style={{marginRight:'.3rem'}} type=\"checkbox\" checked={isStock} onChange={()=>setIsStock(!isStock)}/><h6>Stock</h6></Col></Row>\n                                   \n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n                           \n                            <Accordion defaultActiveKey=\"5\">\n\n                            <Card>\n                            <Accordion.Toggle style={{background:open4?\"#fff\":'#f3f3f3'}}  eventKey=\"3\" onClick={()=>setOpen4(!open4)}>\n                                    <div className=\"accordion-header\"><h6>Sort By Price</h6><FontAwesomeIcon style={{color:open4?\"#3b44c1\":\"red\"}} icon={open4?faChevronCircleDown:faChevronCircleRight}/></div>\n                                </Accordion.Toggle>\n                                <Accordion.Collapse eventKey=\"3\">\n                                <Card.Body>\n                                    <div style={{display:'flex',flexDirection:'column',justifyContent:'space-around', alignItems:'center'}}>\n                                        \n                                        <div onClick={()=>{setIsAscending(!isAscending)}} className=\"asending\" style={{marginBottom:'.6rem',display:'flex',alignItems:'center',cursor:'pointer'}}><a><FontAwesomeIcon style={{color:'#3b44c1'}} icon={faArrowAltCircleUp}/><h7>Ascending</h7></a></div>\n                                        <div onClick={()=>{setIsDecending(!isDecending)}} className=\"desending\" style={{display:'flex',alignItems:'center',cursor:'pointer'}}><FontAwesomeIcon style={{color:'red'}} icon={faArrowAltCircleDown}/><h7>Decending</h7></div>\n                                    </div>\n                                </Card.Body>\n                                </Accordion.Collapse>\n                            </Card>\n                            </Accordion>\n   \n                </Card.Body>   \n                           \n                         \n                           </Card>\n                           </div>\n         </Row>    \n                                </DropdownButton>\n                          </div>\n                         \n                   </div>\n                  \n                  </Card.Header>\n                  <div className=\"title\" style={{height:'2rem',marginLeft:'11rem'}}>\n                    <Row style={{padding:'.5rem 0',fontWeight:'bold',color:'#3b44c1'}}>\n                            {/* <Col xs={2}></Col> */}\n                            <Col style={{display:isManfacturer?\"block\":\"none\"}} className='product-col' xs={2}>By</Col>\n                            <Col style={{display:isRating?\"block\":\"none\"}} className='product-col' xs={1}>Rating</Col>\n                            <Col style={{display:isPrice?\"block\":\"none\"}} className='product-col' xs={1}>Price</Col>\n                            <Col style={{display:isStock?\"block\":\"none\"}} className='product-col' xs={2}>Stock</Col>\n                            <Col  className='product-col' xs={3}></Col>\n\n                    </Row>\n                </div>\n                 <Card.Body  className='productListBody overflow-auto custom-scrollbar-css '>\n\n\n\n                 \n            <p style={{display:'flex',alignItems:products.length<1?\"center\":\"\",flexDirection:'column-reverse'}}>{newProducts.length===0?<div style={{display:'flex',justifyContent:'center',alignItems:'center'}}><Spinner style={{ marginTop:'4rem',width: '5rem', height: '5rem', color:'green' }} animation=\"grow\" variant=\"success\" /></div>:Range(Search(newProducts)).map((product,id)=>(\n                \n                <div className=\"product-card-indentical\" style={{color:'black',display:'flex',alignItems:'center',border:'1px solid #dee2e6',margin:'.5rem'}}>\n             \n              <div  style={{marginLeft:'1rem',marginTop:'2rem'}} className=\"checkBocAll\">\n              \n                   \n             <input\n                style={{display:'none'}}\n                className=\"singleCheckBox\"\n                id={id}\n                type=\"checkbox\"\n                name={product.id}\n                value={product.id}\n                checked={state.checkedBoxes.includes(product.id)}\n                onChange={(e) => handleCheck(e, product)}\n            \n        /><label for={id}>\n        <div id=\"tick_mark\"></div>\n      </label></div>\n            <Media key={product.id} \n                    style={{padding:'.5rem',flex:'1'}} className={styles.mediaItem}>\n                           <NavLink to={{\n                    pathname:`products/${product.id}`,\n                    state: {item:product} \n                  }} >\n                      \n                       <img\n                                width={100}\n                                height={100}\n                                className=\"align-self-center mr-3\"\n                                src={product.img?product.img:default_product}\n                                alt=\"Generic placeholder\"\n                            />\n                      </NavLink>\n                            \n                            <Media.Body className={styles.mediaBody}>\n                            <NavLink to={{\n                                    pathname:`products/${product.id}`,\n                                    state: {item:product}  \n                  }} > <p><b>{product.name}</b></p></NavLink>\n                                <Row  className='product-row'>\n                                <Col style={{display:isManfacturer?\"block\":\"none\"}} className='product-col' xs={2}>\n                                    <span className=\"inside-label\"><strong>By:</strong></span>{product.manufacturer}\n                                </Col>\n                                <Col style={{display:isRating?\"block\":\"none\"}} className='product-col' xs={1}><b><p style={{width:'2.7rem',margin:'0 0 0 .5rem',borderRadius:'5px',background:'green',color:'white',padding:'.1rem .3rem',fontSize:'12px'}}>{product.rating?product.rating:\"4.5\"} <FontAwesomeIcon  icon={faStar}/></p></b></Col>\n                                <Col style={{display:isPrice?\"block\":\"none\"}} className='product-col' xs={1}>\n                                    <strong>₹<CountUp\n                                        start={0}\n                                        end={product.price}\n                                        duration={2}\n                                        delay={0}\n                                        separator=\"\"\n                                        decimals={0}\n                                        decimal=\",\"\n                                    /></strong>\n                                </Col>\n                                <Col style={{display:isStock?\"block\":\"none\"}} className='product-col' xs={2}><span className=\"inside-label\"><strong>Stock:</strong></span><span style={{color:product.stock>=10?'#1bc943':'#f83245',borderRadius:'5px',border:product.stock>=10?'1px solid #1bc943':' 1px solid #f83245',background:product.stock>=10?'#e5f9ed':'#fff5f6',padding:'.0rem .3rem'}}><b><CountUp\n                                        start={0}\n                                        end={product.stock}\n                                        duration={3}\n                                        delay={0}\n                                        separator=\"\"\n                                        decimals={0}\n                                        decimal=\",\"\n                                    /></b></span></Col>\n                                \n                                <Col xs={3} style={{minWidth:'10rem'}}>\n                                    <div className='action-button'>\n                                    \n                                       \n                                    {/* <UpdateProductModal user={user} product={product}/> */}\n                                    <OverlayTrigger        \n                                                placement=\"bottom\"\n                                            overlay={<Tooltip id=\"button-tooltip-2\">Edit Product</Tooltip>}>\n                                <NavLink \n                                to={{\n                                    pathname:'/admin/updateProduct',\n                                    state: {product:product,user:user} \n                                  }}\n                                  >\n                                            <Button variant=\"primary\" size=\"sm\">\n                                                    <FontAwesomeIcon icon={faEdit}/>\n                                            </Button>\n                                </NavLink>\n                                    </OverlayTrigger>\n                                  \n                                    <div>\n                                        <OverlayTrigger\n                                            placement=\"bottom\"\n                                            overlay={<Tooltip id=\"button-tooltip-2\">Delete Product</Tooltip>}>\n                                                \n                                            <Button variant=\"danger\" onClick={()=>deleteItem(product.id)} size=\"sm\">\n                                                <FontAwesomeIcon icon={faTimes}/>\n                                            </Button>\n                                        </OverlayTrigger>\n                                    </div>\n\n                                    </div>\n                                </Col>\n                                </Row>                              \n                            </Media.Body>\n                            </Media></div> ))}\n                           \n                </p>    \n                </Card.Body>   \n                           \n                         \n                           </Card>\n                           </div>\n                           </Col>\n                          \n        </>\n    )\n}\nconst mapStateToProps=state=>{\n    return{\n        user:state.auth.user,\n        isAuthenticated:state.auth.isAuthenticated\n    }\n}\nexport default connect(mapStateToProps,{deleteItem,deleteSelectedItem})(ProductList);","C:\\Users\\spicy\\Downloads\\Inventory-management-17\\client\\src\\components\\AnimatedCard\\AnimatedProgressProvider.js",[],{"ruleId":"369","replacedBy":"370"},{"ruleId":"371","replacedBy":"372"},{"ruleId":"373","severity":1,"message":"374","line":1,"column":28,"nodeType":"375","messageId":"376","endLine":1,"endColumn":36},{"ruleId":"373","severity":1,"message":"377","line":11,"column":17,"nodeType":"375","messageId":"376","endLine":11,"endColumn":23},{"ruleId":"373","severity":1,"message":"378","line":7,"column":8,"nodeType":"375","messageId":"376","endLine":7,"endColumn":26},{"ruleId":"373","severity":1,"message":"379","line":26,"column":7,"nodeType":"375","messageId":"376","endLine":26,"endColumn":13},{"ruleId":"380","severity":1,"message":"381","line":248,"column":362,"nodeType":"382","endLine":248,"endColumn":368},{"ruleId":"380","severity":1,"message":"381","line":249,"column":101,"nodeType":"382","endLine":249,"endColumn":107},{"ruleId":"380","severity":1,"message":"381","line":249,"column":345,"nodeType":"382","endLine":249,"endColumn":351},{"ruleId":"383","severity":1,"message":"384","line":303,"column":331,"nodeType":"385","endLine":303,"endColumn":334},{"ruleId":"373","severity":1,"message":"386","line":7,"column":37,"nodeType":"375","messageId":"376","endLine":7,"endColumn":54},{"ruleId":"373","severity":1,"message":"387","line":7,"column":72,"nodeType":"375","messageId":"376","endLine":7,"endColumn":82},{"ruleId":"373","severity":1,"message":"388","line":18,"column":35,"nodeType":"375","messageId":"376","endLine":18,"endColumn":40},{"ruleId":"373","severity":1,"message":"389","line":18,"column":42,"nodeType":"375","messageId":"376","endLine":18,"endColumn":49},{"ruleId":"373","severity":1,"message":"390","line":18,"column":51,"nodeType":"375","messageId":"376","endLine":18,"endColumn":56},{"ruleId":"373","severity":1,"message":"391","line":19,"column":8,"nodeType":"375","messageId":"376","endLine":19,"endColumn":17},{"ruleId":"373","severity":1,"message":"392","line":25,"column":33,"nodeType":"375","messageId":"376","endLine":25,"endColumn":39},{"ruleId":"373","severity":1,"message":"393","line":33,"column":7,"nodeType":"375","messageId":"376","endLine":33,"endColumn":18},{"ruleId":"373","severity":1,"message":"394","line":118,"column":20,"nodeType":"375","messageId":"376","endLine":118,"endColumn":35},{"ruleId":"383","severity":1,"message":"384","line":440,"column":95,"nodeType":"385","endLine":440,"endColumn":99},{"ruleId":"383","severity":1,"message":"384","line":542,"column":100,"nodeType":"385","endLine":542,"endColumn":103},{"ruleId":"395","severity":1,"message":"396","line":121,"column":1,"nodeType":"385","endLine":121,"endColumn":354},{"ruleId":"383","severity":1,"message":"384","line":41,"column":33,"nodeType":"385","endLine":41,"endColumn":97},{"ruleId":"383","severity":1,"message":"397","line":44,"column":33,"nodeType":"385","endLine":44,"endColumn":140},{"ruleId":"398","severity":1,"message":"399","line":46,"column":30,"nodeType":"375","messageId":"400","endLine":46,"endColumn":33},{"ruleId":"373","severity":1,"message":"401","line":5,"column":8,"nodeType":"375","messageId":"376","endLine":5,"endColumn":21},{"ruleId":"373","severity":1,"message":"389","line":2,"column":16,"nodeType":"375","messageId":"376","endLine":2,"endColumn":23},{"ruleId":"373","severity":1,"message":"402","line":2,"column":92,"nodeType":"375","messageId":"376","endLine":2,"endColumn":100},{"ruleId":"373","severity":1,"message":"403","line":87,"column":16,"nodeType":"375","messageId":"376","endLine":87,"endColumn":21},{"ruleId":"373","severity":1,"message":"404","line":87,"column":22,"nodeType":"375","messageId":"376","endLine":87,"endColumn":30},{"ruleId":"373","severity":1,"message":"405","line":28,"column":11,"nodeType":"375","messageId":"376","endLine":28,"endColumn":28},{"ruleId":"406","severity":1,"message":"407","line":39,"column":61,"nodeType":"385","endLine":39,"endColumn":100},{"ruleId":"408","severity":1,"message":"409","line":10,"column":1,"nodeType":"410","endLine":80,"endColumn":2},{"ruleId":"408","severity":1,"message":"409","line":15,"column":1,"nodeType":"410","endLine":98,"endColumn":2},{"ruleId":"408","severity":1,"message":"409","line":10,"column":1,"nodeType":"410","endLine":30,"endColumn":2},{"ruleId":"408","severity":1,"message":"409","line":10,"column":1,"nodeType":"410","endLine":77,"endColumn":2},{"ruleId":"408","severity":1,"message":"409","line":9,"column":1,"nodeType":"410","endLine":26,"endColumn":2},{"ruleId":"408","severity":1,"message":"409","line":10,"column":1,"nodeType":"410","endLine":80,"endColumn":2},{"ruleId":"373","severity":1,"message":"411","line":2,"column":59,"nodeType":"375","messageId":"376","endLine":2,"endColumn":66},{"ruleId":"373","severity":1,"message":"412","line":2,"column":68,"nodeType":"375","messageId":"376","endLine":2,"endColumn":75},{"ruleId":"373","severity":1,"message":"394","line":59,"column":18,"nodeType":"375","messageId":"376","endLine":59,"endColumn":33},{"ruleId":"373","severity":1,"message":"413","line":129,"column":9,"nodeType":"375","messageId":"376","endLine":129,"endColumn":17},{"ruleId":"414","severity":1,"message":"415","line":169,"column":7,"nodeType":"416","messageId":"417","endLine":169,"endColumn":16},{"ruleId":"373","severity":1,"message":"411","line":2,"column":59,"nodeType":"375","messageId":"376","endLine":2,"endColumn":66},{"ruleId":"373","severity":1,"message":"412","line":2,"column":68,"nodeType":"375","messageId":"376","endLine":2,"endColumn":75},{"ruleId":"373","severity":1,"message":"389","line":11,"column":10,"nodeType":"375","messageId":"376","endLine":11,"endColumn":17},{"ruleId":"373","severity":1,"message":"418","line":13,"column":19,"nodeType":"375","messageId":"376","endLine":13,"endColumn":32},{"ruleId":"373","severity":1,"message":"394","line":52,"column":18,"nodeType":"375","messageId":"376","endLine":52,"endColumn":33},{"ruleId":"373","severity":1,"message":"413","line":102,"column":9,"nodeType":"375","messageId":"376","endLine":102,"endColumn":17},{"ruleId":"373","severity":1,"message":"379","line":7,"column":7,"nodeType":"375","messageId":"376","endLine":7,"endColumn":13},{"ruleId":"373","severity":1,"message":"419","line":49,"column":13,"nodeType":"375","messageId":"376","endLine":49,"endColumn":21},{"ruleId":"373","severity":1,"message":"420","line":52,"column":16,"nodeType":"375","messageId":"376","endLine":52,"endColumn":24},{"ruleId":"373","severity":1,"message":"421","line":14,"column":9,"nodeType":"375","messageId":"376","endLine":14,"endColumn":15},{"ruleId":"422","severity":1,"message":"423","line":33,"column":7,"nodeType":"424","endLine":33,"endColumn":38,"suggestions":"425"},{"ruleId":"406","severity":1,"message":"407","line":54,"column":24,"nodeType":"385","endLine":54,"endColumn":89},{"ruleId":"414","severity":1,"message":"426","line":101,"column":20,"nodeType":"427","messageId":"428","endLine":101,"endColumn":26},{"ruleId":"414","severity":1,"message":"426","line":112,"column":20,"nodeType":"427","messageId":"428","endLine":112,"endColumn":26},{"ruleId":"414","severity":1,"message":"426","line":122,"column":27,"nodeType":"429","messageId":"430","endLine":122,"endColumn":29},{"ruleId":"422","severity":1,"message":"423","line":15,"column":7,"nodeType":"424","endLine":15,"endColumn":9,"suggestions":"431"},{"ruleId":"422","severity":1,"message":"432","line":21,"column":7,"nodeType":"424","endLine":21,"endColumn":24,"suggestions":"433"},{"ruleId":"373","severity":1,"message":"434","line":22,"column":8,"nodeType":"375","messageId":"376","endLine":22,"endColumn":13},{"ruleId":"373","severity":1,"message":"435","line":22,"column":14,"nodeType":"375","messageId":"376","endLine":22,"endColumn":22},{"ruleId":"422","severity":1,"message":"423","line":30,"column":3,"nodeType":"424","endLine":30,"endColumn":5,"suggestions":"436"},{"ruleId":"380","severity":1,"message":"381","line":183,"column":292,"nodeType":"382","endLine":183,"endColumn":298},{"ruleId":"380","severity":1,"message":"381","line":184,"column":101,"nodeType":"382","endLine":184,"endColumn":107},{"ruleId":"380","severity":1,"message":"381","line":184,"column":295,"nodeType":"382","endLine":184,"endColumn":301},{"ruleId":"406","severity":1,"message":"407","line":222,"column":147,"nodeType":"385","endLine":222,"endColumn":278},{"ruleId":"406","severity":1,"message":"407","line":223,"column":148,"nodeType":"385","endLine":223,"endColumn":231},{"ruleId":"406","severity":1,"message":"407","line":247,"column":88,"nodeType":"385","endLine":247,"endColumn":218},{"ruleId":"373","severity":1,"message":"437","line":2,"column":30,"nodeType":"375","messageId":"376","endLine":2,"endColumn":36},{"ruleId":"373","severity":1,"message":"438","line":2,"column":43,"nodeType":"375","messageId":"376","endLine":2,"endColumn":47},{"ruleId":"373","severity":1,"message":"412","line":2,"column":48,"nodeType":"375","messageId":"376","endLine":2,"endColumn":55},{"ruleId":"373","severity":1,"message":"439","line":6,"column":10,"nodeType":"375","messageId":"376","endLine":6,"endColumn":17},{"ruleId":"373","severity":1,"message":"440","line":6,"column":18,"nodeType":"375","messageId":"376","endLine":6,"endColumn":24},{"ruleId":"441","severity":1,"message":"442","line":66,"column":23,"nodeType":"385","endLine":72,"endColumn":25},{"ruleId":"373","severity":1,"message":"443","line":2,"column":48,"nodeType":"375","messageId":"376","endLine":2,"endColumn":57},{"ruleId":"373","severity":1,"message":"444","line":2,"column":58,"nodeType":"375","messageId":"376","endLine":2,"endColumn":63},{"ruleId":"373","severity":1,"message":"445","line":2,"column":65,"nodeType":"375","messageId":"376","endLine":2,"endColumn":70},{"ruleId":"373","severity":1,"message":"389","line":4,"column":10,"nodeType":"375","messageId":"376","endLine":4,"endColumn":17},{"ruleId":"373","severity":1,"message":"446","line":7,"column":24,"nodeType":"375","messageId":"376","endLine":7,"endColumn":34},{"ruleId":"383","severity":1,"message":"397","line":231,"column":87,"nodeType":"385","endLine":231,"endColumn":99},{"ruleId":"383","severity":1,"message":"397","line":330,"column":112,"nodeType":"385","endLine":330,"endColumn":124},{"ruleId":"373","severity":1,"message":"393","line":17,"column":7,"nodeType":"375","messageId":"376","endLine":17,"endColumn":18},{"ruleId":"383","severity":1,"message":"384","line":400,"column":87,"nodeType":"385","endLine":400,"endColumn":91},{"ruleId":"383","severity":1,"message":"384","line":499,"column":112,"nodeType":"385","endLine":499,"endColumn":116},{"ruleId":"373","severity":1,"message":"447","line":10,"column":11,"nodeType":"375","messageId":"376","endLine":10,"endColumn":23},{"ruleId":"373","severity":1,"message":"394","line":38,"column":22,"nodeType":"375","messageId":"376","endLine":38,"endColumn":37},{"ruleId":"373","severity":1,"message":"448","line":38,"column":16,"nodeType":"375","messageId":"376","endLine":38,"endColumn":18},{"ruleId":"373","severity":1,"message":"449","line":83,"column":7,"nodeType":"375","messageId":"376","endLine":83,"endColumn":16},{"ruleId":"414","severity":1,"message":"426","line":26,"column":13,"nodeType":"427","messageId":"428","endLine":26,"endColumn":19},{"ruleId":"422","severity":1,"message":"423","line":34,"column":7,"nodeType":"424","endLine":34,"endColumn":9,"suggestions":"450"},{"ruleId":"422","severity":1,"message":"451","line":42,"column":7,"nodeType":"424","endLine":42,"endColumn":23,"suggestions":"452"},{"ruleId":"373","severity":1,"message":"453","line":207,"column":43,"nodeType":"375","messageId":"376","endLine":207,"endColumn":55},{"ruleId":"373","severity":1,"message":"378","line":8,"column":8,"nodeType":"375","messageId":"376","endLine":8,"endColumn":26},{"ruleId":"373","severity":1,"message":"454","line":55,"column":12,"nodeType":"375","messageId":"376","endLine":55,"endColumn":17},{"ruleId":"373","severity":1,"message":"455","line":55,"column":18,"nodeType":"375","messageId":"376","endLine":55,"endColumn":26},{"ruleId":"373","severity":1,"message":"456","line":60,"column":21,"nodeType":"375","messageId":"376","endLine":60,"endColumn":32},{"ruleId":"422","severity":1,"message":"457","line":89,"column":7,"nodeType":"424","endLine":89,"endColumn":53,"suggestions":"458"},{"ruleId":"373","severity":1,"message":"459","line":102,"column":7,"nodeType":"375","messageId":"376","endLine":102,"endColumn":16},{"ruleId":"373","severity":1,"message":"460","line":121,"column":7,"nodeType":"375","messageId":"376","endLine":121,"endColumn":20},{"ruleId":"373","severity":1,"message":"461","line":148,"column":25,"nodeType":"375","messageId":"376","endLine":148,"endColumn":26},{"ruleId":"380","severity":1,"message":"381","line":248,"column":313,"nodeType":"382","endLine":248,"endColumn":319},{"ruleId":"380","severity":1,"message":"381","line":249,"column":101,"nodeType":"382","endLine":249,"endColumn":107},{"ruleId":"380","severity":1,"message":"381","line":249,"column":295,"nodeType":"382","endLine":249,"endColumn":301},{"ruleId":"383","severity":1,"message":"384","line":266,"column":195,"nodeType":"385","endLine":266,"endColumn":198},"no-native-reassign",["462"],"no-negated-in-lhs",["463"],"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","'UpdateProductModal' is defined but never used.","'styles' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'TokenExpireExtend' is defined but never used.","'isBlockedF' is defined but never used.","'Alert' is defined but never used.","'NavLink' is defined but never used.","'Modal' is defined but never used.","'PropTypes' is defined but never used.","'faInfo' is defined but never used.","'phoneRegExp' is assigned a value but never used.","'isAuthenticated' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-use-before-define","'ids' was used before it was defined.","usedBeforeDefined","'RegisterModal' is defined but never used.","'Collapse' is defined but never used.","'error' is assigned a value but never used.","'isUpdate' is assigned a value but never used.","'sidebarBackground' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Spinner' is defined but never used.","'Tooltip' is defined but never used.","'isLoaded' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'faCalendarAlt' is defined but never used.","'maxlimit' is assigned a value but never used.","'products' is assigned a value but never used.","'params' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["464"],"Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","ArrowFunctionExpression","expectedInside",["465"],"React Hook useEffect has a missing dependency: 'customers'. Either include it or remove the dependency array.",["466"],"'open1' is assigned a value but never used.","'setOpen1' is assigned a value but never used.",["467"],"'Button' is defined but never used.","'Form' is defined but never used.","'faTimes' is defined but never used.","'faEdit' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'FormGroup' is defined but never used.","'Label' is defined but never used.","'Input' is defined but never used.","'faUserEdit' is defined but never used.","'notification' is assigned a value but never used.","'id' is assigned a value but never used.","'customers' is assigned a value but never used.",["468"],"React Hook useEffect has a missing dependency: 'countExpenses'. Either include it or remove the dependency array.",["469"],"'roundedValue' is assigned a value but never used.","'open3' is assigned a value but never used.","'setOpen3' is assigned a value but never used.","'setIsNewest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'sort'. Either include it or remove the dependency array.",["470"],"'deleteAll' is assigned a value but never used.","'deleteProduct' is assigned a value but never used.","'f' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"473","fix":"477"},{"desc":"473","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},"Update the dependencies array to be: [history, props, props.isAuthenticated]",{"range":"483","text":"484"},"Update the dependencies array to be: [props]",{"range":"485","text":"486"},"Update the dependencies array to be: [customers, props.customers]",{"range":"487","text":"488"},{"range":"489","text":"486"},{"range":"490","text":"486"},"Update the dependencies array to be: [countExpenses, props.products]",{"range":"491","text":"492"},"Update the dependencies array to be: [isDecending, isAscending, isNewest, newProducts, sort]",{"range":"493","text":"494"},[1260,1291],"[history, props, props.isAuthenticated]",[658,660],"[props]",[828,845],"[customers, props.customers]",[1214,1216],[1250,1252],[1460,1476],"[countExpenses, props.products]",[3157,3203],"[isDecending, isAscending, isNewest, newProducts, sort]"]